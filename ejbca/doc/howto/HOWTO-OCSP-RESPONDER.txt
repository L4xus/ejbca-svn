This file describes how to configure ant start the OCSP responder.

Setting up external OCSP responders
===================================

Introduction
------------
You can set up separated OCSP responders in EJBCA. Using this you can isolate the CA from the Internet and still be
able to answer OCSP request. You can set up firewalls so that only outgoing traffic is allowed from the CA, and
nothing to the CA.
Separated OCSP responders is also good when you don't require high-preformance clustering for the CA, but you do need
high-performance for the OCSP responders. This should be a usual setup, if the CA only issues certificates once every year
for one million users, this does not put much pressure on the CA, but the OCSP responders can be put under high load continuously.

See the image HOWTO-OCSP-RESPONDER.jpg for an overview of a sample setup.

Building and configuring EJBCA.
-------------------------------
EJBCA should be configured as for any other installation but you must also set all preferences
(ocsp-database.*) of the responder data base. The responder database is the master database of all
the responders. Then EJBCA is built with the command: ant deploy

When EJBCA has been started you have to add a new publisher. As a superuser you add this publisher
on the "Edit Publishers" page in the admin GUI. Use publisher type "Custom Publisher". And these
configurations (if ocsp-datasource.jndi-name=OcspDS):
Class Path:                             org.ejbca.core.model.ca.publisher.ExternalOCSPPublisher
Properties of Custom Publisher:         dataSource java:/OcspDS

All certificate profiles to certificates that should be available to the OCSP responder should
have a reference to this publisher. To configure this you must be a super user.

When all settings above have been done then all created certificates belonging to a certificate
profile that has a the ExternalOCSPPublisher as publisher should be published in the responder
database as well as in the EJBCA database. When a certificate is revoked it will be revoked in
the responder database as well.
If the publishing is not working it is important to notice this and syncronize the databases again, 
see 'Error publishing to OCSP database' below.

Building and configuring the Responder.
---------------------------------------
The responder is configured as EJBCA is configured. Only the preferences ocsp.* and httpsserver.*
and datasource.* and database.* are relevant to the responder but you may keep ejbca.properties
from the EJBCA setup since definitions of other properties does no harm. But the ocsp.softKeys.*
preferences that has no meaning for EJBCA has also to be configured, please read description of
these properties in ejbca.properties.samples.
ocsp.usecasigningcert should be set to false.

Keys has to be generated for OCSP signing. One key for each CA. These keys can be generated by EJBCA.
Define a certificate profile that is like a normal end entity profile (use ENDUSER as template) 
but with the following key usages:
Key Usage: Digital Signature
Extended Key Usage: OCSPSigner

Note: the responders certificate AND the CA certificate need to be published from the CA to the 
OCSP responder. For the CA you do this by setting the CRL publisher to the OCSP publisher.


you should then create a user for each CA using this profile. 
Use the token type "p12" or "jks". When the key has been created it should be stored in the
directory defined by the ocsp.softKeys.dir property of ejbca.properties. The password for each key
must be the same and should be equal to the ocsp.softKeys.keyPassword property of ejbca.properties.

The responder is then built and deployed with "ant ocsp-deploy". When the application server is then
started it should just work.

The database that OcspDS points to only have to contain the CertificateData table. This table is 
created automatically by JBoss when it starts.

Error publishing to OCSP database
---------------------------------
If there is an error publishing to the OCSP database, the OCSP responder will be out of sync with the CA.
It is very important to re-synchronize the databases in that case.

In case of failure to publish to the OCSP database the following error message will appear in the server.log:
EXTERNAL OCSP ERROR, publishing is not working

This will be followed by more details of the error.

The log must be monitored to discover such a fault and if such a fault is discovered an alarm should notify 
the operator that he has to fix whatever is wrong and then synchronise the OCSP database with the EJBCA 
database (see 'Synchronise the db of the responder').

Synchronise the db of the responder
-----------------------------------
At the beginning and after failure in publishing to the responder the master database of the
publishers must be synchronised with the CertificateData table of the database of EJBCA.

If there is a single certificate out of sync you can re-sync it by doing a 'Republish' from the admin-GUI.

The following procedure may be used to synchronise the database of EJBCA with the database of the
responder:

1. Prevent any further issuing of new certificates and revocation of old certificates until the
synchronisation is finished. This might be done by simply blocking the port to the adminweb.

2. On the host of ejbca the following commands can be used to make the synchronisation:

mysqladmin -h 'ocspResponder' drop ejbca_db;
mysqladmin -h 'ocspResponder' create ejbca_db;
mysqldump --compress ejbca_db CertificateData | mysql -h 'ocspResponder' ejbca_db;

3. Check that the publishing is working before allowing issuing and revoking.


Running several responders.
--------------------------
In many case it is desirable to have several responders on different computers. This is easily
achieved if it is an mysql database that EJBCA is publishing to (see section "Building and
configuring EJBCA"). All you have to do is to set up the publishing database as a master. Then one
slave data base is created on each computer that should host a responder.
How to do it is described in the mysql documentation. Depending on which which version you are using
please read one of the followings:
http://dev.mysql.com/doc/refman/4.1/en/replication-howto.html
http://dev.mysql.com/doc/refman/5.0/en/replication-howto.html
http://dev.mysql.com/doc/refman/5.1/en/replication-howto.html


Setting up the Unid-Fnr OCSP extension
======================================

If you don't know what a Unid-Fnr mapping is, you are probably not interested in this part.

Configuring the Unid lookup server.
-----------------------------------
The OCSP responder comes with an extension for looking up Unid-Fnr mappings.
To enable the Unid extension you configure the options
ocsp.extensionoid=2.16.578.1.16.3.2
ocsp.extensionclass=org.ejbca.core.protocol.ocsp.OCSPUnidExtension
in ejbca.properties. 

All options are described in ejbca.properties.sample.

There are three options for the Unid extension itself:

- ocsp.uniddatsource: 
This should be set to a datasource configured in JBoss that goes to the correct database.
the database must contain the table according to the (MySQL) definition:
CREATE TABLE UnidFnrMapping(
    unid varchar(250) NOT NULL DEFAULT '',
    fnr varchar(250) NOT NULL DEFAULT '',
    PRIMARY KEY (unid)
);

Example of ocsp.uniddatsource is java:/UnidDS, where UnidDS is configured similarly as EjbcaDS in 
JBOSS_HOME/server/default/deploy/ejbca-ds.xml, but using another database.

- ocsp.unidtrustdir:
All clients that will be allowed to lookup Unid-Fnr mapping must be issued a certificate. 
The issuer of the client certificates must be the same as the issuer of the server certificate for TLS 
communication with the OCSP server (see below).
You should use these parameters (where differing from default) when issuing keystores to the clients:
Batch generation
PKCS#12 files
Extended key usage 'TLS client'
When a certificate has been issued for a lookup client, you must download the certificate from the admin-GUI of the CA
and place it in ocsp.unidtrustdir.
When a new certificate has been added, the EJBCA/OCSP application on the JBoss server must be re-deployed 
(you can do this with the command 'touch ejbca.ear' in JBOSS_HOME/server/default/deploy).

- ocsp.unidcacert:
This is the CA certificate, in PEM format, that signed the certificates in ocsp.unidtrustdir. You can download it in PEM-format from EJBCA.

Configuring TLS on the Unid lookup server.
-----------------------------------------
If you are running the OCSP server integrated with EJBCA you do not have to bother with this, as EJBCA set up TLS for you.

On a stand alone OCSP server you must configure TLS with client authentication. To do this you first need a JKS keystore for 
the key and certificate for the server.
You should use these parameters (where differing from default) when issuing keystores to the TLS servers:
Batch generation
JKS files
Extended key usage 'TLS server'

The Common Name (CN) for a TLS server should be the same as the machines fully qualified DNS name used to call the server. 
For example 'CN=ocsp.primekey.se'.The other DN components you can choose freely.

Once the JKS keystore is issued you can configure TLS on the OCSP server in the same way as on the EJBCA server. 
It is configured in the file JBOSS_HOME/server/default/deploy/jbossweb-tomcat55.sar/server.xml.
The Connectors for port 8442 and 8443 is the TLS configuration.
The keystoreFile and the keystorePass are important to get right.

You must create a new java trusted keystore with the commands:
bin/ejbca.sh ca getrootcert AdminCA1 ca.crt -der
keytool -import -trustcacerts -alias AdminCA1 -keystore cacerts -storepass changeit -file ca.crt

Where AdminCA1 is replaced with the CA name of your CA that signs the TLS certificates.

The cacerts file is then copied to (and replacing the existing) $JAVA_HOME/jre/lib/security/cacerts.

Security of the lookup server.
-----------------------------
the lookup server always checks that eash client is using TLS with client authentication and that the certificate is valid and is one
of the certificates placed in the directory pointed to by 'ocsp.unidtrustdir'. If these conditions are not met, no Fnr is returned.

Logging
-------
The OCSP Unid extension logs using Log4j to the JBoss server.log. The JBoss server log is located in 
JBOSS_HOME/server/default/log/server.log and the logging is configured in JBOSS_HOME/server/default/conf/log4j.xml.
If you for example want to configure so the OCSP Unid extension logging is sent to syslog, you need to know the
class patch of the OCSP Unid extension:
org.ejbca.core.protocol.ocsp.OCSPUnidExtension
and the log level:
INFO, for request logging
ERROR, for error logging

Lookup server client library
----------------------------
There is a client library available. Build it with 'ant ocspclient.jar'. If will create a zip file in ocsp-dist/ocspclient.zip.
You can unpack this zip file on any remote machine and use the API in the class org.ejbca.core.protocol.ocsp.OCSPUnidClient. 
There is also a small command line client you can use for testing ocsp.sh. the class org.ejbca.ui.cli.Ocsp is a good simple example of
how the API can be used.

