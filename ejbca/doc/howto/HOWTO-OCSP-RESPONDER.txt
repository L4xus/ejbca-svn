This file describes how to configure and start the OCSP responder.

Setting up external OCSP responders
===================================

Introduction
------------
You can set up separated OCSP responders in EJBCA. Using this you can isolate the CA from the Internet and still be
able to answer OCSP request. You can set up firewalls so that only outgoing traffic is allowed from the CA, and
nothing to the CA.
Separated OCSP responders is also good when you don't require high-performance clustering for the CA, but you do need
high-performance for the OCSP responders. This should be a usual setup, if the CA only issues certificates once every year
for one million users, this does not put much pressure on the CA, but the OCSP responders can be put under high load continuously.

See the image HOWTO-OCSP-RESPONDER.jpg for an overview of a sample setup.

Building and configuring EJBCA.
-------------------------------
EJBCA should be configured as for any other installation but you must also set all preferences
(ocsp-database.*) of the responder data base in conf/ocsp.properties. 
The responder database is the master database of all the responders, and it is there that EJBCA will 
publish certificates when they are issued or revoked. 
Then EJBCA is built and deployed with the command 'ant deploy', as described in the EJBCA installation guide.

The deploy command sets up a datasource java:/OcspDS in JBoss, if you use another application server 
you must set up this datasource yourself. If should be a datasource that is not involved in transactions
(a no-tx-datasource in JBoss), and has autocommit (should be default).

When EJBCA has been started you have to add a new publisher. As a superuser you add this publisher
on the "Edit Publishers" page in the admin GUI. Use publisher type "Custom Publisher". And these
configurations (if ocsp-datasource.jndi-name=OcspDS):
Class Path:                             org.ejbca.core.model.ca.publisher.ExternalOCSPPublisher
Properties of Custom Publisher:         dataSource java:/OcspDS

All certificate profiles to certificates that should be available to the OCSP responder should
have a reference to this publisher. To configure this you must be a super user.

When all settings above have been done then all created certificates belonging to a certificate
profile that has a the ExternalOCSPPublisher as publisher should be published in the responder
database as well as in the EJBCA database. When a certificate is revoked it will be revoked in
the responder database as well.
If the publishing is not working it is important to notice this and synchronize the databases again, 
see 'Error publishing to OCSP database' below.

Building and configuring the Responder.
---------------------------------------
The responder is configured as EJBCA is configured. Only the preferences ocsp.* and httpsserver.*
and datasource.* and database.* are relevant to the responder but you may keep conf/*.properties
from the EJBCA setup since definitions of other properties does no harm. 
Note that the External OCSP responder itself uses the configuration options database.* and not the ocsp-database.* options.
The ocsp.keys.* preferences (that has no meaning for EJBCA) has also to be configured, 
please read description of these properties in conf/ocsp.properties.sample, conf/database.properties.sample and perhaps 
conf/web.properties.sample (if ssl or different ports should be configured).
ocsp.usecasigningcert should be set to false. If card keys (see below) should be used then the property
'ocspHardTokenClasses' must be set to the corresponding directory of PrimeCard.

All options for the OCSP responders OCSP behavior is set in conf/ocsp.properties. All options are documented in this file.
 
The responder is then built and deployed with:
    ant ocsp-deploy
on the external OCSP responder.

The database that OcspDS in EJBCA points to only have to contain the CertificateData table. This table is 
created automatically by JBoss when it starts on the external OCSP responder.

The keys used to sign the OCSP response could either be stored on a smart card or soft on the file system
of the host or on a PKCS#11 token. It should be one key for each CA.

The certificate profile could be the same for both soft and card and PKCS#11 keys.
Define a new certificate profile and use 'OCSPSIGNER (FIXED)' as template (use selected as template). 
This certificate profile is like a normal end entity profile but with the following key usages:
- Key Usage: Digital Signature
- Extended Key Usage: OCSPSigner
Configure the newly created certificate profile to use the Ocsp publisher defined above.

Note: the responders certificate AND the CA certificate need to be published from the CA to the 
OCSP responder. For the CA you do this by setting the CRL publisher to the OCSP publisher.

You also need to create a new End Entity Profile to use the new Certificate Profile.

You should then create a user for each CA using this certificate profile.
Use the token type "p12" or "jks" for soft keys and "user generated" for pkcs#11 and card keys.

When a soft key has been created it should be stored in the directory defined by the ocsp.keys.dir property of ejbca.properties.
The password for each key must be the same and should be equal to the ocsp.keys.keyPassword property of ejbca.properties.

A PKCS#11 certificate is created like this:
ejbcaClientToolBox.sh PKCS11HSMKeyTool generate ./sunpkcs11.cfg 2048 ocsp
ejbcaClientToolBox.sh PKCS11HSMKeyTool certreq /opt/nfast/toolkits/pkcs11/libcknfast.so i1 ocsp
The certificate for the key is then fetched from the enrollment page of EJBCA with the certificate request that was stored in the ocsp.pem
when the "certreq" command was executed. You then have to manually create a certificate chain file. The OCSP signer certificate should be
first in this file and the root CA certificate should be last.
If the chain file is called chain.pem then the certificate chain is installed in the HSM like this:
ejbcaClientToolBox.sh PKCS11HSMKeyTool installcert /opt/nfast/toolkits/pkcs11/libcknfast.so i1 chain.pem
You must then define all ocsp.p11.* properties.
Please read http://ejbca.org/manual.html#Generic%20PKCS#11%20provider%20(EJBCA%203.5) for information on the configuration file for the generate command.
Do also try to find your HSM in http://ejbca.org/manual.html#Hardware%20Security%20Modules%20(HSM). Please note the only PKCS#11 HSMs are supported.


Card keys are created on the card with the "create CA Token on card" tool see the HOWTO-CATokenOnCard.txt of PrimeCard.
Select the choice for one authentication code for all keys on the card. If you want several OCSP responders with same
keys then you may create several card with same keys. But note that no backup card is needed. If a card is lost or broken then
simply make another one with new keys and revoke the old signing certificates.
The certificates for the the keys are then fetched from the enrollment page of EJBCA with certificate request. There should be one
certificate request for each key. 
'changePIN.sh createCertReqs' will create the requests, one for each key. Choose 'pem' format for
the certificates and then just store these files in the 'ocsp.keys.dir' directory.
The property 'ocsp.keys.cardPassword' should be set to the password of the card.

Re-start the application server for the external OCSP responder.
When the application server is started it should just work.

The database connection settings on the external OCSP responder is configured and deployed in JBoss in the file 
JBOSS_HOME/server/default/deploy/ejbca-ds.xml.


Error publishing to OCSP database
---------------------------------
If there is an error publishing to the OCSP database, the OCSP responder will be out of sync with the CA.
It is very important to re-synchronize the databases in that case.

In case of failure to publish to the OCSP database the following error message will appear in the server.log:
EXTERNAL OCSP ERROR, publishing is not working

This will be followed by more details of the error.

The log must be monitored to discover such a fault and if such a fault is discovered an alarm should notify 
the operator that he has to fix whatever is wrong and then synchronise the OCSP database with the EJBCA 
database (see 'Synchronise the db of the responder').

Synchronise the db of the responder
-----------------------------------
At the beginning and after failure in publishing to the responder the master database of the
publishers must be synchronised with the CertificateData table of the database of EJBCA.

If there is a single certificate out of sync you can re-sync it by doing a 'Republish' from the admin-GUI.

The following procedure may be used to synchronise the database of EJBCA with the database of the
responder:

1. Prevent any further issuing of new certificates and revocation of old certificates until the
synchronisation is finished. This might be done by simply blocking the port to the adminweb.

2. On the host of ejbca the following commands can be used to make the synchronisation:

Run on the OCSP responder machine (as root user in mysql):
mysqladmin drop ejbca_db;
mysqladmin create ejbca_db;
This drops and re-created the ejbca database to clean it. Replace ejbca_db with the database name of your database.

Run on the CA server:
mysqldump -u ejbca -p --compress ejbca_db CertificateData > CertificateData.dat
mysqldump -u ejbca -p --compress ejbca_db TableProtectData > TableProtectData.dat
cat CertificateData.dat | mysql -h ocspresponder ejbca_db
cat TableProtectData.dat | mysql -h ocspresponder ejbca_db

Replace your the username ejbca with your username.
ocspResponder is the external OCSP responder host.

Note, that this can usually not be done from a windows machine, to a Linux machine, because windows is not case sensitive.

3. Check that the publishing is working before allowing issuing and revoking.


Running several responders.
--------------------------
In many case it is desirable to have several responders on different computers. This is easily
achieved if it is an mysql database that EJBCA is publishing to (see section "Building and
configuring EJBCA"). All you have to do is to set up the publishing database as a master. Then one
slave data base is created on each computer that should host a responder.
How to do it is described in the mysql documentation. Depending on which which version you are using
please read one of the followings:
http://dev.mysql.com/doc/refman/4.1/en/replication-howto.html
http://dev.mysql.com/doc/refman/5.0/en/replication-howto.html
http://dev.mysql.com/doc/refman/5.1/en/replication-howto.html


Setting up the Unid-Fnr OCSP extension
======================================

If you don't know what a Unid-Fnr mapping is, you are probably not interested in this part.

Configuring the Unid lookup server.
-----------------------------------
The OCSP responder comes with an extension for looking up Unid-Fnr mappings.
To enable the Unid extension you configure the options
ocsp.extensionoid=2.16.578.1.16.3.2
ocsp.extensionclass=org.ejbca.core.protocol.ocsp.OCSPUnidExtension
in ejbca.properties. 

All options are described in ejbca.properties.sample.

There are three options for the Unid extension itself:

- ocsp.uniddatsource: 
This should be set to a datasource configured in JBoss that goes to the correct database.
the database must contain the table according to the (MySQL) definition:
CREATE TABLE UnidFnrMapping(
    unid varchar(250) NOT NULL DEFAULT '',
    fnr varchar(250) NOT NULL DEFAULT '',
    PRIMARY KEY (unid)
);

Example of ocsp.uniddatsource is java:/UnidDS, where UnidDS is configured similarly as EjbcaDS in 
JBOSS_HOME/server/default/deploy/ejbca-ds.xml, but using another database.

- ocsp.unidtrustdir:
All clients that will be allowed to lookup Unid-Fnr mapping must be issued a certificate. 
The issuer of the client certificates must be the same as the issuer of the server certificate for TLS 
communication with the OCSP server (see below).
You should use these parameters (where differing from default) when issuing keystores to the clients:
Batch generation
PKCS#12 files
Extended key usage 'TLS client'
When a certificate has been issued for a lookup client, you must download the certificate from the admin-GUI of the CA
and place it in ocsp.unidtrustdir.
When a new certificate has been added, the EJBCA/OCSP application on the JBoss server must be re-deployed 
(you can do this with the command 'touch ejbca.ear' in JBOSS_HOME/server/default/deploy).

- ocsp.unidcacert:
This is the CA certificate, in PEM format, that signed the certificates in ocsp.unidtrustdir. You can download it in PEM-format from EJBCA.

Configuring TLS on the Unid lookup server.
-----------------------------------------
If you are running the OCSP server integrated with EJBCA you do not have to bother with this, as EJBCA set up TLS for you.

On a stand alone OCSP server you must configure TLS with client authentication. To do this you first need a JKS keystore for 
the key and certificate for the server.
You should use these parameters (where differing from default) when issuing keystores to the TLS servers:
Batch generation
JKS files
Key usage: Digital Signature, Key Encipherment
Extended key usage: 'TLS server'

The Common Name (CN) for a TLS server should be the same as the machines fully qualified DNS name used to call the server. 
For example 'CN=ocsp.primekey.se'.The other DN components you can choose freely.

Once the JKS keystore is issued you can configure TLS on the OCSP server in the same way as on the EJBCA server. 
It is configured in the file JBOSS_HOME/server/default/deploy/jbossweb-tomcat55.sar/server.xml.
The Connectors for port 8442 and 8443 is the TLS configuration.
The keystoreFile and the keystorePass are important to get right.
It is easiest if you put the keystore for the TLS server in the file p12/tomcat.jks on the external OCSP responder.
When doing this it should be deployed correctly when using 'ant ocsp-deploy', and you don't have to change the server.xml file which is 
over-written by 'ant ocsp-deploy'.

You must create a new java trusted keystore with the commands:
bin/ejbca.sh ca getrootcert AdminCA1 ca.crt -der
keytool -import -trustcacerts -alias AdminCA1 -keystore cacerts -storepass changeit -file ca.crt

Where AdminCA1 is replaced with the CA name of your CA that signs the TLS certificates.

The cacerts file is then copied to (and replacing the existing) $JAVA_HOME/jre/lib/security/cacerts.

Security of the lookup server.
-----------------------------
the lookup server always checks that eash client is using TLS with client authentication and that the certificate is valid and is one
of the certificates placed in the directory pointed to by 'ocsp.unidtrustdir'. If these conditions are not met, no Fnr is returned.

Lookup server client library
----------------------------
See Howto-Ocsp-Unid-client.txt


Using database integrity protection
===================================
Enable the basic support for database protection as described in HOWTO-logsigning.txt 
(you don't have to enable log signing though).
As a property in the ExternalOCSPPublisher you add the property:
protect true

Thats all there is to it. When EJBCA publishes certificate entrys to the OCSP responder database, it will also write 
antries in the TableProtectData table. 
If protection is enabled also on the External OCSP responder, it will log errors
PROTECT ERROR
if verification fails when it answers OCSP queries (this will slow it down a little bit).

If protection is not enabled on the External OCSP responder, it will not verify the entries when answering OCSP queries, 
a remote batch job can be used to verify the database integrity periodically instead.


Audit and Account Logging
=========================

There are three types of logs that can be generated by the OCSP responder.
1. The OCSP service logs using Log4j to the JBoss server.log. The JBoss server log is located in 
JBOSS_HOME/server/default/log/server.log and the logging is configured in JBOSS_HOME/server/default/conf/jboss-log4j.xml.

2. The OCSP transaction log can be used to log various information about ocsp-requests.
Audit logging logs summary lines for all OCSP request/responses, which can be used for charging clients if you are running a commercial OCSP service.
To turn on transaction logs logs, copy ocsp.properties.sample to ocsp.properties and change
#ocsp.trx-log = false
to
ocsp.trx-log = true
then uncomment the other lines below that start with ocsp.trx-log.
Change the ocsp.trx-log-log-date line if you want to change how the time recorded in logging should be output.
The value should be on the same format as for javas DateFormat, information on valid configurations can be found at:http://javatechniques.com/blog/dateformat-and-simpledateformat-examples/
ocsp.trx-log-log-date = yyyy-MM-dd:HH:mm:ss
ocsp.trx-log-pattern is a pattern for use with ocsp.audit-order to replace constants with values during logging
For most purposes you will not need to change this string. 
Use ocsp.trx-log-order to specify what information should be logged and in what order. You can also configure what characters you want in between.
If you want your log to display all of the values available you only have to uncomment it. 

Available values for the transaction log are:
LOG_ID, An integer identifying that starts from 1 and is increased for every received request.
SESSION_ID A random 32 Byte long String generated when the OCSP-responder is started
STATUS, The status of the OCSP-Request. SUCCESSFUL = 0;MALFORMED_REQUEST = 1;INTERNAL_ERROR = 2;
										TRY_LATER = 3;SIG_REQUIRED = 5;UNAUTHORIZED = 6;
CLIENT_IP, IP of the client making the request
REQ_NAME, The Common Name (CN) of the client making the request
SIGN_ISSUER_NAME_DN, DN of the issuer of the certificate used to sign the request.
SIGN_SUBJECT_NAME, Subject Name of the certificate used to sign the request.
SIGN_SERIAL_NO, Certificate serial number of the certificate used to sign the request.
NUM_CERT_ID, The number of certificates to check revocation status for
ISSUER_NAME_DN, The subject DN of the issuer of a requested certificate
ISSUER_NAME_HASH, MD5 hash of the issuer DN
ISSUER_KEY, The public key of the issuer of a requested certificate
DIGEST_ALGOR, Algorithm used by requested certificate to hash issuer key and issuer name
SERIAL_NO, Serial number of the a requested certificate.
CERT_STATUS, The requested certificate revocation status.

3. The audit log logs entire requests and responses. This can be useful when requests and responses are signed because the information can be used 
to verify requests and responses afterwards.
Audit logging is configured in the same way as transaction logging. Valid values for account loggin are:
LOG_ID, An integer identifying that starts from 1 and is increased for every received request.
SESSION_ID A random 32 Byte long String generated when the OCSP-responder is started
OCSPREQUEST, The byte[] ocsp-request that came with the http-request
OCSPRESPONSE, The byte[] ocsp-response that was included in the http-response

Note that LOG_ID are of the same value for any request. This means they can be cross referenced.
You can retrieve information from the audit log and verify that the information is valid by using the Account Log.

Configuring output files for OCSP logging
-----------------------------------------

For JBoss you can configure JBOSS_HOME/server/default/conf/jboss-log4j.xml to put the transaction and audit logs in separate files.

-----
   <category name="org.ejbca.core.protocol.ocsp.TransactionLogger">
         <priority value="DEBUG"/>
         <appender-ref ref="OCSPTRANSACTION"/>
   </category>
   <category name="org.ejbca.core.protocol.ocsp.AuditLogger">
         <priority value="DEBUG"/>
         <appender-ref ref="OCSPAUDIT"/>
   </category>
-----
Configure Appenders similar to the existing FILE Appender with names OCSPACCOUNT and OCSPAUDIT.

For other application servers you can configure conf/log4j.properties and configure to use that configuration file in conf/ejbca.properties.
