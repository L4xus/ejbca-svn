
CONFIGURING Weblogic
====================

Note: EJBCA should work fine with Weblogic 8.x/9.x.
Running on weblogic has some limited functionality compared to JBoss though:
 - The createCRLService, which runs as a JBoss mBean and does not work (there is now an internal service that works even better though)
 - The CMP tcp listener, which runs as a JBoss MBean and does not work
 - Web service interface (includes xkms), which uses JaxWS and does not work

Note: After installing Weblogic, don't forget to install the "Unlimited Strenth Crypto" jce files
in Weblogics jre and jrockit. It's the same way as for a regular installation, see User's Guide.

1. Set the environment variable APPSRV_HOME pointing to for example /bea/weblogic92
(weblogic.jar is located under APPSRV_HOME/server/lib).

2. Edit conf/*.properties, it's important to at least set up the database parameters.

Edit conf/ejbca.properties and change/set some values:
appserver.type=weblogic
logging.log4j.config=basic

Edit conf/database.properties and edit/set some values that are specific for Weblogic:
datasource.jndi-name-prefix= 
weblogic-oracle-columntype=@weblogic.dbms-column-type Blob

Edit conf/web.properties and change/set some values:
httpserver.pubhttp=7001
httpserver.privhttps=7002
ejbcaws.enabled=false

Default http port of Weblogic is 7001, default of EJBCA on JBoss is 8080.
Default SSL port of Weblogic is 7002, default of EJBCA on JBoss is 8443.
Disabling ejbcaws must be done until we have fixed JaxWS configuration for weblogic.

Edit conf/xkms.properties and change/set some values:
xkms.enabled=false

Disabling xkms must be done until we have fixed JaxWS configuration for weblogic.

If you had issued an 'ant' command before, it is now important to do 'ant clean' before building again.

Build ejbca.ear (ejbca/dist/ejbca.ear) with 'ant'.

3. Edit 'jndi.properties' in the directory 'ejbca/bin'and modify the principal and credentials 
   according to you weblogic domain's setting (same as the user name/password to login weblogic console).
   The default in the EJBCA installation is system/weblogic. Every time you issue a 'ant clean' command, you must re-do this step.

4. Create EJBCA domain with weblogic configuration wizard, select Basic weblogic server domain, Express,
   Development mode, sun's JDK at bea's home directory, and remember the admin username/password.
   - Wls 9.2 will create a default 'mydomain' for you the first time it is started.
   - Access the Weblogic management console at: http://127.0.0.1:7001/console/
   - You can set WLS_USER and WLS_PW environment variables so you don't have to enter username/pwd when starting Weblogic.
   
5. Create EjbcaPool and EjbcaDS in Weblogic, the JNDI name should be the one specified in ejbca.properties.
Create tables in the database configured for EjbcaPool and EjbcaDS in Weblogic.
- You can do an 'ant bootstrap' to JBoss if you want JBoss to create the tables for you.
- On oracle XE you can run for example: sqlplus oracle@XE @create-tables-ejbca3-oracle.sql
  select table_name from user_tables;
- In Weblogic9, you only create a 'Data Source', no Pools exists any longer.
- Don't forget to apply a Target for your DataSource.

See the file create-tables-ejbca3-oracle.sql for table definitions, or just run /doc/howto/create-tables-ejbca3-oracle.sql for Oracle.

6.Create a new java mail session for user notification in UserAdminSessionBean. In Weblogic, the JNDI name should be "EjbcaMail".
  key in the properties:
  mail.store.protocol=pop3
  mail.transport.protocol=smtp
  mail.user=icejean
  mail.pop3.host=pop.21cn.com
  mail.smtp.host=smtp.21cn.com
  mail.smtp.auth=false
  mail.from=icejean@21cn.com
  mail.debug=false
  
7. Deploy the ejbca.ear file in weblogic, it should deploy straight away without errors.

8. Run 'ant install' to do the installation. Everything should work here with no errors. 
   If you get errors these must be resolved before we can move on.
   The command 'ant install' is only run once, when the CA is first installed. It creates lots of things in the database, and can not be run again 
   (it will give an error if you try).

9. Configure SSL in Weblogic:
a) Copy %JAVA_HOME%/jre/lib/security/cacerts to %BEA_HOME%/jre/lib/security, so that Weblogic can trust the initial CA installed 
when doing 'ant install'.
You can create cacerts file with 'sudo rm $JAVA_HOME/jre/lib/security/cacerts' and then 'sudo ant javatruststore'.
Type 'ant -p' to get a description how you can run 'ant javatruststore' with arguments to point to a specific keystore etc.
You can get the CA certificate with 'bin/ejbca.sh ca getrootcert cert.pem'.
b) Configure weblogic server for SSL.
   Server->configuration->keystore&ssl, click "Change", select "Custom Identity and Java Standard Trust"
   (in weblogic 9 it is under 'Servers->Myserver->Configuration->Keystores)
     Custom Identity Keystore: path to tomcat.jks generated while "ant install (ejbca/p12/tomcat.jks)",
     Private Key Alias: localhost (httpsserver.hostname in conf/web.properties).
     Passphrase: serverpwd (httpsserver.password in conf/web.properties).   
   (in weblogic 9 it is under 'Servers->Myserver->Configuration->SSL)
     In weblogic 9 you must configure private key for identity here. The alias is what you configures as httpsserver.hostname in conf/web.properties
     and password is what you configures as httpsserver.password in conf/web.properties.
     
   server->configuration->keystore&ssl->advanced options->Server Attributes->Two Way Client Cert Behavior:
   (in weblogic 9 under 'Servers->Myserver->Configuration->SSL->Advanced)
     Client Certs Requested And Enforced

   server->configuration->general, check "SSL Listen Port Enabled", note that the port should be same as httpserver.privhttps in ejbca.properties.

This should make the admin-GUI work, note to install the  Unlimited Strength Jurisdiction Policy Files from java.sun.com 
for both sun's JDK and BEA's JDK first before installation.

If installing with Oracle, perhaps you need to replace jdbc driver at weblogic_home\server\lib, weblogic_home\server\ext\jdbc\oracle\920, 10g 
all to 10.1.0.2, in my case which is Oracle 9.2.0.
I have used Beas Oracle driver in Weblogic 9.2 with Oracle XE 10, and that works fine. 
Your mileage may vary, some JDBC drivers were known to be buggy earlier, but it seems to have improved.


TransactionTimeoutException in Weblogic
---------------------------------------
If you are running on a not-so-fast machine, you may experience TransationTimeoutException during 'ant install'.
This is due to that it takes a long time for RSA key generation.

To configure the transaction timeout to a larger value in weblogic:
1. logon to Weblogic Console with IE, for example, http://localhost:7001/console
2. click "Services" at the left "Domain Structure" navigation frame to expand the service list.
3. click "JTA" to display the JTA property setting page at right content frame.
4. update the first property "Timeout Seconds" to a ratinal value that is enough to execute EJBCA installation
   (about 100s to finish the whole installation).


Glassfish
=========

Currently EJBCA works with the MySQL 5.0 database on Glassfish.

- Set the envorinment variable APPSRV_HOME to the directory where Glassfish is installed. For example APPSRV_HOME=/home/sun/glassfish.
  The variable must be available when working with EJBCA. 
  
MySQL:
- Create a database and a database user with privileges.

- Create the database tables using one of the scripts in doc/howto/create-tables-xxx. Choose the correct file for your database.
    Example for MySQL:
    mysql -u ejbca -p ejbca
    \. create-tables-ejbca3-mysql.sql

Derby:
- Start the database: asadmin start-database
- Create a database and a database user with privileges.
  > export DERBY_INSTALL=/home/sun/glassfish/javadb
  > cd /home/sun/glassfish/bin
  > ../javadb/frameworks/NetworkServer/bin/ij.ksh

  ij> connect 'jdbc:derby://localhost:1527/ejbca;create=true';
  ij> run '/home/sun/ejbca/doc/howto/create-tables-ejbca3-derby.sql';

- Start the application server: asadmin start-domain

- Do yourself a favor and configure this in the JVM settings of Glassfish v1 (default in v2):
    -XX:MaxPermSize=192m
    Restart Glassfish
  
- Create a connection pool for your database. In the admin console this is done in Resources->JDBC->Connection Pools.

    When adding a MySQL Pool use values: Name=MysqlPool, Type=javax.sql.DataSource, Vendor=mysql.
    Properties: DatabaseName=ejbca, ServerName=127.0.0.1, User=ejbca, Password=ejbca
    For MySQL you must copy the jar mysql-connector-java-5.0.4-bin.jar to $APPSRV_HOME/lib (use your known-to-be-good version of the jar)
    
    When adding a Derby Pool use values: Name=EjbcaPool, Type=javax.sql.DataSource, Vendor=JavaDB.
    Properties: user=APP, password=APP, DatabaseName=ejbca 

- Create a datasource called jdbc/EjbcaDS, in the admin console this is done in Resources->JDBC->JDBC Resources.
    Use the connection pool you just created.

- Configure ejbca: 
    in conf/ejbca.properties you should at least set appserver.type, appserver.home and logging.log4j.config
    in conf/database.properties you should at least set datasource.jndi-name-prefix, and the database settings for your chosen database.
    in conf/web.properties you should set 'web.jsfimpl=sunri'
    in conf/web.properties you should set 'ejbcaws.enabled=false', this must be done until we have fixed JaxWS configuration for glassfish.
    in conf/xkms.properties you should set 'xkms.enabled=false', this must be done until we have fixed JaxWS configuration for glassfish.
    
- Build ejbca:
    ant
    
- Deploy ejbca.ear using: 
    ./asadmin deploy ../../ejbca/dist/ejbca.ear
    The relative path to ejbca.ear depends on where you installed ejbca and glassfish.
    
- Install ejbca:
    ant install
    
 - Configure SSL in Glassfish
    Configuration->HTTP Service->HTTP Listeners->http-listener-2
       Client Authentication: Enabled
       Certificate Nickname: s1as (get alias name by running 'keytool -list -v -keystore $APPSRV_HOME/domains/domain1/config/keystore.jks')
       SSL3: Enabled
       Ciphers Suite: All
    Add CA certificate to cacerts file:
       cd $EJBCA_HOME
       bin/ejbca.sh ca getrootcert AdminCA1 ca.der -der
       keytool -import -keystore $APPSRV_HOME/domains/domain1/config/cacerts.jks -file $EJBCA_HOME/ca.der
       password is 'changeit'
    Restart server
    (you would probably want to install your own server certificate from $EJBCA_HOME/p12/tomcat.jks instead of the 
     default Glassfish cert, but I havent figured out how to do that...)
    
 - Access protected EJBCA pages
    Import $EJBCA_HOME/p12/superadmin.p12 in your browser and go to url:
      https://127.0.0.1:8181/ejbca/
    You can now click "Administration" to get to the admin-GUI.
    
 
    
    

Creating deployment descriptors for Glassfish:
----------------------------------------------
Whan a new release of EJBCA should be running on glassfish, the deployment descriptors may have to be updated.
Uncomment the section in compile.xmli to generate sun ejb deployment descriptors. 
Compare the generated one with src/deploy/sun/sun-ejb-jar.xml, and merge if needed.

* sun-web.xml files must be updated with any new references that exist in the web.xml files.

Of particular interest on Glassfish is that in order for web-apps to call EJBs, the webapp must define a datasource ref,
both in web.xml and sun-web.xml.
web.xml
<resource-ref >
   <res-ref-name>jdbc/EjbcaDS</res-ref-name>
   <res-type>javax.sql.DataSource</res-type>
   <res-auth>Container</res-auth>
</resource-ref>

sun-web.xml
<resource-ref>
    <res-ref-name>jdbc/EjbcaDS</res-ref-name>
    <jndi-name>jdbc/EjbcaDS</jndi-name>
</resource-ref>

* sun-ejb-jar.xml must be updated with new beans.

* sun-cmp-mapping.xml must be updated with database changes.

* database schema must be updated.
Example for MySQL:
CLASSPATH=../lib/mysql-connector-java-5.0.4-bin.jar:$CLASSPATH 
./capture-schema -username ejbca -password ejbca -dburl jdbc:mysql://127.0.0.1/ejbca -driver com.mysql.jdbc.Driver -out ejbca-ejb

Example for Derby:
CLASSPATH=../lib/derbyclient.jar:$CLASSPATH 
./capture-schema -username ejbca -password ejbca -dburl jdbc:derby://127.0.0.1/ejbca -driver org.apache.derby.jdbc.ClientDriver -out ejbca-ejb

Copy the generated ejbca-ejb.dbcschema file to src/deploy/sun/schema/<database>

Creating deployment descriptors for Weblogic 9:
----------------------------------------------

XDoclet can only make descriptors for Weblogic 8.x, not 9.x.
In the generated tmp/bin/dd/META-INF/weblogic-cmp-rdbms-jar.xml, remove the DTD line and replace:
  <weblogic-rdbms-jar>
with:
  <weblogic-rdbms-jar xmlns="http://www.bea.com/ns/weblogic/90"
                    xmlns:j2ee="http://java.sun.com/xml/ns/j2ee"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://www.bea.com/ns/weblogic/90
                                        http://www.bea.com/ns/weblogic/90/weblogic-rdbms20-persistence.xsd">

After this you remove all sections:
  <weblogic-query>
  ...
  </weblogic-query>

Last you remove the options in the end:
   <order-database-operations>True</order-database-operations>
   <enable-batch-operations>True</enable-batch-operations>
   <create-default-dbms-tables>Disabled</create-default-dbms-tables>

And put in the end instead:
   <database-type>Oracle</database-type>

Voila. Now you have a new file you can put in src/deploy/weblogic.

JBOSS
=====

JBoss commonly have problems with class loading if several applications are run in one instance of JBoss.
This will typically manifest itself as ClassCast-, IllegalAccess- or VerifyError Exceptions. 
The reason is usually that mora than one application is using an external jar file, for example commons-fileupload.jar
or ldap.jar, possibly using different versions as well.

These links describe how to configure jboss-app.xml, etc and also describe how
JBoss classloading works.

http://wiki.jboss.org/wiki/Wiki.jsp?page=ClassLoadingConfiguration
http://wiki.jboss.org/wiki/Wiki.jsp?page=JBossClassLoadingUseCases

