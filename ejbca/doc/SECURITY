
EJBCA SECURITY
==============

NOTE!
Security is CRITICAL for a CA. Protection of the CAs private key is esential,
 since compromise of the CAs private key will let anyone issue false
 certificates, which can be used to gain access to systems relying on the CA for
 authentication and other security services.
After realising this, please read on and take a pragmatic approach to security
 suitable for your policy, application and environment.

Setting up SSL
--------------
To set upp SSL communcation for all HTTP-traffic to the server 
follow the instructions in README for installing EJBCA, this will set up HTTPS 
for the admin-GUI.
This will set up an SSL port open for the public at 8442 and an SSL port
which require client certificate to access the administraton pages at 8443.

Configuring for security
------------------------
The easiest way to keep the installation secure is to block all JBOSS ports
 (1099, 1476, 4444, 8082, 8083) from the outside and only allow traffic to
 Tomcat ports (8442 and 8443).
This is because the public end-user actions can be performed through the public
 servlets, while administration tasks are performed directly on the beans.

See 'ejbcafirewall.sh' for an example how to configure an Iptables firewall in
Linux for protecting EJBCA running on JBoss.

See www.jboss.org for a list of ports used in JBOSS, for information about
 security in JBOSS/EJB and for how to set up SSL with JBOSS.
See http://www.javaworld.com/javaworld/jw-08-2001/jw-0831-jaas_p.html for more
 examples about setting up role-permissions.

File permission
---------------
The application server should be run as a special user. Files should be protected 
so the ONLY the user running the application server can access them.

If PKCS12 files are generated for users, the subdirectory ('p12') where
they are stored and the generated files should be protected in the same way.

