<?xml version="1.0"?>
<document>
  <properties>
    <title>User guide</title>
  </properties>
<body>

<section name="About">
<p>
EJBCA is a fully functional Certificate Authority built in Java.
Based on J2EE technology it constitutes a robust, high
performance and component based CA. Both flexible and platform independent,
EJBCA can be used standalone or integrated in any J2EE application.
</p><p>
The EJBCA Homepage can be found at http://ejbca.sourceforge.net/.
Information about contacting the EJBCA team, contributing to
EJBCA, etc can be found through the Homepage.
</p><p>
More documentation can also be found on the homepage and on the documentation site http://docs.primekey.se/.
</p><p>
EJBCA is completely written in Java and should as such run on any
platform where a J2EE server runs. Development and testing is
performed on Linux and Windows platforms.
</p></section>

<section name="Security">
<p>
Security is discussed below in the chapter about configuration
and in <a href="security.html">Security</a>.
</p><p>
Please take a minute to thorougly consider the security
implications and make sure you know what you are doing when you are setting
up a CA.
</p><p>
If running on Linux, you should consider using the sample
firewall script provided in 'ejbcafirewall.sh'. If running on Windows, a
similar aproach should be taken with firewall software/hardware.
</p></section>

<section name="Upgrade">
<p>
See doc/RELEASE_NOTES and UPGRADE for information about upgrading from an 
earlier version of EJBCA.
</p></section>

<section name="Quick start guide">

<subsection name="Prerequisites">
<p>
Note: EJBCA makes use of strong crypto and keystore passwords longer than 7 characters.
For this to work you must install the 'Unlimited Strength Jurisdiction Policy Files' for JDK.
The policy files can be found at the same place as the JDK download at java.sun.com. 
Further information on this can be found in the Sun documentation on the JCE.
</p><p>
Needed to build and run are:
<ul>
<li>JDK 1.4.x or 1.5.x</li>
<li>JBOSS >3.2.6 or 4.0.x (latest tested verison is JBoss 4.0.2)</li>
<li>Ant 1.6.x to build (http://jakarta.apache.org/ant/)</li>
</ul>
</p><p>
Set the environment variable JBOSS_HOME to the directory where
JBoss's root is
 (/jboss-version). This is done so the deploy script will
 know where files are to be copied, they are copied to the
 directory $JBOSS_HOME/server/default/deploy.
 </p><p>
 Windows/Unix: 
 When we describe command line commands below we use
 unix notation, e.g. 'ejbca.sh' for the executable command files.
 The same command files are available for windows as cmd-files,
 e.g. 'ejbca.cmd.'
</p></subsection>

<subsection name="Configure">
<p>
If you are only testing EJBCA at this stage and is not setting up a production environment, you can skip this step.
</p><p>
Now when everything is prepared, there are a few things to
configure before starting JBOSS and running everything in a production environment.

</p><p>
In a production environment you should use something like the following structure:
<ol>
<li>Go through the install process creating an AdminCA. Use a simple DN. 
This CA is only used to issue the initial superadmin certificate. Not published in LDAP.</li>
<li>Once installed, create all your REAL CAs using the admin-GUI. Now you can use the certificate 
profiles etc that you like. These certificates can be published in LDAP.
See HOWTO-multiplecas.txt for a detailed configuration guide.</li>
</ol>
</p><p>
In a production environment you should use something else than the default Hypersonic database that comes 
with JBoss for the reasons:
<ol>
<li>Hypersonic database is in-memory, which means that over time it will consume more memory. If a large
numer of certificates is issued, it will become an issue after a while.</li>
<li>Hypersonic does not support full SQL, in particular ALTER statements. When a new version of EJBCA is 
released we can not create scripts that updates the database if some tables changed. This will make 
upgrades much much harder.</li>
</ol>
</p></subsection>

<subsection name="Install">
<p>
Note that the installation must be done with a user with privileges to write to JBOSS_HOME and subdirs. 
</p><p>
1) Set the environment variable JBOSS_HOME to where your JBoss is installed,
example /opt/jboss-4.0.2.
</p><p>
2) Copy ejbca.properties.sample to ejbca.properties and customize if needed.
The default values works fine for a test installaton.
</p><p>
<ul>
<li>Customize the CA properties if you need to do so.
For production use you need to do this, don't forget to edit
passwords to be secure and secret. Keep ejbca.properties as secret as possible.
DO NOT forget the passwords, if you need to re-install the software sometime.</li>
<li>Customize the database if needed but easiest thing is to keep the default as it is,
it will use the JBoss embedded HSQLDB and everything will be easier for you.
For production use you should use a real database instead of the embedded one.</li>
</ul>
</p><p>
3) Open a console (terminal) and start JBoss.
You can start JBoss with 'ant j2ee:run' from EJBCA_HOME
or the normal command 'run.sh/cmd' from JBOSS_HOME/bin.
</p><p>
4) Open a console and type 'ant bootstrap'
it will compile, jar, war, ear everything and deploy it to JBoss. You should see JBoss
picking up all the changes and deploying the ear without errors.
</p><p>
5) Type 'ant install' it will generate all certificates, keys, etc needed to run with an initial CA.
You will find admin keys in ${ejbca.home}/p12. (do not delete those files!)
<ul>
<li>tomcat.jks is for the servlet container (don't bother with it)</li>
<li>superadmin.p12 should be imported in your browser, that's your administration certificate.</li>
</ul>
</p><p>
You will need administrative privileges (e.g. root) for the CA-certificate to be installed
in Javas trust-keystore ($JAVA_HOME/jre/lib/security/cacerts, default pwd 'changeit').
If you don't have root permission now, you can do it manually later after step 9. It's important so don't forget!
</p><p>
6) Stop JBoss (ctrl+c or whatever)
</p><p>
7) type 'ant deploy', this will deploy everything again and configure the servlet
container with the keystore file (this is why we needed to stop the container).
If you alternative want to use jbossspecific service for automatic creation of the CRL:s you should use
'ant deploywithjbossservices' instead.
</p><p>
8) Import the certificate from EJBCA_HOME/p12/superadmin.p12 in your web browser. 
This is the super administrators certificate used to access the admin GUI. 
Other administrators with specific privileges can be created later on.
</p><p>
9) Start JBoss again and go to https://localhost:8443/ejbca/ to access the admin-GUI, 
or http://localhost:8080/ejbca for the public pages.
</p><p>
If you did not have root permission and get an error during installation step 5, you can 
install the root certificate afterwards with the following commands, WITH the right permissions:
</p>
<source>
bin/ejbca.sh ca getrootcert AdminCA1 ca.crt -der
keytool -import -trustcacerts -alias AdminCA1 -keystore $JAVA_HOME/jre/lib/security/cacerts -storepass changeit -file ca.crt
</source>
<p>
where AdminCA1 is the CA name as configured in ejbca.properties (default is AdminCA1).
You must stop and start JBoss after doing this.
</p></subsection>

<subsection name="Running optional tests">
<p>
If you want to run a thorough test of your new CA, run the automated tests with 'ant test:run'.
To run the tests you must copy the file lib/ext/junti-1.5.8 to ANT_HOME/lib.
</p><p>
NOTE: After running tests with 'ant test:run', you might
consider deleting the database since some leftovers are left in the database.
The tests will create and revoke some test certificates, so afterwards your CRLs will be populated with a few entries.
'ant test:run' should not be run on a production system, only
to test the installation.
</p><p>
NOTE! Don't forget to configure JBoss for security! See
<a href="security.html">security</a>.
Security is CRITICAL for a CA.
</p></subsection>
</section>

<section name="After the installation">
<subsection name="Administrating EJBCA">
<p>
You can administrate EJBCA using a web browser and the admin-GUI, this is the easiest way.
</p><p>
You can also use the command line interface (cli) which is called by 'bin/ejbca.sh'. 
If you call ejbca.sh you get a list of available commands, and you can get help for all commands by calling
them without arguments, i.e:
</p>
<source>
bin/ejbca.sh ca
bin/ejbca.sh ra adduser
etc etc
</source>
</subsection>
<subsection name="Creating more CAs">
<p>
After installation, that creates a default admin CA
you can create more CAs using the admin GUI.
</p><p>
Your CAs can be either root CAs, subordinate CAs to another CA in EJBCA 
or subordinate CAs to an external CA. The initial admin CA is a RootCA.
</p><p>
You can also use the command line interface (cli) 
'bin/ejbca.sh ca init' to create new CAs, although a better idea is to do it from the Admin GUI.
Ex: 'bin/ejbca.sh ca init TestRoot "C=SE,O=PrimeKey,CN=EJBCA" 2048 365 2.5.29.32.0' 
will create a root CA with the DN 'C=SE,O=PrimeKey,CN=EJBCA'. The
keylength is
 2048 bit (RSA) and the validity of the root certificate is 365
 days. Quote the DN  so it is treated as one argument.
</p><p>
PKIX requires that a CRL always is available even if it is
empty. When creating a new CA the CA certificate is stored
and published (if any Publishers are configured), and the initial CRL is created 
and stored/published.
</p><p>
Subordinate CAs are created using the admin GUI, you can not use the 
cli for that.
</p>
</subsection> 
<subsection name="Converting an OpenSSL CA">
<p>
You can convert a PEM-style Root CA key to a PKCS12 file that can be imported in EJBCA.
</p>
<source>
openssl pkcs12 -export -out server1.p12 -inkey cakey.pem -in ca.pem -name privateKey
</source>
<p>
You can import the CA with the cli command 'bin/ejbca.sh ca importca'.
</p></subsection>
</section>

<section name="Using EJBCA">

<subsection name="Creating Users">
<p>
Users are added in the admin-GUI, 'Add End Entity' or with the cli
'bin/ejbca.sh ra adduser'.
The users DN is normally entered in the cli as "C=SE,O=MyOrg,OU=MyOrgUnit,CN=MyName".
If a ',' is needed in the DN the comma must be escaped using '\,'.
</p></subsection>

<subsection name="Create User certificates">
<p>
To enroll for certificates using browsers, open
 http://127.0.0.1:8080/ejbca/publicweb/apply/index.html
 (assuming the servlet container
 listens to port 8080) and use the links for your browser.
</p><p>
To enroll for certificates using manual methods (for server
certificates for
 example) open
http://127.0.0.1:8080/ejbca/publicweb/apply/apply_man.jsp and
fill in the form.
</p><p>
Note that application for certificates only work when the status of a user is
NEW, FAILED or INPROCESS (one time password thing). The
status is set to
GENERATED after a certificate has been issued. To issue a new
certificate, the
status must be reset to NEW, which can be done through
the admin-GUI or the cli.
</p><p>
During batch generation of certificates, users with status NEW
or FAILED are
generated. This is due to the possibility that a batch generation for some
reason failed. If it fails status is set to FAILED and you can try again after fixing the
error.
</p></subsection>

<subsection name="Create server certificates">
<p>
The best way to create server certificates is to generate a
PKCS12, JKS or PEM file for the server, depending on what server it is.
To do this:
<ol>
<li>Create a user with the admin_GUI or 'bin/ejbca.sh ra'. The DN for a server should have the
domain name in
CommonName (CN). Example DN for webserver: "C=SE,O=AnaTom,CN=
www.anatom.se", or
for mailserver "C=SE,O=AnaTom,OU=Engineering,CN=mail.anatom.se". Set the token type to match the kind of token that should be generated for your server.
</li>
<li>To be able to batch-generate certificates, the batch
generation program must have access to the users (servers) password in order to request
a certificate on behalf of the user. Normally the password is stored in hashed
form, so the password must be stored in clear text form by running
'bin/ejbca.sh ra setclearpwd <i>username password</i>'
</li>
<li>Generate private keys and certificates by running 'bin/ejbca.sh batch'
</li>
</ol>
</p><p>
Many servers (ex Apache, Tomcat) wants keys and certificates
in PEM-format or SUN JKS.
To generate PEM-files use token type PEM. The PEM-files will be stored in a
separate subdirectory, 'pem'. The generated PEM-files can be used with
Apache etc, and are NOT protected by any password.
To generate JKS-files use token type JKS. The JKS-files will be stored in the
subdirectory, 'p12' instead of PKCS12-files. The generated JKS-
files can be used with Tomcat etc, and are protected (both private key password
and keystore password) by the users password.
</p><p>
It is also possible to use openssl to transform a PKCS12 file to PEM-
format.
</p>
<source>
openssl pkcs12 -in pkcs12-file -nodes
</source>
<p>
copy and paste the private key to key file, the first certificate to
server cert file and last certificate to CA cert file (If your CA is a
subordinate CA to another Root CA, the CA cert file may need to contain the whole cert
chain). Exactly how your server wants the files is server dependent.
</p></subsection>
</section>

<section name="CRL generation">
<p>
A new CA should always issue an (empty) CRL. This is done when the ca is created
and can also be done by running 'ca.sh/cmd createcrl <i>caname</i>'.
</p><p>
Note on CRL Distribution Points (CDPs): it is possible to configure
multiple URLs for CDPs if they are separated by ';'. 
For example: http://cdpurl-1/mycrl.der;http://cdpurl-2/crl.crl
</p><p>
A CRLDistributionPoint for a CA in EJBCA could look like:
</p>
<source>
http://host:port/ejbca/publicweb/webdist/certdist?cmd=crl&amp;issuer=url-encoded-issuerDN
</source>
<p>
(such as the link from the webdist pages)
</p><p>
There are at least two ways to have EJBCA to periodically create updated CRLs.
</p>
<subsection name="JBossservice">
<p>
The first way to have CRLs generated automatically is to build and deploy the JBOSS CRL Service.
 This is done with the command 'ant deploywithjbossservices' (inside ejbca.ear) alternatively 'ant deployjbossservices' (outside ejbca.ear)
 If you only want to build the jar (without deploying) you can do so with the command 'ant jbossservices'.
 After installation with deployjbossservices, JBoss must be restarted. 
 </p><p>
This service will by default check if CRL generation is needed every minute. 
If this default behaviour can be changed by editing the attribute 'Polltime' in 
src/appserver/jboss/crlcreate-service.xml. 
A new CRL is created if the old one expires within the polltime + 10 minutes, so a CRL is always created
at least 10 minutes before the old one expires.
In this way we will in the worst case get the overlap time (10 min) as the time when applications can 
fetch the new CRL before the old one expires.

The attribute can have the following values:
</p>
<source>
DAILY   =  Every midnight
HOURLY  =  At XX:00 every hour.
30MIN   =  At XX:30 and XX:00 every hour
15MIN   =  At XX:15, XX:30, XX:45,XX:00, every hour 
1MIN    =  Every minute
</source>
</subsection>
<subsection name="Cron job">
<p>
The second way is to have a cron job or equivalent call 'bin/ejbca.sh ca createcrl'.
The 'createcrl' command will then check all active CAs if there is a need to update their CRLs, 
otherwise nothing is done. 
</p><p>
If you want to force CRL generation for a CA, use 'bin/ejbca.sh ca createcrl <i>caname</i>'
</p><p>
Example crontab entry:
</p>
<source>
PATH=$PATH:/usr/java/jdk1.4.2_01/bin
@daily cd /home/ejbca;/home/ejbca/ca.sh createcrl;
</source>
<p>
where '/usr/java/jdk1.4.2_01/bin' is the path to where 'java' can be found.
'/home/ejbca' is where ejbca is installed and 'ca.sh' located.
</p><p>
Sample crontab to be installed with 'crontab -e':
</p>
<source>
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
CLASSPATH=$CLASSPATH:/root/ejbca:/root/ejbca/admin.jar
JBOSS_HOME=/usr/local/jboss
# m h dom mon dow command
00 0    * * *   cd /root/ejbca;./ca.sh createcrl
</source>
</subsection>
</section>

<section name="Scep">
<p>
Since SCEP uses encryption, you must install the 'Unlimited Strength Jurisdiction Policy Files' for JDK.
The policy files can be found at the same place as the JDK download. Further information on this can be found in 
the Sun documentation on the JCE.
</p><p>
There is a SCEP servlet receiving requests on http://localhost:8080/ejbca/publicweb/apply/scep/pkiclient.exe
</p>
<subsection name="Level of SCEP support">
<p>
EJBCA does succesfully receive SCEP 'PKCSReq' requests and send back the certifificate/CRL immediately in a proper SCEP reply message.
EJBCA does not support the 'polling' model, EJBCA uses the direct method, where a request is granted or denied immediately.
EJBCA will not send back proper SCEP error messages in all cases of failure. The error messages are not completely implemented.
</p><p>
The CN part of the DN in the PKCS#10 request, which is part of the Scep request, will be used as the 'username' when 
authenticating the request in EJBCA. Create the Scep request with a CN mathing the username registered in EJBCA.
The challengePassword in the PKCS#10 request, which is part of the Scep request, will be used as the 'password' when 
authenticating the request in EJBCA. Create the Scep request with a challengePassword mathing the password registered in EJBCA.
</p><p>
The most common errors should be wrong username/password or wrong status (not NEW) on the user in EJBCA.
</p>
</subsection>
<subsection name="Tested devices">
<subsubsection name="OpenScep">
<p>
To use the <a href="http://openscep.othello.ch/">OpenScep</a> client to request a certificate from this servlet, use the command:
</p>
<source>
./scep -k test.key -r test.pemreq -c ejbca-ca.pem -q foo123 -u http://localhost:8080/ejbca/publicweb/apply/scep
rem ./scep -d -k test.key -r test.pemreq -2 -e test.req -c ejbca-ca.pem -q foo123 -u http://localhost:8080/ejbca/publicweb/apply/scep
</source>
<p>
Where test.key is generated with:
</p>
<source>
openssl genrsa -out test.key
</source>
<p>
test1.req is generated with:
</p>
<source>
openssl req -key test.key -new -days 30 -out test.req -outform DER -config ../openssl/openscep.cnf
</source>
<p>
and test1.pemreq is generated with:
</p>
<source>
openssl req -key test.key -new -days 30 -out test.pemreq -outform PEM -config ../openssl/openscep.cnf
</source>
</subsubsection>
<subsubsection name="Simple Scep Client (sscep)">
<p>
<a href="http://www.klake.org/~jt/sscep/">Simple Scep Client</a>.
You should only use CN in the users DN (same as for PIX below).
</p>
</subsubsection>
<subsubsection name="Juniper Networks NetScreen-25/NetScreen-50">
<p>
Working.
</p></subsubsection>
<subsubsection name="Cisco VPN client">
<p>
Tested with version 4.0.2.
</p><p>
To enroll using the Cisco VPN client use:
<ul>
<li>CA URL='http://127.0.0.1:8080/ejbca/publicweb/apply/scep/pkiclient.exe'</li>
<li>CA Domain=you CAs name in EJBCA</li>
<li>In the DN screen simply enter the username (as added in EJBCA) as 'Name [CN]'</li>
</ul>
</p></subsubsection>
<subsubsection name="Cisco PIX">
<p>
Cisco PIX is not currently tested as working.
<ul>
<li>You must configure JBoss to use port 80 to enroll with PIX, this is done in 
JBOSS_HOME/server/default/deploy/jbossweb-tomcat50.sar/service.xml (or similar depending on version).</li>
<li>EJBCA supports the 'ca' mode of enrollment for pix, not 'ra'.</li>
<li>The certificate profile used by the SCEP CA must include the key usages KeyEncipherment and DataEncipherment, otherwise PIX will 
not be able to verify/decrypt encrypted SCEP messages. This is not in the default certificate profile for CAs.</li>
<li>When enrolling for certificate using SCEP with for example a Cisco PIX there is a 'ca_nickname'. This nickname 
should be the CA-name as defined when creating the CA in EJBCA. For example 'vpnca'. </li>
<li>Only use lower-case names when creating the CA in EJBCA, since PIX will change the CA name VpnCA to vpnca when enrolling.</li>
<li>The username in EJBCA must be the name the PIX identifies itself with <i>name</i>.<i>domain</i>, example pix.primekey.se. </li>
<li>The end-entity DN should only include the DN component CN plus unstructuredXX, ex "CN=pix.primekey.se, unstructuredName=pix.primekey.se",
no O or C should be in the certificate.</li>
<li>Certificates used for PIX must include the DN component unstructuredName (fqdn) and could also include unstructuredAddress (ip).</li>
<li>Certificates used for PIX must include the SubjectAltName dNSName beeing the fqdn of the pix, eg <i>name</i>.<i>domain</i>, 
iPAddress can also be useful. If unstructuredAddress is used iPAddress should be used (but I don't think you should use ip).</li>
<li>Cisco does not support use of the 'Domain Component', DC, attribute in DNs, don't use it.</li>
<li>The PIX user should have a DN like "unstructuredName=pix.primekey.se, CN=pix.primekey.se", 
KeyUsage "Digital Signature, Key Encipherment", SubjectAltName "DNS:pix.primekey.se".</li>
<li>When the VPN-client (above) connects to the PIX, the 'ou' part of the clients DN must match a Vpngroup you have specified, 
otherwise the connection will fail.</li>
</ul>
</p><p>
Please notice this Cisco note:
</p><p>
Be sure that the PIX Firewall clock is set to GMT, month, day, and year before configuring CA. 
Otherwise, the CA may reject or allow certificates based on an incorrect timestamp. 
Cisco's PKI protocol uses the clock to make sure that a CRL is not expired.
Set timezone first, then set time, then check time with 'show clock'.
</p><p>
The enrollment steps should be something like:
</p>
<source>
ca identity pixca ca-ip:/ejbca/publicweb/apply/scep/pkiclient.exe
ca configure pixca ca 1 0 crloptional
ca authenticate pixca
--wait--
show ca certificate
ca save all
wr mem
ca crl request pixca
--wait--
show ca crl
ca enroll pixca foo123
--wait--
</source>
<p>
Unforturnately this gives the following error for me:
</p>
<source>
CRYPTO_CA: error = 293: failed to verify
</source>
<p>
or sometimes:
</p>
<source>
CRYPTO_CA: error = 266: failed to verify 
</source>
<p>
If someone has any ideas what this means, don't hesitate to let us know.
</p></subsubsection>
</subsection>
</section>

<section name="Ocsp">
<p>
OCSP is used by PKI-clients to verify the validity of certificates in real-time. 
This is done by sending a request for the status of a specific certificate to an OCSP responder. 
The responer may or may not be the same as the CA. The OCSP responder sends a signed reply, 
containing the requested status information back to the client. 
The client uses this status information to determine whether the certificate is valid for use or revoked.
</p>
<p>
There is an OCSP servlet receiving requests on http://localhost:8080/ejbca/publicweb/status/ocsp. The 
servlet can process requests for certificates signed by a CA running in EJBCA, as long as the CAs OCSP 
service has not been deactivated. 
</p><p>
The OCSP servlet receives OCSP request by http(s) and send back a status response signed by the CA, or 
with a dedicated responder certificate.
</p><p>
For a CA to be valid as an OCSP-responder it must have the KeyUsage 'Digital Signature' in the certificate profile used to create the CA.
This KeyUsage must be included if the CA is to sign OCSP-responses.
The default certificate profiles for CAs includes the key usage 'Digital Signature'.
</p><p>
There are a two parameters affecting the OCSP service that can be configured in ejbca.properties:
<ul>
<li>'useCASigningCert' - If set to true (default) the OCSP reponses will be signed directly by the CAs certificate instead 
of the CAs OCSP responder. If set to false, the CAs special OCSP responder certificate is used to sign the
OCSP responses. The OCSP responder certificate is signed directly by the CA.</li>
<li>'defaultResponderID' - Specifies the subject of a CA which will 
generate responses when no real CA can be found from the request. This is used to generate 'unknown' 
responses when a request is received for a certificate that is not signed by any CA on this server.
Set this to the same DN as your initial Admin CA for example.</li>
</ul>
</p><p>
These values should be set during deployment of EJBCA. After the values have been edited, they are installed 
with the 'ant deploy' command.
</p><p>
Example to generate an OCSP request using OpenSSL:
</p>
<source>
openssl ocsp -issuer Test-CA.pem -CAfile Test-CA.pem -cert Test.pem -req_text -url http://localhost:8080/ejbca/publicweb/status/ocsp
</source>
<p>
If Mozilla is to request and accept OCSP-responses from a CA it must be configured:
<ol>
<li>'Use OCSP to validate all certificates using this URL and signer' in 'Privacy &amp; Security->Validation'.
Choose the CA from EJBCA (which you should have made Trusted by right clicking in 
'Privacy &amp; Security->Certificates->Manage Certificates->Authorities' and checking the appropriate checkboxes).
</li>
<li>If using a Certificate Profile that includes a OCSP Service URL for client certificates, the Validation option in Mozilla 
'Use OCSP to validate only certificates that specify an OCSP service URL' also works fine. When this option is checked you may need to restart Mozilla.
</li>
</ol>
</p><p>
When the validation settings are set, Mozilla will query the OCSP server when for example double-clicking on a certificate in the 
certificate manager.
An appropriate URL for validation is: http://<i>hostname</i>:8080/ejbca/publicweb/status/ocsp
</p><p>
If using a dedicated OCSP responder certificate, this certificate must be imported in Mozilla as a Trusted CA certificate, so it
can be set as OCSP signer in 'Privacy &amp; Security->Validation'. You can do this through 'View Certificates' in EJBCA 
(http://<i>hostname</i>:8080/ejbca/publicweb/webdist/cacert.jsp).
</p><p>
In doc/samples there is a sample how to check revocation with OCSP using the new APIs in JDK 1.5.
</p></section>

<section name="Key recovery">
<p>
Key Recovery can be used to re-use or restore a users private key. To enable key recovery use the admin-GUI:
<ol>
<li>Set 'Enable Key Recovery' in 'System Configuration'.</li>
<li>Create a new End Entity Profile and set to use 'Key Recoverable'.</li>
<li>Add users with this End Entity Profile.</li>
</ol>
</p><p>
The following is an example of a sequence of commands that can be used to generate a new certificate for a user using the
same key pair:
</p><p>
# First revoke <i>username</i>, with revocation reason <i>reason</i>,
</p>
<source>
bin/ejbca.sh ra revokeuser $username $reason
</source>
<p>
# then mark the certificate for keyrecovery,
</p>
<source>
bin/ejbca.sh ra keyrecovernewest $username
</source>
<p>
# then set clear text password for Batch session to use
</p>
<source>
bin/ejbca.sh ra setclearpwd $username $userpass
</source>
<p>
# and finally reissue the certificate.
</p>
<source>
bin/ejbca.sh batch
</source>
</section>

<section name="Email notifications">
<p>
Mail settings in JBoss is created when running the 'ant install' using the values
specified in ejbca.properties (or default).
<br></br>
It is configured in 
$JBOSS_HOME/server/default/deploy/ejbca-mail-service.xml.
For other containers you must create a mail service with the same JNDI name as specificed in 
ejbca.properties.
</p><p>
You must create a new end-entity profile to be able to issue certificates 
to end users using email notifications. Under the RA functions, choose "Edit End Entity Profiles" 
and add a new profile. Select the profile and go into 
'Edit End Entity profile'. In this page you can Enable Send Notifications 
and create the notification message. 
</p><p>
Enter the from-address and subject. Enter a message using the following variables 
for dynamic substitution: $USERNAME, $PASSWORD, $CN, $O, $OU, $C, $DATE. 
Use $NL for newline in the mail message.
</p><p>
<strong>Tip:</strong>
If you configure autogenerated password in end entity profile you don't
need to enter one in the adduser page. A generated one will automatically be
sent with the email.
</p><p>
If you want to re-send a notification for a user, reset the status to NEW. 
If the status is already NEW, set the status to GENERATED and then back to NEW.
</p></section>

<section name="Hardware Security Modules (HSM)">
<p>
EJBCA have a moduler API for HSMs, HardCAToken. For every CA that is created
a HardCAToken object is also created. This object contains among other
things references to keys (or the keys themselves of a soft token is used).

For each HSM hardware that should be supported you need one HardCAToken
class that implementes support for this particular HSM. A hard ca token
plug-in must:
</p>
<ol>
<li>implement IHardCAToken</li>
<li>be loaded at the static initialization if HardCATokenManager where it is
registered with the HardCATokenManager using the method
addAvailableHardCAToken()</li>
</ol>
<p>
See HardCATokenSample and/or DummyHardCAToken for samples.
Unlike the sample addAvailableHardCAToken() must be called with use=true, or
the token will not be usable in EJBCA (as the flag suggests).
</p><p>
EJBCA has build-in support for the nCipher NFast HSM.
</p>
<subsection name="nCipher NFast">
<p>
Follow these steps to create a CA that is using a NFast card:
</p>
<strong>1. Create keys that should be used on the NFast card</strong>
<p>
You may use the java keytool. It is advisable to define an alias for using the tool for keystores on the NFast:
</p>
<source>
alias keyToolHSM='java -cp /opt/nfast/java/classes/rsaprivenc.jar:/opt/nfast/java/classes/nfjava.jar
:/opt/nfast/java/classes/kmjava.jar:/opt/nfast/java/classes/kmcsp.jar
:/opt/nfast/java/classes/jutils.jar sun.security.tools.KeyTool -provider com.ncipher.provider.km.nCipherKM 
-storetype nCipher.sworld'
</source>
<p>
Then the keyToolHSM alias could be used to manage keys on the NFast card in exactly the same way as soft keys are managed by keytool.
All keys for one CA should be in the same keystore. Different CAs may share the same keystore but may also have different keystores.
</p>
<strong>2. Copy files to jboss that implements the nCipher CA Token functionality to JBoss</strong>
<p>
The file are copied from the dist directory. The destination is the deploy directory of the application server (server/default/deploy in jboss).
The files to be copied are:
</p>
<source>
jutil.jar kmcsp.jar kmjava.jar nfjava.jar rsaprivenc.jar
</source>
<p>
You could also make links if you prefer that.
</p>
<strong>3. Make EJBCA aware of the NFast HSM</strong>
<p>
Restart the application server.
</p>
<strong>4. Create a new CA in the web GUI of EJBCA</strong>
<p>
Choose NFastCAToken as "CA Token Type".
</p><p>
Define the keystore on the nFast card that should be used. The keystore is defined by the hexadecimal hash string from the keystore file (open the .jks with a text editor ) generated in step 1.
Define which keys in the keystore that should be used and the purpose of these keys.
</p><p>
Use one row for each definition. Begin the row with a key word. It is one row for the keystore and one for each key definition. Key word and value is separated by one or more spaces.
A row with the keyword keyStore must always be present.
The keywords for keys that can be used are:
<ul>
<li>certSignKey   - the key to be used when signing certificates </li>
<li>crlSignKey    - the key to be used when signing CLSs </li>
<li>keyEncryptKey - the key to be used for key encryption and decryption.</li>
<li>defaultKey    - the key to be used when no other key is defined for a purpose. If this is the only definition then this key will be used for all purposes.</li>
</ul>
</p>
<p>
Example:
</p>
<source>
keyStore 578fc1f0b19d5bc6f61e3a3f1e28318715385a20
certSignKey rootCertSign
defaultKey rootCRLSign
</source>
</subsection>
</section>

<section name="LDAP and Publishers">
<p>
EJBCA has a modular support for something we call Publishers. A publisher
can be any external source where you want to send issued certificates and
CRLs to be stored. The most common cases of Publishers, which are
implemented by default in EJBCA are LDAP directories and Active Directory
(which is a special case of LDAP directory).
</p><p>
The Publisher architecture is modular and it's possible to implement custom
publishers that can also be easily integrated and set up in the admin-GUI.
</p><p>
First we will start with describing the built-in publishers.
</p>
<subsection name="LDAP Naming">
<p>
A good book to understand LDAP naming is "Understanding and Deploying LDAP
Directory Services". The recommended method of choosing a naming suffix is
the one described in RFC2247 that maps a DNS domain to a DN. If my DNS
domain is bigcorp.com it will map to the DN "dc=bigcorp,dc=com". The top
node in my LDAP directory will then be "dc=bigcorp,dc=com".
</p><p>
The dc component support is mandated by all of the X.509 RFCs now.
For example, if I have this directory:
</p>
<source>
dc=bigcorp,dc=com
    |
    +-dc=fi
    |
    |
    +-dc=se
        |
        +-cn=Mike Jackson
</source>
<p>
The most understandable method is taking the subject name in
forward order, like:
cn=Mike Jackson,dc=se,dc=bigcorp,dc=com
</p><p>
If the DN is ordered like this it should be published to the correct object
in the tree.
</p><p>
If the DN is ordered reverse, like:
dc=bigcorp,dc=com,dc=se,cn=Mike Jackson
EJBCA will reorder it incorrectly to forward order, so the publishing will
be wrong.
</p><p>
Therefore...
Use forward order like this:
'cn=Mike Jackson,dc=se,dc=bigcorp,dc=com' if using the dc model or
<br></br>
'cn=Mike Jackson,o=bigcorp,c=se' if using the o,c model.
</p><p>
An example image of an LDAP structure can be seen below in HOWTO-LDAP-tree.png.
<img src="screenshots/HOWTO-LDAP-tree.png" />
</p><p>
Making unique LDAP DNs is the next challenge. If you are in a small
organization having the CN will probably work fine, but in a larger
organization there are probably several people with the same name. Somehow
the names must be made unique, and one way is to introduce numbers, initials
etc in the CN. Another way that we recommend is to use uid in the LDAP DN
instead. LDAP DNs will then looks like "uid=tomas,dc=bigcorp,dc=com". Uid is
the users username, normally used for login etc, and you probably already
have some proceedure to create unique usernames already.
</p>
</subsection>

<subsection name="LDAP Basics">
<p>
LDAP has an unusual structure, if you are not used to X.500 style naming.
Things are either branches, or leaf nodes. You can't just drop an object
anywhere you like; You need to create the framework to support it.
Sort of like if you wanted to put entries in /etc/hosts, if the directory
/etc did not exist.
</p><p>
First you mkdir /etc, Then you create the file. Then you start putting
things in the file. The difference with LDAP and x.500 is that instead of paths
separate by slashes, you have paths separated by commas and '=' signs.
</p><p>
For example, if you want to make an object
"cn=ldaphost,ou=hosts,dc=yourdom,dc=com",
you first have to make sure "dc=yourdom,dc=com" exists.
<br></br>
Then make sure
<br></br>
"ou=hosts,dc=yourdom,dc=com" exists.
<br></br>
THEN you can try
<br></br>
"cn=ldaphost,ou=hosts,dc=yourdom,dc=com"
</p><p>
EJBCA does not create branches in LDAP.
You have to put them there with other means, before you start publishing.
</p>
</subsection>

<subsection name="Configure LDAP publishers">
<p>
A Publisher is a session bean that implements the IPublishSession interface
and is used to store certificates and CRLs for entities.
EJBCA have support for endless number of publishers simply by defining
publishers in the admin-GUI. The user of EJBCA can implement own publishers, but EJBCA
already comes with a publisher for LDAP.
</p><p>
EJBCA uses a notion of base DN to publish to different LDAP structures. The
DN used in the certificate can be different from the LDAP structure.
</p>

<subsubsection name="Configuring EJBCA">
<p>
To configure the publisher for LDAP:
</p>
<ol>
<li>Choose 'Edit Publishers' in the admin-GUI.</li>
<li>Add a new publisher with a name you define yourself. Edit the publisher and
fill in all the neccesary fields.</li>
</ol>
<p>
Parameters to LDAP Publisher:
</p>
<ul>
<li>'Hostname' is the host where the LDAP server is located.</li>
<li>'Port' is the port on which the LDAP server listens, default non-SSL is
389.</li>
<li>'Login DN' is the DN of a user on the LDAP server with permissions to add
and update enties.</li>
<li>'Login Password' is the password for the user above.</li>
<li>'User Object Class' is the objectclass for the LDAP entries for users,
where user certificates are published. The entry is hierarchical separated by ';' to
build a structure like:
<br></br>
objectclass: top
<br></br>
objectclass: person
<br></br>
objectclass: organizationalPerson
<br></br>
objectclass: inetOrgPerson
<br></br>
This objectclass must allow the attribute 'userCertificate;binary'.
<br></br>
Default 'top;person;organizationalPerson;inetOrgPerson'
</li>
<li>'CA Object Class' is the objectclass for the LDAP entries for CAs, where
CA certificates and CRLs are published. The entry is hierarchical separated by
';' to build a structure. This objectclass must allow the attributes
'cACertificate;binary', 'certificateRevocationList;binary' and
'authorityRevocationList;binary'.
<br></br>
Default 'top;applicationProcess;certificationAuthority'
</li>
<li>'User Certificate Attribute' is the attribute name, in the
userObjectClass, for the users certificate. 
<br></br>
Default 'userCertificate;binary'.
</li>
<li>'CA Certificate Attribute' is the attribute name, in the cAObjectClass,
for the CAs certificate. 
<br></br>
Default 'cACertificate;binary'.</li>
<li>'CRL Attribute' is the attribute name, in the cAObjectClass, for CRLs
(user CRLs) publisher by the CA. 
<br></br>
Default 'certificateRevocationList;binary'.
</li>
<li>'ARL Attribute' is the attribute name, in the cAObjectClass, for ARLs (CA
CRLs) publisher by the CA. 
<br></br>
Default 'authorityRevocationList;binary'
(note that pure ARLs are not implemented yet in EJBCA).
</li>
<li>'LDAP location fields from cert DN'
When configuring the LDAP publisher the BaseDN will be used as the base for
the DN published in LDAP,
and it will be appended to the LDAP location fields selected to be used.
example: If the user DN in EJBCA is "cn=tomas gustavsson, uid=tomasg,
O=PrimeKey Solutions AB, C=SE"
and the BaseDN is "dc=PrimeKey,dc=SE" and the selected LDAP location fields
are "CN".
The LDAP DN used for publishing will be "cn=tomas gustavsson, dc=PrimeKey,
dc=SE", and the "uid=tomasg"
will be added as an attribute in LDAP. The certificate stored under
"cn=tomas gustavsson, dc=PrimeKey, dc=SE"
will have the subjectDN "cn=tomas gustavsson, uid=tomasg, O=PrimeKey
Solutions AB, C=SE".
</li>
</ul>
</subsubsection>

<subsubsection name="Setting up certificate profiles">
<p>
You MUST make a custom certificate profile to publish to LDAP!
</p><p>
To publish in LDAP you must create a Certificate profile in EJBCA that
publishes to LDAP. If the above is configured, there will be a section for
'Publishers' available when creating/editing a certificate profile (with 'Edit Certificate
Profiles').
Choose this, and then when adding end-entities, make sure they use the new
certificate profile and voila, the certs will be published.
</p>
</subsubsection>

<subsubsection name="Publishing to Active Directory">
<p>
When configuring Active Directory LDAP, Bind DN for the users are usually,
cn=user,cn=Users,dc=domain-component1,dc=domain-component2.
<br></br>
For example: cn=Philip Vendil,cn=Users,dc=primekey,dc=se for the domain
primekey.se
</p><p>
If your DN is like "cn=Ejbca1,0=MyOrg,c=SE" 
<br></br>
and your base DN is like "DC=Security,DC=Software,DC=MyOrg".
<br></br>
The publisher for AD should have base DN like
<br></br>
"cn=Users,dc=Security,dc=Software,dc=MyOrg"
</p><p>
For Login DN you should use the full ldap name, for example:
<br></br>
"CN=Administrator,C=Users,dc=primekey,dc=se"
</p><p>
In order to connect to AD though SSL you should issue a LDAP SSL P12
to the domain controller. According to 
<a href="http://support.microsoft.com/default.aspx?scid=kb;en-us;321051&amp;sd=tech">
MS Article ID 321051</a>
</p><p>
The same certificate is used for both the AD and global catalogue (GC).
Remember to add the CA certificate to the machine stores trusted root
certificates.
</p>
</subsubsection>

<subsubsection name="Custom publishers">
<p>
If your setup makes it very complex to configure multiple certificate
profiles and multiple publishers you might consider writing a custom publisher that
handles things directly according to you demands.
</p><p>
Look in the directory src/java/se/anatom/ejbca/ca/publishers for more
information about writing your own solution. There is an empty custom publisher called
DummyCustomPublisher.java that can be extended.
</p>
</subsubsection>

<subsubsection name="What EJBCA stores/creates/modifies">
<p>
When ejbca publishes a certificate to LDAP it firsts builds the DN from the
baseDN and 'LDAP location fields for cert DN'. It checks if the entry exists in the
ldap and either creates or modifies the entry.
</p><p>
Apart from the DN in the entry a number of attributes are also stored, some
are required by schema, some are optional. EJBCA find attributes in the certificate, if there is an
OU (organizational unit) in the certificate EJBCA uses that to populate the OU attribute in the ldap
entry.
</p><p>
When updating an entry that already exists EJBCA uses replace on the
existing attributes, so if an email attributes already exists and EJBCA finds an email adress in
the certificate, the email attribute in ldap is replaced with the email adress from the certificate.
</p><p>
The attributes that EJBCA creates or replaces are:
</p>
<ul>
<li>cn (common name)</li>
<li>l (locality)</li>
<li>ou (organizational unit)</li>
<li>sn (surname)</li>
<li>gn (givenname)</li>
<li>st (state)</li>
<li>o (organization)</li>
<li>uid (user id)</li>
<li>initials</li>
<li>title</li>
</ul>
</subsubsection>

</subsection>

<subsection name="Using LDAP">
<p>
In Mozilla you can for example enter a URL like:
<br></br>
ldap://ip-address-of-ldap-server:389/cn=Tomas Gustavsson,dc=se,dc=bigcorp,dc=com
<br></br>
and it will fetch an adress book entry with the information about the user,
including the certificate.
</p><p>
The LDAP url format is described in <a
href="http://www.ietf.org/rfc/rfc2255.txt">RFC2255</a>.
</p><p>
Examples of using LDAP with Netscape/Mozilla can be found in the
howto-section of this web page.
</p><p>
To use LDAP top fetch user certificates and use them for encrypting email
there seems to be a requirement to use SSL connection to the LDAP server
(Account Options->Compositions &amp; Addressing->Edit directories->Edit->Use
Secure Connection), see also below how to configure OpenLDAP for SSL.
</p><p>
Note: When fetching certificates from LDAP with Mozilla for example with
URL:
<br></br>
ldap://ldap-server-host/dc=bigcorp,dc=com??sub?(cn=MyName)?(objectclass=*)
<br></br>
To get a checkbox at the fetched certificate, the CA certificate must be
installed in the Windows truststore, not only in Mozillas.
</p><p>
To use SSL against an LDAP server with MS Outlook you must make sure the CN
in the LDAP servers certificate is the same as the hostname. 
An example of adding a user for the LDAP server with the CLI interface is:
</p>e
<source>
bin/ejbca.sh ra adduser ldap password "C=SE,O=Foo,CN=ldap.foo.se" null MyCA null 1 PEM
</source>
<p>
where ldap.foo.se is the hostname of the LDAP server that Outlook should use.
</p><p>
The CA certificate must also be imported into Windows properly.
</p>
</subsection>

<subsection name="Configure OpenLDAP">
<p>
The objectclass 'inetOrgPerson' is used by default to store certificates.
</p><p>
Example:
</p>
<source>
dn: cn=Mike Jackson,ou=people,dc=company,dc=com
objectclass: top
objectclass: person
objectclass: organizationalPerson
objectclass: inetOrgPerson
cn: Mike Jackson
sn: Jackson
userCertificate;binary::
</source>
<p>
CAs are published in the form:
</p>
<source>
dn: cn=ejbca,dc=jackson,dc=net
objectClass: top
objectClass: applicationProcess
objectClass: certificationAuthority
cn: ejbca
cACertificate;binary:
certificateRevocationList;binary:
authorityRevocationList;binary:
</source>
<p>
To configure OpenLDAP (version 2.2.5) to include the 'inetOrgPerson' you
must add the following lines to slapd.conf:
</p>
<source>
include         /usr/local/etc/openldap/schema/cosine.schema
include         /usr/local/etc/openldap/schema/inetorgperson.schema
</source>
<p>
Don't forget to add the top object by creating an LDIF file (org.ldif):
</p>
<source>
dn: o=AnaTom,c=SE
objectclass: dcObject
objectclass: organization
o: AnaTom
dc: AnaTom

dn: cn=Admin,o=AnaTom,c=SE
objectclass: organizationalRole
cn: Admin
</source>
<p>
And using the command:
</p>
<source>
ldapadd -x -D "cn=Admin,o=AnaTom,c=SE" -W -f org.ldif
</source>
<p>
Check what you have in the LDAP by:
</p>
<source>
/usr/local/bin/ldapsearch -x -b 'o=AnaTom,c=SE' '(objectclass=*)'
</source>
</subsection>

<subsubsection name="Configure SSL">
<p>
Create a user in ejbca (this example is for adding a user with the cli
interface, adding a user with the admin-GUI works just as fine).
In the mail ejbca directory type (use simply 'ra' on windows):
</p>
<source>
bin/ejbca.sh ra adduser ldap foo123 "C=SE,O=Foo,CN=ldap" null AdminCA1 null 1 PEM
bin/ejbca.sh ra setclearpwd ldap foo123
</source>
<p>
Where foo123 is the ldap users password, C=SE... is the users DN and
AdminCA1 is the name you chose for your CA. The user type is end-user (1), keystore type is PEM, and
if using the admin-GUI check 'use batch').
Batch generate the PEM keystore:
</p>
<source>
bin/ejbca.sh batch
</source>
<p>
Copy the resulting files p12/pem/ldap.pem, p12/pem/ldap-CA.pem and
p12/pem/ldap-Key.pem to your LDAP server. In this example the slapd.conf is located in
/usr/local/etc/openldap so we copy the files to that directory. 
Protect theses files so they are only readable by the LDAP server.

Add the following to your slapd.conf:
</p>
<source>
# Use SSL
TLSCipherSuite HIGH:MEDIUM:+SSLv3
TLSCertificateFile /usr/local/etc/openldap/ldap.pem
TLSCertificateKeyFile /usr/local/etc/openldap/ldap-Key.pem
TLSCACertificateFile /usr/local/etc/openldap/ldap-CA.pem
</source>
<p>
Restart slapd:
</p>
<source>
./slapd -h "ldap:/// ldaps:///"
</source>
<p>
and check thats it is running with 'ps -ef|grep slapd'.
</p><p>
On SuSE, if using the builting OpenLDAP you have to enable ldaps in
/etc/sysconfig/openldap:
</p>
<source>
OPENLDAP_START_LDAPS="yes"
</source>
<p>
and then run
</p>
<source>
SuSEconfig
</source>
<p>
and then
</p>
<source>
rcldap start
</source>
<p>
Configure your LDAP publisher in EJBCA to use SSL by checking the checkbox
'Use SSL', the port shold change to port 636.
</p><p>
Note! The CA certificate of the (root)CA used to sign the ldap server
certificate must be present in the java trust cert store 
($JAVA_HOME/jre/lib/security/cacerts). If you use
the defualt CA created when ejbca was installed this is alread included. 
Otherwise you will have to add it using something like:
First get the CA cert:
</p>
<source>
bin/ejbca.sh ca getrootcert MyCA -der
</source>
<p>
Then add it to the java trust store:
</p>
<source>
keytool -import -trustcacert -alias MyCA -keystore $JAVA_HOME/jre/lib/security/cacerts -password changeit
</source>
<p>
A guide for configuring OpenLDAP on Solaris can be found at
<a href="http://www.bolthole.com/solaris/LDAP.html">bolthole.com</a>
</p>
</subsubsection>

<subsection name="Extra device schema">
<p>
To store certificates for devices (e.g. routers, toasters etc) in LDAP there
is no really suitable standard object class. inetOrgPerson requires surnames
etc, and the device objectclass does not include a certifictae attribute.
</p><p>
Mike Jackson has kindly contributed additional objects that extend the
standard device class with a certificate attribute. 
The ejbcaDevice uses object ids from PrimeKey Solutions AB.
</p>
</subsection>

<subsubsection name="Installation">
<p>
For the Netscape/SUN servers, on UNIX, copy the 85ejbca.ldif file into:
</p>
<source>
/usr/netscape/servers/slapd-hostname/config/schema/
</source>
<p>
and restart the LDAP server.
</p><p>
For OpenLDAP, copy the ejbca.schema file into, e.g.:
</p>
<source>
/usr/local/etc/openldap/schema/
</source>
<p>
and edit slapd.conf to add the following line:
</p>
<source>
include /usr/local/etc/openldap/schema/ejbca.schema
</source>
<p>
then restart the server.
</p>
</subsubsection>

</section>

<section name="Export and import profiles">
<p>
Certificate and End Entity profiles can be exported as XML files and imported in another instance of EJBCA,
or in the same instance after removal of the old ones. 
</p><p>
When exporting profiles (bin/ejbca.sh ca exportprofiles), all profiles will be exported to the specified directory. The 
exported files will be given unique names containing profile name and profile id.
When importing profiles the profile name and id will be read from the filename. All profiles present in the specified
directory will be imported.
</p><p>
Fixed profiles will not be imported, they will simply be skipped during import.
If a profiles with the same name as the one beeing imported already exist, the profiles will not be imported.
</p><p>
Import of profiles try to keep the same profile id. If there already exist a profile with the same id in the database, 
you might have to edit the filename to choose another id. This can only be done if it is a new profile. 
The reason the id is kept is that there are references to the profile id from users beloinging to the profile.
</p><p>
One issue to notice regarding import/export of profiles is that if you export an entity profile with 'Available CAs' put to a CA that does not exist where you import the profile, you will not see it.
Before exporting the profiles, you should set 'Available CAs' to a CA that is also present (with the same DN=caid) on the other CA.   
This is not ideal, but it is a consequence of how the authorization system works, you are not authorized to see the imported profiles when the caid is unknown. 
</p></section>

<section name="Internationalization">
<p>
To customize EJBCA admin GUI for your languages special characters you may have to 
change the default page encoding in 'web.contentencoding' (in ejbca.properties file) 
to for example UTF-8 instead of the default ISO-8859-1.
</p><p>
Displaying, receiving, decoding and storing different char sets is rather complicated and the 
architecture is multilayered. There is the web browser, application server, database and 
operating system, all working together.
If you change to UFT-8 to handle your char set, perhaps you must also specify that the database 
connection should use UTF-8.
For MySQL this can be done in the <i>connection-url</i> in your datasource description 
(JBOSS_HOME/server/default/deploy/ejbca-ds.xml):
jdbc:mysql://yourhost/ejbca?useUnicode=true&amp;characterEncoding=UTF-8
</p><p>
If you can't get you national characters to work with the admin GUI, you can try using the cli instead
(bin/ejbca.sh ra adduser ...). That usually works.
</p><p>
EJBCA have for exmaple been tested on Windows/JBoss 4.0.2/MySQL and Linux/JBoss4.0.1sp1/HSQL with 
the default configuration using Swedish national characters, 
and it works nicely both with the cli and admin-GUI.
</p>

<subsection name="Adding a new language to the admin GUI">
<p>
Java uses unicode internally, so the things that needs to be taken care of are:
<ol>
<li>Make sure your system locale is set correctly, so Java will recognize input of your nations language. 
If Java does not automatically recognize your locale you might need to specify it as options to java during
startup (i.e. in JBoss and cmd line commands such as ca.sh and ra.sh).
java -Duser.language=2-char-language-code -Duser.region=2-char-country-code
example for Swedish: java -Duser.language=sv -Duser.region=SE
</li>
<li>Your database must also recognize the locale so it does not strip down to plain ascii. 
This is database and JDBC-driver dependent.</li>
</ol>
</p><p>
The admin GUI is meant to support multiple languages through language files
in src/adminweb/languages.
In order to add a language you should do the following:
<ol>
<li>Rename the languagefile you have created to
language.<i>languagecode</i>.properties. In case of chinese it should be 'ch', and place 
it in the src/adminweb/languages directory.
</li>
<li>Edit ejbca.properties (create with ejbca.properties.sample as template if you don't have one).
Change 'web.availablelanguages' and add your language code to the value. i.e:
&lt;env-entry-value>EN,FR,IT&lt;/env-entry-value>
</li>
<li>You may have to change the default page encoding in 'web.contentencoding' to for example UTF-8
instead of the default ISO-8859-1.
</li>
<li>Clean and re-deploy ejbca with 'ant clean' followed by 'ant deploy'. 
Restart JBoss and your browser after this.
</li>
</ol>
</p><p>
Now it should be possible to select EN, FR and IT in the system configuration as default language 
and in the administrator preferences page. 
The language will be changed next time the administrator logs in.
</p></subsection>
</section>

<section name="Reference manual">
<p>
All configuration options, JNDI names etc is configured through the use of an 
ejbca.properties file. 
</p>

<subsection name="Administrating CA">
<p>
The CA has a command line interface 'bin/ejbca.sh ca. Options are:
<ul>
<li>info - prints information about a CA.</li>
<li>init - creates a new Root CA.
<li>listcas - lists all CAs in the system.</li>
Stores CA certificates and publishes first CRL.
Quote the DN (") so it is treated as one argument.</li>
<li>getrootcert - exports the CA certificates to file.</li>
<li>createcrl - issues a CRL.</li>
<li>getcrl - retrieves the latest CRL.</li>
<li>listexpired - List certificates that will expire within a
given number of days.</li>
<li>exportprofiles - exports entity and certificate profiles to xml-files.</li>
<li>importprofiles - imports entity and certificate profiles from xml-files.
When you export a profile that should be imported in another CA, make sure the 
'Available CAs' is set to 'Any CA' for the profiles you export. Otherwise you
can get into trouble with authorization if you don't have the same CAs with the same 
caids (DNs) where you import the profiles.</li>
<li>importca - creates a new CA by importing keys from en existing PKCS12 file.
A PKCS12 file can be generates from PEM files with openssl.</li>
<li>importcert - creates a user and imports a certificate for him/her.</li>
<li>republish - republishes certificates for a CA and all users. 
Can be used to add a publisher to a CA after some time, and then publish all certs.</li>
</ul>
</p></subsection>

<subsection name="Administrating RA">
<p>
The RA has a command line interface 'bin/ejbca.sh ra'. Options are:
<ul>
<li>adduser - adds a user to the database, after addition a user
may apply for a
certificate. If email address is set to 'null', no email is put
in certificates.
Quote the DN (") so it is treated as one argument.
Altnames is a string simlar to the DN string but using
alternative names from
RFC3280, i.e. "rfc822Name=<i>email</i>, dNSName=<i>hostname</i>, 
uri=http://<i>whatever</i>, iPAddress=10.56.32.245"
The full list is: otherName, rfc822Name, dNSName, x400Address,
directoryName,
ediPartyName, uniformResourceIdentifier, iPAddress, registeredID
Only rfc822Name, dNSName, iPAddress and uniformResourceIdentifier (uri) is
supported at the moment. Also the MS UPN and GUID are supported.</li>
<li>deluser - removes a user from the database, any issued
certificates remain  active and present in the database.</li>
<li>setpwd - set a new password for a user. The password is stored
as a hash in the database.</li>
<li>setclearpwd - set a clear text
password for a user, needed to generate  certificates batch-wise.</li>
<li>setuserstatus - sets status of a user, users can only apply
for certificates when their status is NEW. finduser - find a user in the database
and lists details.</li>
<li>listnewusers - lists all users with status NEW.</li>
<li>listusers - lists users with specified status (give command to
see list of status codes).</li>
<li>revokeuser - revokes a user and all certificates issued to the
user.</li>
<li>keyrecover - recovers keys related to a specific certificate.</li>
<li>keyrecovernewest - recovers the latest keys for a user.</li>
</ul>
</p></subsection>

<subsection name="Other Configuration">
<p>
If you want to change the baseurl of the admin-web after installation use the command:
</p>
<source>
bin/ejbca.sh setup setbaseurl computername applicationpath
Ex: bin/ejbca.sh setup setbaseurl localhost ejbca
</source>
<p>
To change ports (default public http=8080, public https=8442, private https=8443) you must edit 
ejbca.properties. Change the properties httpserver.pubhttp, httpserver.pubhttps and httpserver.privhttps.
After changing, run 'ant deploy' and re-start the application server.
</p></subsection>

<subsection name="Configuring Publishers (LDAP)">
<p>
LDAP setup is explained in HOWTO-LDAP.txt
</p></subsection>

<subsection name="Batch creation of certificates">
<p>
Certificates can be created batch-wise with EJBCA. The class
se.anatom.ejbca.batch.BatchMakeP12 creates keystore files for
all users designated as NEW or FAILED in the local RA database. 
To be able to batch generate certificates, the users must be registered 
with clear text passwords. To set a clear text password for a user use
</p>
<source>
bin/ejbca.sh.sh ra setclearpwd username password
</source>
<p>
To generate keystore files for all users with status NEW or FAILED, run 
</p>
<source>
bin/ejbca.sh batch 
</source>
<p>
This will generate files for users if their clear text passwords are NOT null.
</p><p>
Without arguments 'batch' generates keystore files for all NEW or FAILED users.
To generate a keystore file for a specific user, enter command
</p>
<source>
bin/ejbca.sh batch username
</source>
<p>
Generated keystore files are stored in a subdirectory (to the
current directory) called 'p12'. If the directory does not exist, 
it will be created.
Make sure this directory is WELL protected, since the
information contained in keystore files are secret (private keys).
The format of keystores generated, PKCS12, JKS or PEM, is defined when adding the 
user in the database (using 'bin/ejbca.sh ra adduser' or the admin-GUI).
</p></subsection>

<subsection name="Fetching certificates and CRLs">
<p>
Certificates and CRLs can be fetched through the web-interface
as defined in
 'webdist/index.html'. They can also be fetched directly from
 the 'CertificateStoreSession' session bean or using the command 
 'bin/ejbca.sh ca getcrl'
</p></subsection>

<subsection name="Other deployment scenarios">
<p>
EJBCA can be run with servlets and EJBs or only with EJBs. The
servlets are only a publicly available front-end to the beans. 
If the CA is deployed integrated in another J2EE application, 
this front-end may not be needed.
</p></subsection>

<subsection name="Certificate- and EndEntity Profiles">
<p>
CertificateProfiles define different types of certificates, with 
regards to DN-contents, extensions etc. We also have 
EndEntityProfiles, where users are grouped, and you can determine 
which parts of their DN that is already pre-set, and which can be 
altered etc. 
</p><p>
An EndEntityProfile can be connected to specific CertificateProfiles 
so users belonging to a specific EndEntityProfile can only get 
certificates from the specified CertificateProfile.
</p></subsection>
</section>

<section name="Adding your own public pages">
<p>
Put your files (static html is easy) under publicweb/root, do a full build and re-deploy. 
The indexfile under publicweb/root is the one shown on http://<i>ejbcahost</i>:8080/ejbca, 
so you can add a subdir under there.
</p></section>

<section name="Using the demo servlet">
<p>
There is a demo servlet that will accept any incoming post, create a user with a unique username, and instantly
send back a certificate. The entity- and certificate profiles used are sent as parameters in the post.

To set up the demo servlet:
</p>
<ol>
<li>Find out the CA id of the CA you want to use for signing of the demo certificates. Use the admin-GUI or 'ejbca.sh ca listcas' to find the integer value that is the CA id.</li>
<li>Configure the CA id in src/java/se/anatom/ejbca/apply/DemoCertReqServlet.java, it's the parameter DEFAULT_DEMOCAID.</li>
<li>Edit src/publicweb/apply/WEB-INF/web.xml and uncomment the two sections for the demo servlet.</li>
<li>If using UTF-8 to display the web-page containing the demo form to the users, change ISO-8859-1 to UTF-8 for the env-entry 'contentEncoding'. Otherwise national characters in names will be encoded/displayed incorrectly in the certificates.</li>
<li>Deploy with 'ant deploy'.</li>
<li>Create an end entity profile and a certificate profile that should be used for the demo certificates.</li>
<li>Create a demo apply page containing something similar to the sample form below for Mozilla/Firefox. There sre some demo_xx scripts under src/publicweb/apply.</li>
</ol>
<source>
&lt;form name="demoreq" action="http://127.0.0.1:8080/ejbca/publicweb/apply/democertreq" method="post">
  Please fill out the form and click &lt;b>Enroll&lt;/b> to receive your certificate.
  Read our &lt;a href="http://www.primekey.se/primekey/en/Demo.html">privacy policy&lt;/a>.&lt;br>
  &lt;input name="certificateprofile" value="DemoCertProfile" type="hidden">
  &lt;input name="entityprofile" value="DemoEntityProfile" type="hidden">&lt;br>
  &lt;br>
  Full name:
  &lt;input name="user" value="C=SE,O=PrimeKey Solutions AB,OU=Demo,CN=" size="25" maxlength="60" class="input" type="text">
  &lt;p align="left"> E-mail:
  &lt;input name="email" size="25" maxlength="60" class="input" type="text">
  &lt;input name="includeemail" value="true" type="hidden">
  &lt;/p>
  &lt;p align="left"> Choose key length from the list below. The default is recommended in most cases. &lt;br>
  &lt;br>
  &lt;keygen type="hidden" name="keygen" value="challenge">
  &lt;/p>&lt;p align="left">
  &lt;input value="Enroll" name="submit" type="submit">
&lt;/form>
</source>
<p>
You can use some hidden fields and some java script to for example only ask for a name, and concatenate it with a hidden partial DN to produce
a full dn for the 'user' parameter. Use your imagination!
</p>
</section>

<section name="Samples">
<p>
A collection of samples are in the directory
src/java/se/anatom/ejbca/samples.
</p></section>

<section name="Troubleshooting">
<p>
Add Debug output from the console administration commands by
replacing:
</p>
<source>
    log4j.rootCategory=INFO, Console
</source>
<p>
in the file 'log4j.properties' with:
</p>
<source>
    log4j.rootCategory=DEBUG, Console
</source>
</section>

<section name="Extra info about the admin-GUI">
<p>
If you had problems using the install script this small part describes brefly 
what the setup of the adminweb does. It's explained using out-of-the-head commands so don't expect it to work
by copying and pasting these commands, it just something to look at.
</p><p>

0. Set the baseurl of the server with the command 'setup.sh/cmd setbaseurl <i>computername</i> <i>applicationpath</i>'
Set the BASEURL to reflect your
hostname, to be able to use the adminpages from external
machines, this must be
a real hostname or ip-address.
Run 'ant deploy' to install the changes.
</p><p>

1. Tomcat: Copy src/appserver/jboss/tomcat55/server.xml (if using JBoss 4.0.2 or greater) 
to <br></br>$JBOSS_HOME/server/default/deploy/jbossweb-tomcat41.sar/META-INF/jboss-service.xml.
</p><p>
Edit the file so 'keyStorePass' is the
same as the password you specify below for 'tomcat'.
</p><p>
2. Edit parameters in ejbca.properties.
</p><p>
3. Create a tomcat server keystore with the 'ejbca.sh batch' tool
(this can also be done with Suns 'keytool' by creating a keystore and then
generating a certificate request that is processed by EJBCA, and last import
the returned certificate and the CA-certificate into the keystore).
</p><p>
Create a user in EJBCA, DN="C=SE,O=PrimeKey,CN=<i>your-host-name</i>".
</p>
<source>
bin/ejbca.sh ra adduser tomcat foo123 "C=SE,O=PrimeKey,CN=your-host-name" null caname null 1 3
</source>
<p>
Set a clear text password for the tomcat:
</p>
<source>
bin/ejbca.sh ra setclearpwd tomcat foo123
</source>
<p>
Generate a JKS-keystore for tomcat:
</p>
<source>
bin/ejbca.sh batch tomcat
</source>
<p>
4. Name the generated keystore 'tomcat.jks' and put in
$JBOSS_HOME/server/default/conf/keystore.
</p><p>
5. Download the CA certificate in PEM-format from
http://localhost:8080/ejbca/publicweb/webdist/cacert.jsp (call
it ejbca-ca.pem).
</p><p>
6. Add the EJBCA CA certificate to the Java trust-keystore in $JAVA_HOME/jre/lib/security/cacerts
</p>
<source>
keytool -import -trustcacerts -file ejbca-ca.pem -keystore $JAVA_HOME/jre/lib/security/cacerts -storepass changeit
</source>
<p>
7. Create a user for EJBCA admin with CN=SuperAdmin and the
RAADMIN bit (temporarily CN=SuperAdmin gives admin rights).
</p>
<source>
bin/ejbca.sh ra adduser raadmin foo123 "C=SE,O=PrimeKey,CN=SuperAdmin" null caname null 65 1
</source>
<p>
Alternative:
Create a PKCS12 file with EJBCA for a user with CN=SuperAdmin
and the RAADMIN bit (temporarily CN=SuperAdmin gives adminrights).
</p>
<source>
bin/ejbca.sh ra adduser raadmin foo123 "C=SE,O=PrimeKey,CN=SuperAdmin" null caname null65 2
bin/ejbca.sh ra setclearpwd raadmin foo123
bin/ejbca.sh batch
</source>
<p>
8. Fetch the certificate using your browser a
http://localhost:8080/ejbca/publicweb/apply
</p><p>
Alternative:
Install the generated PKCS12 (p12/superadmin.p12) file in the
browser.
In Mozilla this is done by Edit->Preferences->Privacy&amp;Security->
Certificates->Manage Certificates->Import
In IE it is done by double-clicking on the .p12 file.
</p><p>
9. Start JBoss.
</p><p>
10. Go to https://<i>hostname</i>:8443/ejbca
</p><p>
Reference: to generate a JKS with keytool
</p>
<source>
keytool -genkey -alias tomcat -keystore tomcat.jks -keyalg RSA -dname "C=SE,O=AnaTom,CN=hostname" -storepass foo123
keytool -certreq -alias tomcat -keystore tomcat.jks -sigalg SHA1WithRSA -storepass foo123 -file tomcat.req
bin/ejbca.sh ra adduser tomcat foo123 "C=SE,O=AnaTom,CN=hostname" null caname null 1 JKS
bin/ejbca.sh ca processreq tomcat foo123 tomcat.req tomcat.pem
bin/ejbca.sh ca getrootcert ca.der -der
keytool -import -trustcacerts -alias cacert -file ca.der -keystore tomcat.jks -storepass foo123
keytool -import -alias tomcat -file tomcat.pem -keystore tomcat.jks -storepass foo123
</source>
<p>
run as root:
</p>
<source>
keytool -import -trustcacerts -file ca.der -keystore $JAVA_HOME/jre/lib/security/cacerts -storepass changeit
</source>
</section>



</body>
</document>
