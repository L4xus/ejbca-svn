<?xml version="1.0"?>
<document>
  <properties>
    <title>Security</title>
  </properties>
<body>
<section name="EJBCA SECURITY">
<p>
Security is CRITICAL for a CA. Protection of the CAs private key is essential,
 since compromise of the CAs private key will let anyone issue false
 certificates, which can be used to gain access to systems relying on the CA for
 authentication and other security services.
 </p>
 <p>
After realizing this, please read on and take a pragmatic approach to security
 suitable for your policy, application and environment.
</p></section>

<section name="Securing JBoss">
<p>
JBoss has description how to secure a default installation of JBoss. You should read this document before putting
your application in production.
</p><p>
Check out: <a href="http://wiki.jboss.org/wiki/Wiki.jsp?page=SecureJBoss">SecureJBoss</a>
</p>
<p>You should at least disable the public admin console by removing jmx-console.war, management/console-mgr.sar and 
jbossweb-tomcat55.sar/ROOT.war from deploy.
</p>
<p>Alternatively protect it with a password set in
jboss/server/default/deploy/management/console-mgr.sar/web-console.war/WEB-INF/classes/web-console-users.properties
</p>
<p>You should also make sure all sensitive files can only be read by the JBoss user. These files are for example the server.xml 
file where the password for the SSL keystores are stored.
</p>
</section>

<section name="Setting up SSL">
<p>
To set upp SSL communication for all HTTP traffic to the server 
follow the instructions for installing EJBCA, this will set up HTTPS 
for the admin-GUI automatically.
 </p><p>
This will set up an SSL port open for the public at 8442 and an SSL port
which require client certificate to access the administration GUI at 8443.
</p>
</section>

<section name="Java truststore">
<p>
Acceptable CA certificates for clients are stored (by java) in $JAVA_HOME/jre/lib/security/cacerts. 
There are however many others present as shipped by Java, which means that anyone with a certificate issued 
by one of those CAs normally can access port 8443 on you JBoss server. They can not access the admin-GUI however,
since EJBCA checks authorization. 

When EJBCA deploys, it generates a custom truststore that is used by JBoss. 
So the certificates available in $JAVA_HOME/jre/lib/security/cacerts are NOT trusted.

If using another application server than JBoss, check the trust keystore contents of you application server so 
you don't trust too many issuers. 
</p>
<p>
You can create a new Java trust store with the command:
</p>
<source>
ant javatruststore
</source>
<p>
The trust store will be stored as p12/truststore.jks
</p>
<p>
Manual steps to creating a java trust store:
</p>
<source>
keytool -import -alias AdminCA1 -trustcacerts -file root.der -keystore /home/jboss/java/cacerts
</source>
<p>
Where root.der is the root certificate from EJBCA that you saved, for instance with the command:
</p>
<source>
bin/ejbca.sh ca getrootcert AdminCA1 root.der -der
</source>
<p>
AdminCA1 is the name of your CA that you are using for server and administrator certificates in EJBCA.
</p>
</section>

<section name="Configuring for security">
<p>
The easiest way to keep the installation secure is to block all default JBOSS ports
 (1099, 1476, 4444, 8082, 8083) from the outside and only allow traffic to Tomcat ports (8442 and 8443).
This is because the public end-user actions can be performed through the public
servlets, while administration tasks are performed directly on the beans.
</p>
<p>
See 'ejbcafirewall.sh' for an example how to configure an Iptables firewall in
Linux for protecting EJBCA running on JBoss.
</p>
<p>
See <a href="http://www.jboss.org/">JBoss documentation</a> for a list of ports used in JBoss, for information about
 security in JBOSS/EJB and for how to set up SSL with JBOSS.
See this <a href="http://www.javaworld.com/javaworld/jw-08-2001/jw-0831-jaas_p.html">JavaWorld article</a> for more
 examples about setting up role-permissions.
</p>
</section>

<section name="File permission">
<p>
The application server should be run as a special user. Files should be protected 
so the ONLY the user running the application server can access them. 
</p><p>
By default JBoss is probably unpacked with read access to all, you should issue:
</p>
<source>
umask 077
chmod -R go-rwx *
</source>
<p>
In the JBOSS_HOME directory, to make the files readable only by the jboss user, and make this the default permission
for files copied here.
</p>
<p>
If PKCS12 files are generated for users, the subdirectory ('p12') where
they are stored and the generated files should be protected in the same way.
</p></section>

<section name="User authentication">
<p>
Default user authentication for enrollment in EJBCA is done with a one-time
password scheme. When a user has enrolled for a certificate his status is
set to GENERATED and the password can not be used again to enroll for a new
certificate. An administrator must re-set the users status and preferably
set a new password.
</p><p>

If implementing other user authentication scenarios you should remember
that certificate authentication is stronger than password based
authentication (for example LDAP). If EJBCA users authenticate 
with some other (not one-time) password instead of usual one-time password, 
a strong authentication mechanism will be build on a weaker one.
</p></section>

<section name="Datasource passwords">
<p>
If you do not like to have your DataSource password available in clear text in EjbcaDS.xml, 
there is an article in the JBoss Wiki about encrypting them:
<br/>
<a href="http://wiki.jboss.org/wiki/Wiki.jsp?page=EncryptingDataSourcePasswords">
http://wiki.jboss.org/wiki/Wiki.jsp?page=EncryptingDataSourcePasswords</a>
</p>
</section>

<section name="SSL connections in MySQL">
<p>
<a href="http://dev.mysql.com/doc/refman/5.0/en/secure-using-ssl.html">
http://dev.mysql.com/doc/refman/5.0/en/secure-using-ssl.html</a>
</p>
</section>

<section name="Other precautions">
<p>
Database transaction logs in MySQL:
<br/>
<a href="http://dev.mysql.com/doc/refman/5.0/en/binary-log.html">
http://dev.mysql.com/doc/refman/5.0/en/binary-log.html</a>
</p>
<p>
System accounting in Linux:
<br/>
See your distribution for details about their package, below are general links.
<br/>
<a href="http://www.nic.com/~dave/SecurityAdminGuide/SecurityAdminGuide-5.html">
http://www.nic.com/~dave/SecurityAdminGuide/SecurityAdminGuide-5.html</a>
<a href="http://www.hsc.fr/ressources/presentations/linux2000/linux2000-18.html.en">
</a>
</p>
</section>

</body>
</document>

