<?xml version="1.0"?>
<document>

  <properties>
    <title>Howto</title>
  </properties>

<body>
  <section name="Howto documents">
    <p>
    A number of HOWTO documents are available in the <strong>doc/howto</strong> directory in the source distribution.
    </p>
    </section>
    
  <section name="SensorNet PKI">
    <p>
    This excellent HOWTO on PKI in general, LDAP, email and server setup has been kindly contributed by SensorNet. Please read this notice!
    </p>
    <note>
These pages were created by the SensorNet Project at Oak Ridge National
Laboratory (ORNL), Oak Ridge, Tennessee, USA to provide help for their
instance of EJBCA. You are welcome to modify these pages for your own
use, but please remove any links to the SensorNetCA web pages so that we
do not get excess traffic. Please tell your users not to use the URLs in
the screen shots, and please credit Oak Ridge National Laboratory. ORNL
is operated by UT-Battelle for the U.S. Department Of Energy.
    </note>
    <p>
    <ul>
    <li><a href="sensornet/infrastructure.html">SensorNet certificate infrastructure </a></li>
    <li><a href="sensornet/short-course.html">A short course on certificates</a></li>
    <li><a href="sensornet/ca-enrollment.html">Certificate Authority Enrollment</a></li>
    <li><a href="sensornet/CertificateInfrastructure.html">SensorNet certificate infrastructure basics and enrollment</a></li>
	</ul>
	</p>
	
	<subsection name="Managing certificates">
	<p>
	<ul>
    <li><a href="sensornet/MozillaHowTo/MozillaCertificateManagement.html">Using Mozilla</a></li>
    <li><a href="sensornet/IEHowTo/ManagingCertificateIE.html">Using Microsoft Internet Explorer</a></li>
    </ul>
    </p>
	</subsection>

	<subsection name="Configuring email client and LDAP">
	<p>
	<ul>
    <li><a href="sensornet/LDAPHowTo/SecureEmailNS-Moz/LDAPandMail.html">Using Mozilla</a></li>
    <li><a href="sensornet/LDAPHowTo/SecureEmailO/SecureEmailUsingOutlook.html">Using Microsoft Outlook</a></li>
    <li><a href="sensornet/LDAPHowTo/SecureEmailOE/Securee-mail%20OutlookExpress.html">Using Microsoft Outlook Express</a></li>
    </ul>
    </p>
	</subsection>

	<subsection name="Server certificates">
	<p>
	<ul>
    <li><a href="sensornet/IISHowTo/ServerCert.html">Microsoft IIS</a></li>
    <li><a href="sensornet/howto-server.html">Apache HTTPd and Unix servers</a></li>
    <li><a href="sensornet/howto-tomcat.html">Apache Tomcat</a></li>
    </ul>
    </p>
    </subsection>
    
  </section>

  <section name="Microsoft smart card logon">
  <p>
  PrimeKey has made a detailed guide how you set up and configure Windows and EJBCA for Windows SmartCard Logon.
  The guide is divided in three section, introduction, Windows configuration and PKI configuration. 
  The reason for this division is that you can give the Windows guide to the windows administrator, who can easily
  follow this guide on the Windows servers, while the PKI can be a hosted service or operated by another department.   
  </p>
  <p>
  <ul>
  <li><a href="http://download.primekey.se/ejbca/smartcardlogon/EJBCA-SmartCardLogon-Guide.pdf">Introduction</a></li>
  <li><a href="http://download.primekey.se/ejbca/smartcardlogon/EJBCA-SmartCardLogon-Guide-Windows.pdf">Windows configuration</a></li>
  <li><a href="http://download.primekey.se/ejbca/smartcardlogon/EJBCA-SmartCardLogon-Guide-PKI.pdf">PKI configuration</a></li>
  </ul>
  </p>
  <p>
  The scripts and profiles can be fetched <a href="http://download.primekey.se/ejbca/smartcardlogon/ReleasePackage">here</a>.
  </p>  
  
  </section>
  
  <section name="Migrating an OpenSSL based CA">
  <p>This article is written for an older version of EJBCA. Now there is a command to import a PKCS#12 file, also in the Admin-GUI under "Edit Certificate Authorities->Import CA keystore".
  <br/><br/>The cli command to import a PKCS#12 file is now called <i>bin/ejbca.sh ca importca ...</i>.
  <br/>The cli command to import user certificates is now called <i>bin/ejbca.sh ca importcert ...</i>. 
  </p><p>
  Read the <a href="http://www.csita.unige.it/software/free/ejbca/">howto</a> at Csita.
  </p>
  </section>
  
  <section name="EJBCA and Cisco IOS">
  <p>This howto is contributed by Bruno Bonfils.</p>
  <p>
  There is a <a href="http://www.ipflow.utc.fr/index.php/Cisco_7200_Simulator">Cisco 7200 emulator</a> available.
  </p>
  <p>Here is the IOS config related to the CA:
  </p>
  <source>
!
crypto ca trustpoint FMSCA
enrollment url http://your.ca.host.name:8080/ejbca/publicweb/apply/scep
serial-number
source interface Ethernet0
auto-enroll regenerate
!
  </source>
  <p>
  <ul>
    <li>The enrollment line tell how (the method, here an http url) to contact the PKI software. Note: you must omit the pkiclient.exe filename at the end which is automagically add by IOS.</li>
    <li>The serial-number tells IOS to include the serial number in the request.</li>
    <li>The name of the trustpoint you use MUST MATCH exactly the shortname of your CA in EJBCA (here FMSCA).</li>
  </ul>
  Once you have that, use the command:
  </p>
  <source>
# crypto ca authenticate FMSCA  
  </source>
  <p>
  to fetch the CA certificate.
  </p>
  <p>
  Then, login to EJBCA, and create a new entity profile that looks like:
  </p>
  <p>
  <img alt="End Entity profile for IOS" src="images/ios-profile.jpg"/>
  </p>
  <p>
  Then, do the password enrollment with the command:  
  </p>
  <source>
# crypto ca enroll FMSCA
  </source>
  <p>
  Check your ejbca logs, you shoud see something like:
  </p>
  <source>
ERROR [PKCS10RequestMessage] No CN in DN: SN=12013150+unstructuredName=your.ciscobox.hosts.name
ERROR [Log4jLogDevice] October 19, 2005 9:48:33 AM CEST, CAId : 0, CA, EVENT_ERROR_USERAUTHENTICATION, Administrator : \
PUBLICWEBUSER, IP Address : 192.168.134.1, User : 12013150, Certificate : No Certificate Involved, Comment : \
Got request for nonexisting user: 12013150
  </source>
  <p>
  So, you know you must add an entity using the serial number as username, the password you define in IOS, and serialNumber/unstructuredNamed as subject DN fields.
  </p>
  <p>
  After adding the end entity, do the password enrollment again. If you see this you have enrolled succesfully:
  </p>
  <source>
saroumane#sh crypto ca cert
Certificate
  Status: Available
  Certificate Serial Number: 426FA96340F5D2CA
  Certificate Usage: General Purpose
  Issuer:
    c=FR
    o=Fimasys
    cn=Fimasys Security CA
  Subject:
    Name: your.ciscobox.hosts.name
    Serial Number: 12013150
    serialNumber=12013150
    hostname=your.ciscobox.hosts.name
  Validity Date:
    start date: 08:58:28 CET Oct 19 2005
    end   date: 09:08:28 CET Oct 19 2007
  Associated Trustpoints: FMSCA

CA Certificate
  Status: Available
  Certificate Serial Number: 7AA2B9942CD0D362
  Certificate Usage: Signature
  Issuer:
    c=FR
    o=Fimasys
    cn=Fimasys Security CA
  Subject:
    c=FR
    o=Fimasys
    cn=Fimasys Security CA
  Validity Date:
    start date: 07:29:35 CET Oct 17 2005
    end   date: 07:39:35 CET Oct 15 2015
  Associated Trustpoints: FMSCA  
  </source>

  </section>

  <section name="OpenSSH and X509 authentication">
  <p>Bruno Bonfils has written this excellent howto on using SSH with certificates from EJBCA:</p>
  <p>
  <a href="http://asyd.net/home/geeklog/2006/08/24/openssh_x509">OpenSSH and X509 authentication</a>.
  </p>
  <p>
  Another interesting link is this one:
  <br/>
  <a href="http://alon.barlev.googlepages.com/openssh-pkcs11">PKCS#11 support in OpenSSH</a>.
  </p>
  </section>
  
  <section name="Configure EJBCA with Sun Access Manager">
  <p>EJBCA can issue certificates to be used when protecting sites using Sun's Access Manager. 
  EJBCA will then be configured to publish issued certificates to the AM LDAP server.
  </p>
  <p>The configuration is really simple and after installing EJBCA consists of only these steps:
  <ul>
  <li>Create a Publisher, AMPublisher with the following properties:
    <ul>
      <li>Publisher Type: LDAP V3 Search Publisher</li>
      <li>Base DN: The Base DN in the AM LDAP, for example dc=company,dc=com</li>
      <li>Login parameters to the AM LDAP server</li>
      <li>Create Nonexisting Users: false</li>
      <li>Modify Existing Users: true</li>
      <li>Add multiple certificates per user: false</li>
      <li>Remove certificates when revoked: true</li>
      <li>Remove ldap user when certificate revoked: false</li>
      <li>LDAP location fields from cert DN: CN, Common Name (not really used)</li>
      <li>Suffix base DN of the LDAP Search: same as Base DN, for example dc=company,dc=com</li>
      <li>LDAP filter of the search: uid=$USERNAME</li>
    </ul>
  </li>
  <li>Create a Certificate Profile, AMUser:
    <ul>
      <li>Use ENDUSER as template when creating the profile</li>
      <li>Extended Key Usage: Client Authentication</li>
      <li>Publishers: AMPublisher</li>
    </ul>
  </li>
  <li>Create an End Entity Profile, AMUser:
    <ul>
      <li>Subject DN Fields: UID, CN, O, C is sufficient</li>
      <li>Default Certificate Profile: AMUser</li>
      <li>Available Certificate Profiles: AMUser</li>
    </ul>
  </li>
  </ul>
  The procedure when adding a new user is now simple:
  <ul>
    <li>Create a new user in AM</li>
    <li>Create a new user in EJBCA with the same username and UID as the username in AM</li>
    <li>Get the certificate for the user, for example with the user's browser on the public web pages of EJBCA</li>
  </ul>
  When the users certificate is created, the certificate is published to the AM LDAP server and certificate authentication can be configured and used in AM.
  </p>
  </section>
  <section name="Setting up an Apache Web Server as a proxy in front of EJBCA">
  <p>
  This section will show you how to use an Apache Web Server Proxy in front of EJBCA.
  The resulting server will
  </p>
  <ul>
  <li>Display EJBCA public web at https://ca-server.company.local/</li>
  <li>Redirect all HTTP-requests to HTTPS, except for OCSP and CRL.</li>
  <li>Require a client SSL certificate when accessing https://ca-server.company.local/adminweb/</li>
  <li>Be able to loadbalance requests</li>
  <li>Still answer to requests on https://ca-server.company.local/ejbca/*</li>
  </ul>
  <p>
  This example was created on Ubuntu 64-bit Server 7.10 using the Apache Web Server 2.2 package,
  but should be easy to adapt to any system able to run Apache.
  </p>
  <p>
  Start by installing EJBCA as normal. If you intend to have the CA on the same machine as
  the proxy you should modify $EJBCA_HOME/conf/web.properties to only listen to localhost
  </p>
<source>
  httpsserver.bindaddress.pubhttp=127.0.0.1
  httpsserver.bindaddress.pubhttps=127.0.0.1
  httpsserver.bindaddress.privhttps=127.0.0.1
</source>
  <p>
  Install the Apache web server and enable required modules:
  </p>
<source>
  $sudo su
  #apt-get install apache2
  #cd /etc/apache2/mods-enabled/
  #ln -s ../mods-available/proxy.load proxy.load
  #ln -s ../mods-available/proxy_ajp.load proxy_ajp.load
  #ln -s ../mods-available/proxy_balancer.load proxy_balancer.load
  #ln -s ../mods-available/rewrite.load rewrite.load
  #ln -s ../mods-available/ssl.load ssl.load
</source>
  <p>
  Generate the SSL-certificate for Apache. This should be issued by the same CA that issued the Tomcat SSL
  certificate (AdminCA1 in the default configuration). This can be done with the EJBCA CLI:
  </p>
<source>
  $ cd $EJBCA_HOME
  $ bin/ejbca.sh ra adduser apache-ssl foo123 "CN=ca-server.company.local,O=EJBCA Sample,C=SE" "" AdminCA1 "" 1 PEM
  $ bin/ejbca.sh ra setclearpwd apache-ssl foo123
  $ bin/ejbca.sh batch
  $ ls p12/pem/ca-server.company.local*
  p12/pem/ca-server.company.local-CA.pem  p12/pem/ca-server.company.local-Key.pem  p12/pem/ca-server.company.local.pem
</source>
  <p>
  Configure the default virtual host-file /etc/apache2/sites-enabled/000-default
  </p>
<source>
NameVirtualHost *:80
&lt;VirtualHost *:80&gt;
        DocumentRoot /var/www/

        # Proxy requests to EJBCA instances (only one on local machine configured)
        &lt;Proxy balancer://mycluster-kerb&gt;
                BalancerMember ajp://localhost:8009/ejbca/
        &lt;/Proxy&gt;
        ProxyPass / balancer://mycluster-kerb/

        RewriteEngine   On
        # Redirect all but the CRL Distribution Point, OCSP and Helthcheck to HTTPS
        RewriteCond     %{THE_REQUEST} !(/publicweb/webdist/certdist.*cmd=crl|/publicweb/status/)
        RewriteRule     ^(.*)$ https://%{SERVER_NAME}$1 [L,R]
        # Treat reqeusts to / and /ejbca/ as the same. Required by EJBCA's Admin Web.
        RewriteCond     %{THE_REQUEST}  /ejbca/
        RewriteRule     ^/ejbca/(.*)$ /$1 [PT]

        # Configure log
        LogLevel warn
        ErrorLog /var/log/apache2/error.log
        CustomLog /var/log/apache2/access.log combined
&lt;/VirtualHost&gt;

NameVirtualHost *:443
&lt;VirtualHost *:443&gt;
        DocumentRoot /var/www/

        RewriteEngine   On
        # Treat reqeusts to / and /ejbca/ as the same. Required by EJBCA's Admin Web.
        RewriteCond     %{THE_REQUEST}  /ejbca/
        RewriteRule     ^/ejbca/(.*)$ /$1 [PT]

        # Configure secure SSL for this server using SSL certificate generated by EJBCA
        SSLEngine on
        SSLCipherSuite HIGH
        SSLProtocol all -SSLv2
        SSLCertificateFile /home/jboss/ejbca/p12/pem/ca-server.company.local.pem
        SSLCertificateKeyFile /home/jboss/ejbca/p12/pem/ca-server.company.local-Key.pem

        # Require Client SSL certificate  for the Admin GUI
        &lt;Location /adminweb&gt;
                SSLVerifyClient require
                SSLVerifyDepth 1
                SSLCACertificateFile /home/jboss/ejbca/p12/pem/ca-server.company.local-CA.pem
        &lt;/Location&gt;

        # Proxy requests to EJBCA instances (only one on local machine configured)
        &lt;Proxy balancer://mycluster-kerb&gt;
                BalancerMember ajp://localhost:8009/ejbca/
        &lt;/Proxy&gt;
        ProxyPass / balancer://mycluster-kerb/

        # Configure log
        LogLevel warn
        ErrorLog /var/log/apache2/error.log
        CustomLog /var/log/apache2/access.log combined
&lt;/VirtualHost&gt;
</source>
  <p>
  Reload the apache configuration and verify that only port 80, 443 and other desired services
  (e.g. a ssh-daemon) are listening on all or external interfaces
  </p>
<source>
  $sudo /etc/init.d/apache2 reload
  $sudo netstat -nap | grep LISTEN | grep -v 127.0.0.1
    tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN     7612/apache2        
    tcp        0      0 0.0.0.0:443             0.0.0.0:*               LISTEN     7612/apache2        
    tcp6       0      0 :::22                   :::*                    LISTEN     3746/sshd
</source>
  <p>
  Even though this looks secure, it is still a good idea to use a firewall as an extra layer of security (e.g. drop malformed packages and
  prevent future services from being exploited).
  </p>
  </section>
</body>
</document>

