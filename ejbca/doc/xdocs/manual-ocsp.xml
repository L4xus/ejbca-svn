<?xml version="1.0"?>
<document>

  <properties>
    <title>OCSP User Guide</title>
  </properties>

<body>

  <section name="OCSP client">
    <p>
This section describes how to build and use the stand alone OCSP and Lookup server client.
</p>
<subsection name="Building the OCSP/Lookup client">
  <p>Using the client toolbox of EJBCA you can easily have a stand alone OCSP client.
  See <a href="manual.html#EJBCA%20client%20toolbox">EJBCA client toolbox</a> for instructions how to build and use the client toolbox.
  </p>
</subsection>
<subsection name="Using the API">
<p>
The best way to learn the API is by looking at the source code, since it is included. The client API is in the class 
org.ejbca.core.protocol.ocsp.OCSPUnidClient.
The command line client can serve as a good sample for using the API and it is in the class
org.ejbca.ui.cli.Ocsp.
</p>
</subsection>
<subsection name="Fnr-Unid mapping">
<p>
For the Unid Lookup part, you must use https with a client certificate with the ocsp client. If you use http with a client certificate
and the OCSP responder is set up to answer Lookup requests, the OCSP client will returns the Fnr. The Fnr will be returned if the certificate 
contains a Unid in the SN component of the SubjectDN, and the Unid has a valid mapping to an Fnr in the OCSP responders Fnr-Unid mapping database.
</p><p>
If the Fnr returned is null, there are several possible errors:
<ol>
<li>The client was not authorized to request an Fnr.</li>
<li>There was no Unid Fnr mapping available.</li>
<li>There was no Unid in the certificate (serialNumber DN component).</li>
</ol>
    </p>
</subsection>
  </section>

  <section name="OCSP stress testing">
  <p>Using the client toolbox of EJBCA you can easily stress test your CAs and OCSP responders.
  See <a href="manual.html#EJBCA%20client%20toolbox">EJBCA client toolbox</a> for instructions how to build and use the client toolbox.
  </p>
  <p>To stress test you can first issue a large number of certificates from the CA using the webservice stress test, and after this
  stress test the OCSP responder with a random selection of all the certificates issued.
  </p>
  <source>
cd clientToolBox-dist
./ejbcaClientToolBox.sh EjbcaWsRaCli stress ...
./ejbcaClientToolBox.sh OCSP stress ...
  </source>
  </section>

  <section name="Monitoring OCSP databases">
  <p>
<a href="manual.html#EJBCA%20client%20toolbox">EJBCA ClientToolBox</a> contains a tool for monitoring
OCSP databases. This tool is stand-alone and based on Java SE JPA that can be configured in
  </p>
<source>clientToolBox-dist/properties/META-INF/persistence.xml.</source>
  <p>
Log4J is used for reporting an can be configured in
  </p>
<source>clientToolBox-dist/properties/log4j.xml.</source>
  <p>
The tool operates using Certificate Profile IDs that are the internal representations of different Certificate
Profiles in EJBCA. When you run the tool it will output all the existing IDs in each OCSP. These IDs is also
shown in the Admin GUI for each CertificateProfile.
  </p>
  <p>
Any detected discrepancy will generate an Log4J ERROR and all errors will be summarized in a report at the end.
If OCSP responders contain certificateProfileIds that are not include in the arguments, these will be shown as
Log4J WARNings.
  </p>
  <p>
Since going through every single CertificateData row in a database is heavy work, it's highly recommended to
use indexes such as
  </p>
<source>create index certificatedata_idx7 on CertificateData(certificateProfileId);</source>
  <p>
for your both the CA database and each OCSP responder.
  </p>
  </section>
</body>
</document>

