$Id: README,v 1.125 2004-03-11 14:13:00 anatom Exp $

This software is OSI Certified Open Source Software.
OSI Certified is a certification mark of the Open Source
Initiative.

EJBCA
=====

EJBCA is a fully functional Certificate Authority built in Java.
Based on J2EE technology it constitutes a robust, high
performance and component based CA. Both flexible and platform independent,
EJBCA can be used standalone or integrated in any J2EE application.

EJBCA Homepage can be found at <http://ejbca.sourceforge.net/>.
Information about contacting the EJBCA team, contributing to
EJBCA, etc can be found through the Homepage.

Documentation can also be found on the homepage.

There is an IRC channel for support at
irc.freenode.net, channel #ejbca.

We encourage and appreciate all contributions. The file
'doc/contributors' contain a list of all people who have donated
their valuable time to EJBCA.

FEATURES
========

- Open Source (LGPL) license.

- Built on the J2EE 1.3 (EJB 2.0) specification.

- Flexible, component based architecture.
- Multiple CAs and levels of CAs, build a complete infrastructure (or several) within one instance of EJBCA.
- Standalone or integrated in any J2EE application.
- Simple installation and configuration.
- Powerful Web based administration GUI using strong authentication.
- Command line administration for scripts etc.
- Individual enrollment or batch production of certificates.
- Server and client certificates can be exported as PKCS12, JKS or PEM.
- Browser enrollment with Netscape, Mozilla, IE, etc.
- Enrollment for other applications through open APIs and tools.
- E-mail notification to new users added by RA.
- Random or manual password for initial user authentication.
- Hard token module for integrating with hard token issuing system (smart cards).
- Supports the Simple Certificate Enrollment Protocol (SCEP).
- Multiple levels of administrators with specified privileges and user groups.
- Configurable certificate profiles for different types and contents of certificates.
- Configurable entity profiles for different types of users.
- Follows X509 and PKIX (RFC3280) standards where applicable.
- Revocation and Certificate Revocation Lists (CRLs).
- Fully supports the Online Certificate Status Protocol (OCSP), including AIA-extension.
- CRL creation and URL-based CRLDistribution Points according to RFC3280.
- Stores Certificates and CRLs in any SQL database (handled by application server).
- Optional multiple publishers for publishing certificates and CRLs in LDAP and other stores.
- Key recovery module to store private keys for recovery for selected users and certificates.
- Component based architecture for publishing certificates and CRLs to different sources.
- Component based architecture for various authorization methods
  of entities when issuing certificates.
- Easy to integrate into large applications for optimal integration into bussiness process.

SECURITY
========

Security is discussed below in the chapter about configuration
and in *SECURITY*.

Please take a minute to thorougly consider the security
implications and make sure you know what you are doing when you are setting
up a CA.

If running on Linux, you should consider using the sample
firewall script provided in 'ejbcafirewall.sh'. If running on Windows, a
similar aproach should be taken with some firewall software/hardware.

DEPENDENCIES
============

For ease of installation most dependencies are distributed with EJBCA.
The minimal requirements to download and install are JBoss and Ant.

Bouncycastle
------------

For cryptography and creation of certificates and CRLs, EJBCA
uses the open source JCE crypto provider from Bouncy Castle,
<http://www.bouncycastle.org/>.

The provider is distributed with EJBCA as 'bcprov-
jdk14-<version>.jar' and 'bcmail-jdk14-<version>.jar'.  
The latest version of the JCE provider can always be obtained from Bouncy Castle.

Bouncy Castle JCE is Copyright (c) 2000 The Legion Of The Bouncy
Castle, <http://www.bouncycastle.org/>.
See doc/LICENSE-BC for license conditions of the Bouncy Castle JCE.

JBoss
-----

EJBCA is developed on the open source J2EE application server
JBoss
<http://www.jboss.org/>. We expect a JBoss with an integrated
Servlet engine.

JBoss and jars from JBoss are Copyright (c) 1999-2001 jboss.org.

Jar files needed to run EJBCA is distributed with EJBCA. 
See doc/LICENSE-JBOSS for license conditions of JBoss.

Ant and Log4J
-------------

Ant (used for building) and Log4j (used for logging) is
Copyright
1999-2001, Apache Software Foundation and can be obtained from
<http://ant.apache.org/> and <http://jakarta.apache.org/>.

Jar file for Log4j is distributed with EJBCA. 
See doc/LICENSE-APACHE for license conditions of Ant and Log4j.

JUnit
-----

For automated testing JUnit is used and can be obtained from
<http://www.junit.org/>. Jar file needed to run JUnit tests is
distributed with EJBCA. 

JUnit is released under the IBM Public License
<http://oss.software.ibm.com/developerworks/opensource/license10.html>.

HttpJUnit
----------
Httpjunit is an extension to junit used to test web pages and forms. 
Httpjunit can be fund on httpjunit.sourceforge.net

OpenLDAP
--------

OpenLDAP is an Open Source LDAP directory which can be obtained
from
<http://www.openldap.org/>. This jar fil is needed by EJBCA to store
certificates and CRLs in LDAP directories. The jar is redistributed
with EJBCA.  See doc/LICENSE-JLDAP for license conditions of OpenLDAP.

PLATFORMS
=========

EJBCA is completely written in Java and should as such run on any
platform where a J2EE server runs.  Development and testing is
performed on Linux and Windows 2000 platforms.

QUICK START GUIDE
=================

Build
=====

Needed to build and run are:
JDK 1.4.x
JBOSS 3.2.x or 3.0.x 
Ant 1.5.x to build (http://jakarta.apache.org/ant/)

Simply unpack the archive in a directory and run "ant" to build
everything.

Set the environment variable JBOSS_HOME to the directory where
JBoss's root is
 (/jboss-<version>). This is done so the deploy script will
 know where files are to be copied, they are copied to the
 $JBOSS_HOME/server/default/deploy directory.

You can also build javadoc on all APIs used with 'ant javadoc'.

Configure
---------

Now when everything is prepared, there are a few things to
configure before starting JBOSS and running everything.

FOR THE IMPATIENT:

1. Build and deploy everything with 'ant deploy'.
2. Start JBoss, ejbca-ca.ear should be deployed.
3. execute 'install.sh/cmd' in the ejbca directory.  The installation script
 will use the default javacacerts password. If you have changed it (from changeit) 
 it you should use 'install.sh/cmd <javacacerts password>'.

If you want to run a thorough test of your new CA, run the automated tests with 'runtest.sh/cmd'.

NOTE-1: After running tests with 'runtest.sh/cmd', you might
consider deleting
the database since some leftovers are left in the database.
Runtest will create and revoke some testcertificates, so after
runtest your CRLs will be populated with a few entries.
'runtest.sh/cmd should not be run on a production system, only
to test the installation.

It is also possible to deploy EJBCA without the Web admin GUI, 
use 'ant deploy_nora'.

FOR THE OTHERS:

If another database than the default Hypersonic database (for
example MySQL) should be used, configure the database to be used
in JBoss. See doc/HOWTO-<database>.txt files for this.

Setting up your own CA:

Start JBoss:
At this point it is a good idea to start JBoss.

You CA can be either a root CA, a subordinate CA to another CA in EJBCA 
or a subordinate CA to an external CA. Initially you shoud setup a RootCA so 
you can access the admin-GUI.

Root CA:
run 'ca.sh/cmd init' and enter all required parameters.
Ex: 'ca init TestRoot "C=SE,O=PrimeKey,CN=EJBCA" 2048 365 2.5.29.32.0' 
will create a root CA with the DN 'C=SE,O=PrimeKey,CN=EJBCA'. The
keylength is
 2048 bit (RSA) and the validity of the root certificate is 365
 days. Quote the DN  so it is treated as one argument.

 PKIX requires that a CRL always is available even if it is
empty. When running 'ca.sh/cmd init' the CA certificate is stored,
and published (if any Publishers are configured), and the initial CRL is created 
and stored/published.


Subordinate CA:
Subordinate CAs is created using the admin GUI.

NOTE! Don't forget to configure JBoss for security! See
'security.txt'.
Security is CRITICAL for a CA.

Note that application for certificates only work when the status
of a user is
 NEW (one time password thing). The status is set to GENERATED
 after a
 certificate has been issued. To issue a new certificate, the
 status must be
 reset to NEW,
which can be done through administration with the RA, 'ra.sh/cmd
setuserstatus
 <username> <status>'. For a list of all available statuscodes
 run 'ra.sh/cmd
 setuserstatus'.
 
Converting OpenSSL CA:
You can convert a PEM-style CA key to a PKCS12file that can be imported in EJBCA.
openssl pkcs12 -export -out server1.p12 -inkey cakey.pem -in ca.pem -name privateKey

Deploy
======
After configuration, if you have edited the xml configuration
files manually, please run "ant deploy" to rebuild jars and wars and deploy them. 
If you are using a deployment tool, this may not be needed, consult your 
documentation for the tool.

If you want to deploy EJBCA without the Web admini GUI use the command 
'ant deploy_nora' instead.

Run
===

Start JBoss with 'run.sh/bat'. JBoss should start up and deploy
ejbca beans and servlets without error messages.

Run the testprograms with 'runtests.sh/cmd' and watch the lovely
debug output and logs in JBoss.

Creating Users
--------------
Users are added in the admin-GUI, 'Add End Entity' or with the cmd-line interface
'ca.sh/cmd adduser'.
The users DN is normally entered as "C=SE,O=MyOrg,OU=MyOrgUnit,CN=MyName".
If a ',' is needed in the DN the comma must be escaped using '\,'.

Create User certificates
------------------------
To enroll for certificates using browsers, open
 http://127.0.0.1:8080/ejbca/publicweb/apply/index.html
 (assuming Tomcat/Jetty
 listens to port 8080) and use the links for your browser.

To enroll for certificates using manual methods (for server
certificates for
 example) open
http://127.0.0.1:8080/ejbca/publicweb/apply/apply_man.jsp and
fill in the form.

Use the admin-GUI or 'ca.sh/cmd' and 'ra.sh/cmd' scripts to administer EJBCA.

Note that application for certificates only work when the status
of a user is
NEW (or FAILED or INPROCESS) (one time password thing). The
status is set to
GENERATED after a certificate has been issued. To issue a new
certificate, the
status must be reset to NEW, which can be done through
administration with the
RA, 'ra.sh/cmd setuserstatus <username> <status>'. For a list of
all available
statuscodes run 'ra.sh/cmd setuserstatus'.
During batch generation of certificates, users with status NEW
or FAILED are
generated. This is due to the possibility that a batch generation for some
reason failed. If it fails
status is set to FAILED and you can try again after fixing the
error.

Create server certificates
--------------------------
The best way to create server certificates is to generate a
PKCS12/JKS/PEM file for the
server.
To do this:

1. Create user with 'ra.sh/cmd'. DN for a server should have the
domain name in
CommonName (CN). Example DN for webserver: "C=SE,O=AnaTom,CN=
www.anatom.se", or
for mailserver "C=SE,O=AnaTom,OU=Engineering,CN=mail.anatom.se". Set the user type to match the kind of token that should be generated for your server.

2. To be able to batch-generate certificates, the batch
generation program must
have access to the users (servers) password in order to request
a certificate on
behalf of the user. Normally the password is stored in hashed
form, so the
password must be stored in clear text form by:
ra.sh/cmd setclearpwd <username> <password>

3. Generate private keys and certificates  by:
batch.sh/cmd

4. Many servers (ex Apache, Tomcat) wants keys and certificates
in PEM-format or
SUN JKS.
To generate PEM-files use user type 4. The PEM-files will be stored in a
separate
subdirectory, 'pem'. The generated PEM-files can be used with
Apache etc,
and are NOT protected by any password.
To generate JKS-files use user type 3. The JKS-files will be stored in the
subdirectory, 'p12' instead of PKCS12-files. The generated JKS-
files can be used
with Tomcat etc, and are protected (both private key password
and keystore
password) by the users password.

Another way is to use openssl to transform a PKCS12 file to PEM-
format.

openssl pkcs12 -in <pkcs12-file> -nodes

copy and paste private key to key-file, first certificate to
server cert-file
and last certificate to CA cert-file (If your CA is a
subordinate CA to another
Root CA, the CA cert-file may need to contain the whole cert
chain). Exactly how
your server wants the files is server-dependent.

Create CRLs
-----------
CRLs should be issued regularly, as defined in the CRL interval in the CAs
profile.

CRLs are created with the 'ca.sh/cmd createcrl <caname>' command.

This job should be scheduled with cron on UNIX (and something
else on Windows).
The job should be scheduled to run as often as the CRL period is
configured to.

Example crontab entry:

PATH=$PATH:/usr/java/jdk1.4.2_01/bin
@daily cd /home/ejbca;/home/ejbca/ca.sh createcrl <caname>;

where '/usr/java/jdk1.4.2_01/bin' is the path to where 'java'
can be found.
'/home/ejbca' is where ejbca is installed and 'ca.sh'
located.

Sample crontab to be installed with 'crontab -e':
--
SHELL=/bin/sh
PATH=
/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
CLASSPATH=$CLASSPATH;/root/ejbca;/root/ejbca/admin.jar
JBOSS_HOME=/usr/local/jboss
# m h dom mon dow command
00 0    * * *   cd /root/ejbca;./ca.sh createcrl TestCA
--

A new CA should always issue an (empty) CRL. This is done when the ca is created
and can also be done by running 'ca.sh/cmd createcrl <caname>'.

Note on CRL Distribution Points (CDPs): it is possible to configure
multiple URLs for CDPs if they are separated by ';'. 
For example: http://cdpurl-1/mycrl.der;http://cdpurl-2/crl.crl

A CRLDistributionPoint for a CA in EJBCA could look like:
http://<host:port>/ejbca/publicweb/webdist/certdist?cmd=crl&issuer=<url-encoded-issuerDN>
(such as the link from the webdist pages)


REFERENCE MANUAL
================

Configuring CA
--------------
Comments are provided in src/ca/ca/META-INT/ejb-jar.xml for all
options available when configuring the CA. Things that can be configured are:
The CA is modular in that all parts are different session beans
which implement
 a specified interface. Another session bean implementing the
 same interface can
 replace any part ot the CA.
Replaceable session beans are RSASession (interface
ISignSession),
 AuthenticationSession (interface IAuthenticationSession),
 CertificateStoreSession (interface ICertificateStoreSession)
 and
 CreateCRLSession (interface IJobRunnerSession).


Options in CreateCRLSession:
none

Options in AuthenticationSession:
-Authentication module. The CA authenticates certification
requests with a
 specified bean implementing the IAuthenticationSession
 interface. The
 default authentication session authenticates towards a local
 databes held by
 the RA.
An example is provided in sampleauth of a remoteely operated
database where
 communication from the CA to the RA is done with a HTTP-based
 protocol.
The Authentication module is configured by exchanging the
session bean
 'AuthenticationSession'.

Options in CertificateStoreSession:
-Datasource to be used when finding things in the database.

Administrating CA
-----------------
The CA has a command line interface ca.sh/cmd. Options are:

* init - Iniitalizes a CA in the beginning or after a rollover.
Stores CA
certificates and publishes first CRL.
* makeroot - creates a new Root CA keystore (only used by Root
CA). - not used in EJBCA3
Quote the DN (") so it is treated as one argument.
* getrootcert - exports the CA certificates to file.
* makereq - generates a certification request for a subCA for
sending to a. - not used in EJBCA3
RootCA. Used to create a keystore for a
subordinate CA. Quote the DN  so it is treated as one argument.
* recrep - used to receive certificates which has been produced
as result of. - not used in EJBCA3
sending a certificate request to a RootCA.
* processreq - processes a certification request for. - not used in EJBCA3
a subordinate CA and creates  a certification reply.
* createcrl - issues a CRL.
* getcrl - retrieves the latest CRL.
* rolloverroot - used to generate a new RootCA certificate using
an existing. - not used in EJBCA3
keypair. This updates the current RootCA keystore.
(only used by Root CA). When this is used, sub-certificates do
not need to be
resigned.
* rolloversub - used to generate a new subCA certificate using
an existing. - not used in EJBCA3
keypair. This updates the current subCA keystore.
When this is used, sub-certificates do not need to be resigned.
* listexpired - List certificates that will expire within a
given number of days.
* exportprofiles - exports entity and certificate profiles to xml-files.
* importprofiles - imports entity and certificate profiles from xml-files.

Configuring RA
--------------
Options in UserAdminSession:
-Datasource to be used when finding things in the database.

Administrating RA
-----------------
The RA has a command line interface ra.sh/cmd. Options are:

* adduser - adds a user to the database, after addition a user
may apply for a
certificate. If email address is set to 'null', no email is put
in certificates.
Quote the DN (") so it is treated as one argument.
Altnames is a string simlar to the DN string nut using
alternative names from
RFC3280, i.e. "rfc822Name=<email>, dNSName=<host name>, uri=<
http://<whatever>"
The full list is: otherName, rfc822Name, dNSName, x400Address,
directoryName,
ediPartyName, uniformResourceIdentifier, iPAddress, registeredID
Only rfc822Name, dNSName and uniformResourceIdentifier (uri) is
supported at the
moment.
* deluser - removes a user from the database, any issued
certificates
remain  active and present in the database.
* setpwd - set a new password for a user. The password is stored
as a hash in
the database.
* setclearpwd - set a clear text
password for a user, needed to generate  certificates batch-
wise.
* setuserstatus - sets status of a user, users can only apply
for certificates
when their status is NEW. finduser - find a user in the database
and lists
details.
* listnewusers - lists all users with status NEW.
* listusers - lists users with specified status (give command to
see list of
status codes).
* revokeuser - revokes a user and all certificates issued to the
user.
* keyrecover - recovers keys related to a specific certificate.
* keyrecovernewest - recovers the latest keys for a user. 

Other Configuration
---------------------

If you want to change the baseurl of the admin-web use the command:
'setup setbaseurl <computername> <applicationpath>'
Ex: ./setup.sh setbaseurl localhost ejbca

Configuring databases
---------------------
The session beans use direct database communication (from a
connection pool) in
some cases. In these cases the JNDI name if the Datasource used
is configured in
ejb-jar.xml and jbosscmp-jdbc.xml, (default 'java:/DefaultDS').

To change the datasource to us a different datasource than
DefaultDS, change all
occurences of DefaultDS via:

ant replaceDS -Dejbca.DS=<your DS>

with <your DS> something like java:/DefaultDS

Configuring Publishers (LDAP)
-----------------------------
To publish certificates and CRLs in an LDAP directory, uncomment
the section
for the session bean 'PublisherSession1' in 'ca/ca/META-INF/ejb-
jar.xml', and
also the section for method permissions for the same session
bean. This will
configure an LDAPPublisherSession so be deployed and when
certificates and CRLs
are created. Don't formget to edit parameters to
'PublisherSession1' to match
your LDAP server.
Additional Publishers can be configured by adding new session
beans called
'PublisherSession2', 'PublisherSession3', etc to ejb-jar.xml.

Batch creation of certificates
------------------------------
Certificates can be created batch-wise with EJBCA. The class
se.anatom.ejbca.batch.BatchMakeP12 creates keystore files for
all users
designated as NEW or FAILED in the local RA database. To be able to batch
generate
certificates, the users must be registered with clear text
passwords. To set a
clear text password for a user use 'ra.sh/cmd setclearpwd
<username>
<password>'.
To generate keystore files for all users with status NEW or
FAILED, run
'batch.sh/cmd'. This will generate files for users if their
clear text passwords
are NOT null.
Without arguments 'batch' generates keystore files for all NEW or
FAILED users.
To generate a keystore file for a specific user, enter command
'batch.cmd/sh
<username>'.
Generates keystore files are stored in a subdirectory (to the
current directory)
called 'p12'. If the directory does not exist, it will be
created.
Make sure this directory is WELL protected, since the
information contained
in keystore files are secret (private keys).
The format of keystores generated, PKCS12/JKS/PEM, is defined when adding the 
user in the database (using 'ra adduser' or admin-GUI).

The batch.sh/cmd command can also be executed for a specific
user:

batch.sh <username>

Fetching certificates and CRLs
------------------------------
Certificates and CRLs can be fetched through the web-interface
as defined in
 'webdist/index.html'. They can also be fetched directly from
 the
 'CertificateStoreSession' session bean. or using the command 'ca getcrl'

Other deployment scenarios
--------------------------
EJBCA can be run with servlets and EJBs or only with EJBs. The
servlets are only
 a publicly available front-end to the beans. If the CA is
 deployed integrated
 in another J2EE application, this front-end may not be needed.
The sampleauth servlet (sampleauth.war) is only an example and
should never be
deployed in a real production environment.

Certificate- and EndEntity Profiles
-----------------------------------
CertificateProfiles define different types of certificates, with 
regards to DN-contents, extensions etc. We also have 
EndEntityProfiles, where users are grouped, and you can determine 
which parts of their DN that is already pre-set, and which can be 
altered etc. 
An EndEntityProfile can be connected to specific CertificateProfiles 
so users belonging to a specific EndEntityProfile can only get 
certificates from the specified CertificateProfile.

INSTALLING WEB ADMIN-GUI
=======================
If you had problems using the install script you can set it up with an alternative script, otherwise
this shouldn't be necessary.

Automatic method (preferred)
----------------------------

1. Run the script 'setup-adminweb.cmd/sh'
2. Restart JBoss.
3. Import the certificate from 'ejbca/p12/SuperAdmin.p12' in
your browser and go to 'https://<hostname>:8443/ejbca

Manual method (don't use, only provided as reference)
-------------
0. Set the baseurl of the server with the command 'setup.sh/cmd setbaseurl <computername> <applicationpath>'
Set the BASEURL to reflect your
hostname, to be able to use the adminpages from external
machines, this must be
a real hostname or ip-address.
Run 'ant deploy' to install the changes.

1. Tomcat: Copy src/adminweb/WEB-INF/tomcat41-jboss32.xml (if using JBoss 3.2.x) 
to $JBOSS_HOME/server/default/deploy/jbossweb-tomcat41.sar/META-INF/jboss-service.xml.

Edit the file so 'keyStorePass' is the
same as the password you specify below for 'tomcat'.

2. Edit parameters in src/adminweb/WEB-INF/web.xml.

3. Create a tomcat server keystore with the batch.sh/cmd tool
(this can also be done with Suns 'keytool' by creating a keystore and then
generating a certificate request that is processed by EJBCA, and last import
the returned certificate and the CA-certificate into the keystore).

Create a user in EJBCA, DN="C=SE,O=PrimeKey,CN=<your-host-
name>".
./ra.sh adduser tomcat foo123 "C=SE,O=PrimeKey,CN=<your-host-
name>" null <caname> null 1 3

Set a clear text password for the tomcat:
./ra.sh setclearpwd tomcat foo123

Generate a JKS-keystore for tomcat:
./batch.sh tomcat -jks

4. Name the generated keystore 'tomcat.jks' and put in
$JBOSS_HOME.

cp ./p12/tomcat.jks $JBOSS_HOME/tomcat.jks

5. Download the CA certificate in PEM-format from
http://localhost:8080/ejbca/publicweb/webdist/cacert.jsp (call
it ejbca-ca.pem).

6. Add the EJBCA CA certificate to the Java trust-keystore in
$JAVA_HOME/jre/lib/security/cacerts

keytool -import -trustcacerts -file ejbca-ca.pem -keystore
$JAVA_HOME/jre/lib/security/cacerts -storepass changeit

7. Create a user for EJBCA admin with CN=SuperAdmin and the
RAADMIN bit
(temporarily CN=SuperAdmin gives admin rights).
./ra.sh adduser raadmin foo123 "C=SE,O=PrimeKey,CN=SuperAdmin"
null <caname> null 65 1

Alternative:
Create a PKCS12 file with EJBCA for a user with CN=SuperAdmin
and the RAADMIN
bit (temporarily CN=SuperAdmin gives adminrights).
./ra.sh adduser raadmin foo123 "C=SE,O=PrimeKey,CN=SuperAdmin"
null <caname> null65 2
./ra.sh setclearpwd raadmin foo123
./batch.sh

8. Fetch the certificate using your browser a
http://localhost:8080/ejbca/publicweb/apply

Alternative:
Install the generated PKCS12 (p12/superadmin.p12) file in the
browser.
In Mozilla this is done by Edit->Preferences->Privacy&Security->
Certificates->Manage Certificates->Import
In IE it is done by double-clicking on the .p12 file.

9. Start JBoss.

10. Go to https://<hostname>:8443/ejbca

Reference: to generate a JKS with keytool
keytool -genkey -alias tomcat -keystore tomcat.jks -keyalg RSA -
dname "C=SE,O=
AnaTom,CN=hostname" -storepass foo123
keytool -certreq -alias tomcat -keystore tomcat.jks -sigalg
SHA1WithRSA -
storepass foo123 -file tomcat.req
ra.sh adduser tomcat foo123 "C=SE,O=AnaTom,CN=hostname" null,
<caname> null 1 1
ca.sh processreq tomcat foo123 tomcat.req tomcat.pem
ca.sh getrootcert ca.der -der
keytool -import -trustcacerts -alias cacert -file ca.der -
keystore tomcat.jks -
storepass foo123
keytool -import -alias tomcat -file tomcat.pem -keystore
tomcat.jks -storepass
foo123

run as root:
keytool -import -trustcacerts -file ca.der -keystore
$JAVA_HOME/jre/lib/security/cacerts -storepass changeit

SCEP
=====
Since SCEP uses encryption, you must install the 'Unlimited Strength Jurisdiction Policy Files' for JDK.
The policy files can be found at the same place as the JDK 1.4 download. Further information on this can be found in 
the Sun documentation on the JCE.

There is a SCEP servlet receiving requests on http://localhost:8080/ejbca/publicweb/apply/scep/pkiclient.exe

Level of SCEP support:
EJBCA does succesfully receive SCEP 'PKCSReq' requests and send back the certifificate immediately in a proper SCEP reply message.
EJBCA does not support the 'polling' model.
EJBCA will not send back proper SCEP error messages in case of failure, the error messages are not implemented yet.

The CN part of the DN in the PKCS#10 request, which is part of the Scep request, will be used as the 'username' when 
authenticating the request in EJBCA. Create the Scep request with a CN mathing the username registered in EJBCA.
The challengePassword in the PKCS#10 request, which is part of the Scep request, will be used as the 'password' when 
authenticating the request in EJBCA. Create the Scep request with a challengePassword mathing the password registered in EJBCA.

The most common errors should be wrong username/password or wrong status (not NEW/10) on the user in EJBCA.

To use the OpenScep (http://openscep.othello.ch/) client to request a certificate from this servlet, use the command:
./scep -k test.key -r test.pemreq -c ejbca-ca.pem -q foo123 -u http://localhost:8080/ejbca/publicweb/apply/scep
rem ./scep -d -k test.key -r test.pemreq -2 -e test.req -c ejbca-ca.pem -q foo123 -u http://localhost:8080/ejbca/publicweb/apply/scep
Where test.key is generated with:
openssl genrsa -out test.key
test1.req is generated with:
openssl req -key test.key -new -days 30 -out test.req -outform DER -config ../openssl/openscep.cnf
and test1.pemreq is generated with:
openssl req -key test.key -new -days 30 -out test.pemreq -outform PEM -config ../openssl/openscep.cnf

Tested with Cisco VPN client version 4.0.2:
To enroll using the Cisco VPN client use 'CA URL'='http://127.0.0.1:8080/ejbca/publicweb/apply/scep/pkiclient.exe' 
and the CA name as 'CA Domain'. In the DN screen simply enter the username (as added in EJBCA) as 'Name [CN]'.

Tested with Cisco PIX:
When enrolling for certificate using SCEP with for example a Cisco PIX there is a 'ca_nickname'. This nickname 
should be the CA-name as defined when creating the CA in EJBCA. For example TestCA. The username in EJBCA should be 
the name the PIX identifies itself with, example vpn.primekey.se.

OCSP
=====
There is an OCSP servlet receiving requests on http://localhost:8080/ejbca/publicweb/status/ocsp. The 
servlet can process requests for certificates signed by a CA running in EJBCA, as long as the CAs OCSP 
service has not been deactivated. 

The OCSP servlet receives OCSP request by http(s) and send back a status response signed by the CA, or 
with a dedicated responder certificate.. 

There are a few one-time parameters affecting the OCSP service in the file src/publicweb/status/WEB-INF/web.xml:
'useCASigningCert' - If set to true (default) the OCSP reponses will be signed directly by the CAs certificate instead 
of the CAs OCSP responder. If set to false, the CAs special OCSP responder certificate is used to sign the
OCSP responses. The OCSP responder certificate is signed directly by the CA.
'defaultResponderID' - Specifies the subject of a CA which will 
generate responses when no real CA can be found from the request. This is used to generate 'unknown' 
responses when a request is received for a certificate that is not signed by any CA on this server.

These values should be set during deployment of PrimeCA. After the values have been edited, they are installed 
with the 'ant deploy' command.

Example to generate OCSP request using OpenSSL:
openssl ocsp -issuer Test-CA.pem -cert Test.pem -req_text -url http://localhost:8080/ejbca/publicweb/status/ocsp

If Mozilla is to request and accept OCSP-responses from a CA it must be configured:

1. 'Use OCSP to validate all certificates using this URL and signer' in 'Privace & Security->Validation'.
Choose the CA from EJBCA (which you should have made Trusted by right clicking in 
'Privacy & Security->Certificates->Manage Certificates->Authorities' and checking the appropriate checkboxes).

2. If using a Certificate Profile that includes a OCSP Service URL for client certificates, the Validation option in Mozilla 
'Use OCSP to validate only certificates that specify an OCSP service URL' also works fine. When this option is checked you may need to restart Mozilla.

When the validation settings are set, Mozilla will query the OCSP server when for example double-clicking on a certificate in the 
certificate manager.
An appropriate URL for validation is: http://<hostname>:8080/ejbca/publicweb/status/ocsp

If using a dedicated OCSP responder certificate, this certificate must be imported in Mozilla as a Trusted CA certificate, so it
can be set as OCSP signer in 'Privacy & Security->Validation'. You can do this through 'View Certificates' in EJBCA 
(http://localhost:8080/ejbca/publicweb/webdist/cacert.jsp).

EXPORT/IMPORT PROFILES
=======================
Certificate and End Entity profiles can be exported as XML files and imported in another instance of EJBCA,
or in the same instance after removal of the old ones. 

When exporting profiles (ca.sh exportprofiles), all profiles will be exported to the specified directory. The 
exported files will be given unique names containing profile name and profile id.
When importing profiles the profile name and id will be read from the filename. All profiles present in the specified
directory will be imported.

Fixed profiles will not be imported, they will simply be skipped during import.
If a profiles with the same name as the one beeing imported already exist, the profiles will not be imported.

Import of profiles try to keep the same profile id. If there already exist a profile with the same id in the database, 
you might have to edit the filename to choose another id. This can only be done if it is a new profile. 
The reason the id is kept is that there are references to the profile id from users beloinging to the profile.

KEY RECOVERY
============
Key Recovery can be used to re-use or restore a users private key. To enable key recovery use the admin-GUI:
1. Set 'Enable Key Recovery' in 'System Configuration'.
2. Create a new End Entity Profile and set ot use 'Key Recoverable'.
3. Add users with this End Entity Profile.

The following is an example of a sequence of commands that can be used to generate a new certificate for a user using the
same key pair:

# First revoke <username>, with revocation reason <reason>
ra.sh revokeuser $username $reason

# then mark the certificate for keyrecovery,
ra.sh keyrecovernewest $username

# then set clear text password for Batch session to use
ra.sh setclearpwd $username $userpass

# and finally reissue the certificate.
batch.sh

INTERNATIONALIZATION
====================
Java uses unicode internally, so the things that needs to be taken care of are:

1. Make sure your systemlocal is set correctly, so Java will recognize input of your nations language. 
If Java does not automatically recognize your locale you might need to specify it as options to java during
startup (i.e. in JBoss and cmd line commands such as ca.sh and ra.sh).
java -Duser.language=2-char-language-code -Duser.region=2-char-country-code
example for Swedish: java -Duser.language=sv -Duser.region=SE

2. Your database must also recognize the locale so it does not strip down to plain ascii. 
This is database and JDBC-driver dependent.

The admin GUI is meant to support multiple languages through language files
in src/adminweb/languages.
In order to add a language you should do the following:

1. Rename the languagefile you have created to
language.<languagecode>.properties. In case of chinese it should be 'ch', and place 
it in the src/adminweb/languages directory.

2. Edit the file src/adminweb/WEB-INF/web.xml
Go to the AVAILABLELANGUAGES env-entry and add your language code to the value. i.e:
<env-entry-value>EN,CH</env-entry-value>

3. Redeploy ejbca with 'and deploy'.

4. Now it should be possible to select CH in the system configuration as default language 
and in the administrator preferences page. 
The language will be changed next time the administrator logs in.

SAMPLES
=======
A collection of samples are in the directory
src/java/se/anatom/ejbca/samples.

RemoteAuthentication
--------------------
-AuthResult.java
-RemoteVerifyServlet.java
These files are a sample of a remote user database providing
user authentication
 to the CA when the CA is about to generate
a certificate for a user. A remote user database is used by
configuring the CA
 to use the 'RemoteAuthenticationSession' instead
of 'LocalAuthenticationSession'.
The sample files implement a simple file based user database and
a servlet that
 responds to the HTTP requests comming from the CA.
The sample remote authentication is deployes by deploying the
file
 'sampleauth.war' in JBoss.

NullAuthenticationSession
-------------------------
Another sample included is the NullAuthentication (in package
se.anatom.ejbca.ca.auth)
session. This authentication module can be used for demo
purposes since it
authenticates any request sent to it and uses the passed in
username as DN.
It is easily used simply by exchanging the default
AuthenticationSession in
ca/ca/META-INF/ejb-jar.xml for the NullAuthenticationSession.

Programatically get certificate
-------------------------------
-HttpGetCert.java
Example how a certificate can be fetched programmatically using
HTTP/S. The
 sample generates a certificate request and uses POST to the
 same servlet
as used from a browser through
http://127.0.0.1:8080/ejbca/publicweb/apply/apply_man.jsp.
The servlet url used in the example is
http://127.0.0.1:8080/ejbca/publicweb/apply/certreq.
The certificate reply containing a PEM-formatted certificate is
printed to the
 screen.

Troubleshooting
===============
Add Debug output from the console administration commands by
replacing:

    log4j.rootCategory=INFO, Console

in the file 'log4j.properties' with:

    log4j.rootCategory=DEBUG, Console

REFERENCES
==========

Request for Comments: 3280 - Certificate and CRL profile
Request for Comments: 2253 - DN string representation
Request for Comments: 2560 - OCSP
Request for Comments: 2256 - X.500(96) User Schema for use with LDAPv3


MySQL:
Create ALTER-scrips automatically to upgrade database from old
version to latest development version:
http://www.mysqldiff.org/

JBOSS/JETTY:
To get client certificates to work with Jetty add:
 <Set name="NeedClientAuth">true</Set>
to the SSL listener configuration.

Swedish characters in Java/Jboss:
Add the following options to the JVM by modifying JAVA_OPTIONS
in run.sh/cmd.
-Duser.region=SE -Duser.language=sv -Dfile.encoding=ISO-8859-1

PGP:
PKCS12 files generated from EJBCA works excellent as PGP-keys.

Browser key generation:
http://home.netscape.com/eng/security/comm4-keygen.html

Note on Mozilla certs:
For Netscape/Mozilla to be able to verify client certificates
the
 CA-certificates must have the extensions BasicConstraints and
 AuthorityKeyIdentifier.
Client certificates also need AuthorityKeyIdentifier

Note on IE certs:
For IE to verify client certs, the ordering in the DN must be
strictly the same
 in both client and CA certs. Possibly that it must also be in a
 specific order.
There is some bug that required a "nocache" meta tag to
eliminate duplicate sending of certificate request. This
duplicate sending will result in wrong behaviour, since user
status will be wrong.
<HEAD>
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="Expires" CONTENT="-1">
</HEAD>

Microsoft Smart Card Logon certificates:
http://support.microsoft.com/default.aspx?scid=kb;EN-US;q281245
http://support.microsoft.com/default.aspx?scid=kb;EN-US;q291010
http://www.microsoft.com/windows2000/en/server/help/default.asp?
url=
/windows2000/en/server/help/sag_CS_CertTemps.htm

To generate html code from textfiles, txt2html was used.
txt2html --nolinks HOWTO-mysql.txt > HOWTO-mysql.html


