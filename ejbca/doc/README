$Id: README,v 1.183 2005-04-18 09:54:53 anatom Exp $

This software is OSI Certified Open Source Software.
OSI Certified is a certification mark of the Open Source
Initiative.

EJBCA
=====

EJBCA is a fully functional Certificate Authority built in Java.
Based on J2EE technology it constitutes a robust, high
performance and component based CA. Both flexible and platform independent,
EJBCA can be used standalone or integrated in any J2EE application.

EJBCA Homepage can be found at http://ejbca.sourceforge.net/.
Information about contacting the EJBCA team, contributing to
EJBCA, etc can be found through the Homepage.

Documentation can also be found on the homepage.

There is an IRC channel for support at
irc.freenode.net, channel #ejbca.

We encourage and appreciate all contributions. The file
'doc/contributors' contain a list of all people who have donated
their valuable time to EJBCA.

FEATURES
========

- Open Source (LGPL) license.

- Built on the J2EE 1.3 (EJB 2.0) specification.

- Flexible, component based architecture.
- Multiple CAs and levels of CAs, build a complete infrastructure (or several) within one instance of EJBCA.
- Standalone or integrated in any J2EE application.
- Simple installation and configuration.
- Powerful Web based administration GUI using strong authentication.
- Command line administration for scripts etc.
- Individual enrollment or batch production of certificates.
- Server and client certificates can be exported as PKCS12, JKS or PEM.
- Browser enrollment with Netscape, Mozilla, IE, etc.
- Enrollment for other applications through open APIs and tools.
- E-mail notification to new users added by RA.
- Random or manual password for initial user authentication.
- Hard token module for integrating with hard token issuing system (smart cards).
- Supports the Simple Certificate Enrollment Protocol (SCEP).
- Multiple levels of administrators with specified privileges and user groups.
- Configurable certificate profiles for different types and contents of certificates.
- Configurable entity profiles for different types of users.
- Follows X509 and PKIX (RFC3280) standards where applicable.
- Revocation and Certificate Revocation Lists (CRLs).
- Fully supports the Online Certificate Status Protocol (OCSP), including AIA-extension.
- CRL creation and URL-based CRLDistribution Points according to RFC3280.
- Stores Certificates and CRLs in any SQL database (handled by application server).
- Optional multiple publishers for publishing certificates and CRLs in LDAP and other stores.
- Key recovery module to store private keys for recovery for selected users and certificates.
- Component based architecture for publishing certificates and CRLs to different sources.
- Component based architecture for various authorization methods
  of entities when issuing certificates.
- Easy to integrate into large applications for optimal integration into bussiness process.

SECURITY
========

Security is discussed below in the chapter about configuration
and in *SECURITY*.

Please take a minute to thorougly consider the security
implications and make sure you know what you are doing when you are setting
up a CA.

If running on Linux, you should consider using the sample
firewall script provided in 'ejbcafirewall.sh'. If running on Windows, a
similar aproach should be taken with firewall software/hardware.

PLATFORMS
=========

EJBCA is completely written in Java and should as such run on any
platform where a J2EE server runs.  Development and testing is
performed on Linux and Windows 2000 platforms.

UPGRADE
=======

See doc/RELEASE_NOTES and UPGRADE for information about upgrading from an 
earlier version of EJBCA.

QUICK START GUIDE
=================

Build
=====

Note: If you want to use strong crypto and/or password longer than 7 characters 
in keystores you must install the 'Unlimited Strength Jurisdiction Policy Files' for JDK.
The policy files can be found at the same place as the JDK 1.4 download. 
Further information on this can be found in the Sun documentation on the JCE.

Needed to build and run are:
JDK 1.4.x or 1.5.x
JBOSS 3.2.x or 4.0.x 
Ant 1.6.x to build (http://jakarta.apache.org/ant/)

Set the environment variable JBOSS_HOME to the directory where
JBoss's root is
 (/jboss-<version>). This is done so the deploy script will
 know where files are to be copied, they are copied to the
 $JBOSS_HOME/server/default/deploy directory.
 
 Windows/Unix: 
 When we describe command line commands below we use
 unix notation, e.g. 'ejbca.sh' for the executable command files.
 The same command files are available for windows as cmd-files,
 e.g. 'ejbca.cmd.'
 
Configure
---------

Now when everything is prepared, there are a few things to
configure before starting JBOSS and running everything.

In a production environment you should use something like the following structure:
1. Go through the install process creating an AdminCA. Use a simple DN. 
This CA is only used to issue the initial superadmin certificate. Not published in LDAP.
2. Once installed, create all your REAL CAs using the admin-GUI. Now you can use the certificate 
profiles etc that you like. These certificates can be published in LDAP.
See HOWTO-multiplecas.txt for a detailed configuration guide.

In a production environment you should use something else than the default Hypersonic database that comes 
with JBoss for the reasons:
1. Hypersonic database is in-memory, which means that over time it will consume more memory. If a large
numer of certificates is issued, it will become an issue after a while.
2. Hypersonic does not support full SQL, in particular ALTER statements. When a new version of EJBCA is 
released we can not create scripts that updates the database if some tables changed. This will make 
upgrades much much harder.

FOR THE IMPATIENT
-----------------

Note that the installation must be done with a user with privileges to write to JBOSS_HOME and subdirs. 


1) Set the environment variable JBOSS_HOME to where your JBoss is installed,
example /opt/jboss-4.0.1.

2) Copy ejbca.properties.sample to ejbca.properties and customize if needed.
The default values works fine for a test installaton.

- Customize the CA properties if you need to do so.
For production use you need to do this, don't forget to edit
passwords to be secure and secret. Keep ejbca.properties as secret as possible.
DO NOT forget the passwords, if you need to re-install the software sometime.
- Customize the database if needed but easiest thing is to keep the default as it is,
it will use the JBoss embedded HSQLDB and everything will be easier for you.
For production use you should use a real database instead of the embedded one.

3) Open a console (terminal) and start JBoss.
You can start JBoss with 'ant j2ee:run' from EJBCA_HOME
or the normal command 'run.sh/cmd' from JBOSS_HOME/bin.

4) Open a console and type 'ant bootstrap'
it will compile, jar, war, ear everything and deploy it JBoss, you should see JBoss
picking up all the changes and deploying the ear

5) Type 'ant install' it will generate all certificate, keys, etc..
You will find all keys in ${ejbca.home}/p12. (do not delete those files!)
- tomcat.jks is for the servlet container (don't bother with it)
- superadmin.p12 should be imported in your browser, that's your administration certificate.
You will need administrative privileges (e.g. root) for the CA-certificate to be installed
in Javas trust-keystore ($JAVA_HOME/jre/lib/security/cacerts, default pwd 'changeit').

6) Stop JBoss (ctrl+c or whatever)

7) type 'ant deploy', this will deploy everything again and configure the servlet
container with the keystore file (this is why we needed to stop the container).

8) Import the certificate from EJBCA_HOME/p12/superadmin.p12 in your web browser. 
This is the super administrators certificate used to access the admin GUI. 
Other administrators with less privileges can be created later on.

9) Start JBoss again and go to https://localhost:8443/ejbca/ to access the admin-GUI, 
or http://localhost:8080/ejbca for the public pages.

RUNNING TESTS
-------------
If you want to run a thorough test of your new CA, run the automated tests with 'ant test:run'.
To run the tests you must copy the file lib/ext/junti-1.5.8 to ANT_HOME/lib.

NOTE: After running tests with 'ant test:run', you might
consider deleting the database since some leftovers are left in the database.
Runtest will create and revoke some test certificates, so after
runtest your CRLs will be populated with a few entries.
'ant test:run' should not be run on a production system, only
to test the installation.

NOTE! Don't forget to configure JBoss for security! See
'security.txt'.
Security is CRITICAL for a CA.

AFTER INSTALLATION
==================

After installation, that creates a default admin CA
you can create more CAs using the admin GUI.

You CAs can be either root CAs, subordinate CAs to another CA in EJBCA 
or subordinate CAs to an external CA. The initial admin CA is a RootCA.

You can also use the command line interface (cli) 
'bin/ejbca.sh ca init' to create new CAs, although a better idea is to do it from the Admin GUI.
Ex: 'bin/ejbca.sh ca init TestRoot "C=SE,O=PrimeKey,CN=EJBCA" 2048 365 2.5.29.32.0' 
will create a root CA with the DN 'C=SE,O=PrimeKey,CN=EJBCA'. The
keylength is
 2048 bit (RSA) and the validity of the root certificate is 365
 days. Quote the DN  so it is treated as one argument.

PKIX requires that a CRL always is available even if it is
empty. When creating a new CA the CA certificate is stored
and published (if any Publishers are configured), and the initial CRL is created 
and stored/published.

Subordinate CA:
Subordinate CAs is created using the admin GUI, you can not use the 
cli for that.

Note that application for certificates only work when the status
of a user is NEW (one time password thing). The status is set to GENERATED
after a certificate has been issued. To issue a new certificate, the 
status must be reset to NEW, which can be done through administration with 
the RA using the admin GUI or the cli, 'ra.sh/cmd setuserstatus <username> <status>'. 
 
Converting an OpenSSL CA
------------------------
You can convert a PEM-style Root CA key to a PKCS12file that can be imported in EJBCA.
openssl pkcs12 -export -out server1.p12 -inkey cakey.pem -in ca.pem -name privateKey

You can import the CA with the command 'ca importca' after ejbca has been installed 
and the the initial CA created.


Running EJBCA
---------------

Creating Users
--------------
Users are added in the admin-GUI, 'Add End Entity' or with the cli
'bin/ejbca.sh ra adduser'.
The users DN is normally entered as "C=SE,O=MyOrg,OU=MyOrgUnit,CN=MyName".
If a ',' is needed in the DN the comma must be escaped using '\,'.

Create User certificates
------------------------
To enroll for certificates using browsers, open
 http://127.0.0.1:8080/ejbca/publicweb/apply/index.html
 (assuming Tomcat/Jetty
 listens to port 8080) and use the links for your browser.

To enroll for certificates using manual methods (for server
certificates for
 example) open
http://127.0.0.1:8080/ejbca/publicweb/apply/apply_man.jsp and
fill in the form.

Use the admin-GUI or 'ca.sh/cmd' and 'ra.sh/cmd' scripts to administer EJBCA.

Note that application for certificates only work when the status
of a user is
NEW (or FAILED or INPROCESS) (one time password thing). The
status is set to
GENERATED after a certificate has been issued. To issue a new
certificate, the
status must be reset to NEW, which can be done through
administration with the
RA, 'ra.sh/cmd setuserstatus <username> <status>'. For a list of
all available
statuscodes run 'ra.sh/cmd setuserstatus'.
During batch generation of certificates, users with status NEW
or FAILED are
generated. This is due to the possibility that a batch generation for some
reason failed. If it fails
status is set to FAILED and you can try again after fixing the
error.

Create server certificates
--------------------------
The best way to create server certificates is to generate a
PKCS12/JKS/PEM file for the server.
To do this:

1. Create user with 'bin/ejbca.sh ra'. DN for a server should have the
domain name in
CommonName (CN). Example DN for webserver: "C=SE,O=AnaTom,CN=
www.anatom.se", or
for mailserver "C=SE,O=AnaTom,OU=Engineering,CN=mail.anatom.se". Set the user type to match the kind of token that should be generated for your server.

2. To be able to batch-generate certificates, the batch
generation program must have access to the users (servers) password in order to request
a certificate on behalf of the user. Normally the password is stored in hashed
form, so the password must be stored in clear text form by:
bin/ejbca.sh ra setclearpwd <username> <password>

3. Generate private keys and certificates  by:
bin/ejbca.sh batch

4. Many servers (ex Apache, Tomcat) wants keys and certificates
in PEM-format or
SUN JKS.
To generate PEM-files use user type 4. The PEM-files will be stored in a
separate subdirectory, 'pem'. The generated PEM-files can be used with
Apache etc, and are NOT protected by any password.
To generate JKS-files use user type 3. The JKS-files will be stored in the
subdirectory, 'p12' instead of PKCS12-files. The generated JKS-
files can be used with Tomcat etc, and are protected (both private key password
and keystore password) by the users password.

Another way is to use openssl to transform a PKCS12 file to PEM-
format.

openssl pkcs12 -in <pkcs12-file> -nodes

copy and paste private key to key-file, first certificate to
server cert-file and last certificate to CA cert-file (If your CA is a
subordinate CA to another Root CA, the CA cert-file may need to contain the whole cert
chain). Exactly how your server wants the files is server-dependent.

CRL GENERATION
========================
There are at least two ways to have EJBCA to periodically create updated CRLs.
The first way is to have a cron job or equivalent to call 'bin/ejbca.sh ca createcrl'.
The 'createcrl' command will then check all active CAs if there is a need to update their CRLs, 
otherwise nothing is done. 

If you want to force CRL generation for a CA, use 'bin/ejbca.sh ca createcrl <caname>'

The other way to have CRLs generated automatically is to build and deploy the JBOSS CRL Service.
 This is done with the commands 'ant jbossservices' and 'ant deployjbossservices'.

This service will by default check if CRL generation is needed every minute. 
If this default behaviour can be changed by editing the attribute 'Polltime' in 
src/appserver/jboss/crlcreate-service.xml. 

The attribute can have the following values:
            DAILY     =  Every midnight
            HOURLY  =  At XX:00 every hour.
            30MIN    =  At XX:30 and XX:00 every hour
            15MIN    =  At XX:15, XX:30, XX:45,XX:00, every hour 
            1MIN      =  Every minute

Example crontab entry:

PATH=$PATH:/usr/java/jdk1.4.2_01/bin
@daily cd /home/ejbca;/home/ejbca/ca.sh createcrl;

where '/usr/java/jdk1.4.2_01/bin' is the path to where 'java' can be found.
'/home/ejbca' is where ejbca is installed and 'ca.sh' located.

Sample crontab to be installed with 'crontab -e':
--
SHELL=/bin/sh
PATH=
/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
CLASSPATH=$CLASSPATH:/root/ejbca:/root/ejbca/admin.jar
JBOSS_HOME=/usr/local/jboss
# m h dom mon dow command
00 0    * * *   cd /root/ejbca;./ca.sh createcrl
--

A new CA should always issue an (empty) CRL. This is done when the ca is created
and can also be done by running 'ca.sh/cmd createcrl <caname>'.

Note on CRL Distribution Points (CDPs): it is possible to configure
multiple URLs for CDPs if they are separated by ';'. 
For example: http://cdpurl-1/mycrl.der;http://cdpurl-2/crl.crl

A CRLDistributionPoint for a CA in EJBCA could look like:
http://<host:port>/ejbca/publicweb/webdist/certdist?cmd=crl&issuer=<url-encoded-issuerDN>
(such as the link from the webdist pages)


SCEP
=====
Since SCEP uses encryption, you must install the 'Unlimited Strength Jurisdiction Policy Files' for JDK.
The policy files can be found at the same place as the JDK 1.4 download. Further information on this can be found in 
the Sun documentation on the JCE.

There is a SCEP servlet receiving requests on http://localhost:8080/ejbca/publicweb/apply/scep/pkiclient.exe

Level of SCEP support:
EJBCA does succesfully receive SCEP 'PKCSReq' requests and send back the certifificate/CRL immediately in a proper SCEP reply message.
EJBCA does not support the 'polling' model, EJBCA uses the direct method, where a request is granted or denied immediately.
EJBCA will not send back proper SCEP error messages in all cases of failure, the error messages are not completely implemented.

The CN part of the DN in the PKCS#10 request, which is part of the Scep request, will be used as the 'username' when 
authenticating the request in EJBCA. Create the Scep request with a CN mathing the username registered in EJBCA.
The challengePassword in the PKCS#10 request, which is part of the Scep request, will be used as the 'password' when 
authenticating the request in EJBCA. Create the Scep request with a challengePassword mathing the password registered in EJBCA.

The most common errors should be wrong username/password or wrong status (not NEW/10) on the user in EJBCA.

Tested with OpenScep:
To use the OpenScep (http://openscep.othello.ch/) client to request a certificate from this servlet, use the command:
./scep -k test.key -r test.pemreq -c ejbca-ca.pem -q foo123 -u http://localhost:8080/ejbca/publicweb/apply/scep
rem ./scep -d -k test.key -r test.pemreq -2 -e test.req -c ejbca-ca.pem -q foo123 -u http://localhost:8080/ejbca/publicweb/apply/scep
Where test.key is generated with:
openssl genrsa -out test.key
test1.req is generated with:
openssl req -key test.key -new -days 30 -out test.req -outform DER -config ../openssl/openscep.cnf
and test1.pemreq is generated with:
openssl req -key test.key -new -days 30 -out test.pemreq -outform PEM -config ../openssl/openscep.cnf

Tested with Simple Scep Client (http://www.klake.org/~jt/sscep/):
You should only use CN in the users DN (same as for PIX below).

Tested with Cisco VPN client version 4.0.2:
To enroll using the Cisco VPN client use 'CA URL'='http://127.0.0.1:8080/ejbca/publicweb/apply/scep/pkiclient.exe' 
and the CA name as 'CA Domain'. In the DN screen simply enter the username (as added in EJBCA) as 'Name [CN]'.

Cisco PIX (not working):
- You must configure JBoss to use port 80 to enroll with PIX, this is done in 
JBOSS_HOME/server/default/deploy/jbossweb-tomcat50.sar/service.xml (or similar depending on version).
- EJBCA supports the 'ca' mode of enrollment for pix, not 'ra'.
- The certificate profile used by the SCEP CA must include the key usages KeyEncipherment and DataEncipherment, otherwise PIX will 
not be able to verify/decrypt encrypted SCEP messages. This is not in the default certificate profile for CAs.
- When enrolling for certificate using SCEP with for example a Cisco PIX there is a 'ca_nickname'. This nickname 
should be the CA-name as defined when creating the CA in EJBCA. For example 'vpnca'. 
- Only use lower-case names when creating the CA in EJBCA, since PIX will change the CA name VpnCA to vpnca when enrolling.
- The username in EJBCA must be the name the PIX identifies itself with <name>.<domain>, example pix.primekey.se. 
- The end-entity DN should only include the DN component CN plus unstructuredXX, ex "CN=pix.primekey.se, unstructuredName=pix.primekey.se",
no O or C should be in the certificate.
- Certificates used for PIX must include the DN component unstructuredName (fqdn) and could also include unstructuredAddress (ip).
- Certificates used for PIX must include the SubjectAltName dNSName beeing the fqdn of the pix, eg <name>.<domain>, 
iPAddress can also be useful. If unstructuredAddress is used iPAddress should be used (but I don't think you should use ip).
- Cisco does not support use of the 'Domain Component', DC, attribute in DNs, don't use it.
- The PIX user should have a DN like "unstructuredName=pix.primekey.se, CN=pix.primekey.se", 
KeyUsage "Digital Signature, Key Encipherment", SubjectAltName "DNS:pix.primekey.se".
- When the VPN-client (above) connects to the PIX, the 'ou' part of the clients DN must match a Vpngroup you have specified, 
otherwise the connection will fail.

Please notice this Cisco note:
Be sure that the PIX Firewall clock is set to GMT, month, day, and year before configuring CA. 
Otherwise, the CA may reject or allow certificates based on an incorrect timestamp. 
Cisco's PKI protocol uses the clock to make sure that a CRL is not expired.
Set timezone first, then set time, then check time with 'show clock'.

The enrollment steps should be something like:
ca identity pixca <ca-ip>:/ejbca/publicweb/apply/scep/pkiclient.exe
ca configure pixca ca 1 0 crloptional
ca authenticate pixca
<wait>
show ca certificate
ca save all
wr mem
ca crl request pixca
<wait>
show ca crl
ca enroll pixca foo123
<wait>

Unforturnately this gives the following error for me:
CRYPTO_CA: error = 293: failed to verify
or sometimes:
CRYPTO_CA: error = 266: failed to verify 
If someone has any ideas what this means, don't hesitate to let us know.

OCSP
=====
There is an OCSP servlet receiving requests on http://localhost:8080/ejbca/publicweb/status/ocsp. The 
servlet can process requests for certificates signed by a CA running in EJBCA, as long as the CAs OCSP 
service has not been deactivated. 

The OCSP servlet receives OCSP request by http(s) and send back a status response signed by the CA, or 
with a dedicated responder certificate.

For a CA to be valid as an OCSP-responder it must have the KeyUsage 'Digital Signature'. 
In the certificate profile used to create the CA, this KeyUsage should be included if the CA is to sign OCSP-responses.
The default certificate profiles for CAs includes the key usage 'Digital Signature'.

There are a few one-time parameters affecting the OCSP service in the file src/publicweb/status/WEB-INF/web.xml:
'useCASigningCert' - If set to true (default) the OCSP reponses will be signed directly by the CAs certificate instead 
of the CAs OCSP responder. If set to false, the CAs special OCSP responder certificate is used to sign the
OCSP responses. The OCSP responder certificate is signed directly by the CA.
'defaultResponderID' - Specifies the subject of a CA which will 
generate responses when no real CA can be found from the request. This is used to generate 'unknown' 
responses when a request is received for a certificate that is not signed by any CA on this server.

These values should be set during deployment of PrimeCA. After the values have been edited, they are installed 
with the 'ant deploy' command.

Example to generate OCSP request using OpenSSL:
openssl ocsp -issuer Test-CA.pem -CAfile Test-CA.pem -cert Test.pem -req_text -url http://localhost:8080/ejbca/publicweb/status/ocsp

If Mozilla is to request and accept OCSP-responses from a CA it must be configured:

1. 'Use OCSP to validate all certificates using this URL and signer' in 'Privace & Security->Validation'.
Choose the CA from EJBCA (which you should have made Trusted by right clicking in 
'Privacy & Security->Certificates->Manage Certificates->Authorities' and checking the appropriate checkboxes).

2. If using a Certificate Profile that includes a OCSP Service URL for client certificates, the Validation option in Mozilla 
'Use OCSP to validate only certificates that specify an OCSP service URL' also works fine. When this option is checked you may need to restart Mozilla.

When the validation settings are set, Mozilla will query the OCSP server when for example double-clicking on a certificate in the 
certificate manager.
An appropriate URL for validation is: http://<hostname>:8080/ejbca/publicweb/status/ocsp

If using a dedicated OCSP responder certificate, this certificate must be imported in Mozilla as a Trusted CA certificate, so it
can be set as OCSP signer in 'Privacy & Security->Validation'. You can do this through 'View Certificates' in EJBCA 
(http://localhost:8080/ejbca/publicweb/webdist/cacert.jsp).

EXPORT/IMPORT PROFILES
=======================
Certificate and End Entity profiles can be exported as XML files and imported in another instance of EJBCA,
or in the same instance after removal of the old ones. 

When exporting profiles (bin/ejbca.sh ca exportprofiles), all profiles will be exported to the specified directory. The 
exported files will be given unique names containing profile name and profile id.
When importing profiles the profile name and id will be read from the filename. All profiles present in the specified
directory will be imported.

Fixed profiles will not be imported, they will simply be skipped during import.
If a profiles with the same name as the one beeing imported already exist, the profiles will not be imported.

Import of profiles try to keep the same profile id. If there already exist a profile with the same id in the database, 
you might have to edit the filename to choose another id. This can only be done if it is a new profile. 
The reason the id is kept is that there are references to the profile id from users beloinging to the profile.

KEY RECOVERY
============
Key Recovery can be used to re-use or restore a users private key. To enable key recovery use the admin-GUI:
1. Set 'Enable Key Recovery' in 'System Configuration'.
2. Create a new End Entity Profile and set ot use 'Key Recoverable'.
3. Add users with this End Entity Profile.

The following is an example of a sequence of commands that can be used to generate a new certificate for a user using the
same key pair:

# First revoke <username>, with revocation reason <reason>
bin/ejbca.sh ra revokeuser $username $reason

# then mark the certificate for keyrecovery,
bin/ejbca.sh ra keyrecovernewest $username

# then set clear text password for Batch session to use
bin/ejbca.sh ra setclearpwd $username $userpass

# and finally reissue the certificate.
bin/ejbca.sh batch

EMAIL NOTIFICATIONS
===================
Mail settings in jboss is created when running the 'ant install' using the values
specified in ejbca.properties (or default). If if configured in 
$JBOSS_HOME/server/default/deploy/ejbca-mail-service.xml.
For other containers you must create a mail service with the same JNDI name as specificed in 
ejbca.properties.

You must create a new end-entity profile to be able to issue certificates 
to end users. Under the RA functions, choose "Edit End Entity Profiles" 
and add a new profile profile. Select the profile and go into 
'Edit End Entity profile'. In this page you can Enable Send Notifications 
and create the notification message. 

Enter the from-address, subject and message using the following variables 
for dynamic substitution: $USERNAME, $PASSWORD, $CN, $O, $OU, $C, $DATE. 
Use $NL for newline in the mail.

Tip: 
If you configure autogenerated password in end entity profile you don?t
need to enter one in the adduser page. A generated one will automatically be
sent with the email.

If you want to re-send a notification for a user, reset the status to NEW. 
If the status is already NEW, set the status to GENERATED and then back to NEW.

REFERENCE MANUAL
================

All configuration options, JNDI names etc is configured through the use of an 
ejbca.properties file. 

Administrating CA
-----------------
The CA has a command line interface 'bin/ejbca.sh ca. Options are:

* init - Creates a new Root CA.
Stores CA certificates and publishes first CRL.
* makeroot - creates a new Root CA keystore (only used by Root
CA). - not used in EJBCA3
Quote the DN (") so it is treated as one argument.
* getrootcert - exports the CA certificates to file.
* makereq - generates a certification request for a subCA for
sending to a. - not used in EJBCA3
RootCA. Used to create a keystore for a
subordinate CA. Quote the DN  so it is treated as one argument.
* recrep - used to receive certificates which has been produced
as result of. - not used in EJBCA3
sending a certificate request to a RootCA.
* processreq - processes a certification request for. - not used in EJBCA3
a subordinate CA and creates  a certification reply.
* createcrl - issues a CRL.
* getcrl - retrieves the latest CRL.
* rolloverroot - used to generate a new RootCA certificate using
an existing. - not used in EJBCA3
keypair. This updates the current RootCA keystore.
(only used by Root CA). When this is used, sub-certificates do
not need to be
resigned.
* rolloversub - used to generate a new subCA certificate using
an existing. - not used in EJBCA3
keypair. This updates the current subCA keystore.
When this is used, sub-certificates do not need to be resigned.
* listexpired - List certificates that will expire within a
given number of days.
* exportprofiles - exports entity and certificate profiles to xml-files.
* importprofiles - imports entity and certificate profiles from xml-files.
When you export a profile that should be imported in another CA, make sure the 
'Available CAs' is set to 'Any CA' for the profiles you export. Otherwise you
can get into trouble with authorization if you don't have the same CAs with the same 
caids (DNs) where you import the profiles.
* importca - creates a new CA by importing keys from en existing PKCS12 file.
A PKCS12 file can be generates from PEM files with openssl.

Administrating RA
-----------------
The RA has a command line interface 'bin/ejbca.sh ra'. Options are:

* adduser - adds a user to the database, after addition a user
may apply for a
certificate. If email address is set to 'null', no email is put
in certificates.
Quote the DN (") so it is treated as one argument.
Altnames is a string simlar to the DN string but using
alternative names from
RFC3280, i.e. "rfc822Name=<email>, dNSName=<host name>, uri=<
http://<whatever>, iPAddress=10.56.32.245"
The full list is: otherName, rfc822Name, dNSName, x400Address,
directoryName,
ediPartyName, uniformResourceIdentifier, iPAddress, registeredID
Only rfc822Name, dNSName, iPAddress and uniformResourceIdentifier (uri) is
supported at the moment. Also the MS UPN and GUID are supported.
* deluser - removes a user from the database, any issued
certificates
remain  active and present in the database.
* setpwd - set a new password for a user. The password is stored
as a hash in
the database.
* setclearpwd - set a clear text
password for a user, needed to generate  certificates batch-
wise.
* setuserstatus - sets status of a user, users can only apply
for certificates
when their status is NEW. finduser - find a user in the database
and lists
details.
* listnewusers - lists all users with status NEW.
* listusers - lists users with specified status (give command to
see list of
status codes).
* revokeuser - revokes a user and all certificates issued to the
user.
* keyrecover - recovers keys related to a specific certificate.
* keyrecovernewest - recovers the latest keys for a user. 

Other Configuration
---------------------
If you want to change the baseurl of the admin-web after installation use the command:
'bin/ejbca.sh setup setbaseurl <computername> <applicationpath>'
Ex: bin/ejbca.sh setup setbaseurl localhost ejbca

To change ports (default public http=8080, private https=8443) you must edit 
src/adminweb/WEB-INF/web.xml. Change env entries PUBLICPORT resp PRIVATEPORT.

Configuring Publishers (LDAP)
-----------------------------
LDAP setup is explained in HOWTO-LDAP.txt

Batch creation of certificates
------------------------------
Certificates can be created batch-wise with EJBCA. The class
se.anatom.ejbca.batch.BatchMakeP12 creates keystore files for
all users designated as NEW or FAILED in the local RA database. 
To be able to batch generate certificates, the users must be registered 
with clear text passwords. To set a clear text password for a user use 
'bin/ejbca.sh.sh ra setclearpwd <username> <password>'.
To generate keystore files for all users with status NEW or
FAILED, run 'bin/ejbca.sh batch'. This will generate files for users if their
clear text passwords are NOT null.
Without arguments 'batch' generates keystore files for all NEW or
FAILED users.
To generate a keystore file for a specific user, enter command
'bin/ejbca.sh batch <username>'.

Generates keystore files are stored in a subdirectory (to the
current directory) called 'p12'. If the directory does not exist, 
it will be created.
Make sure this directory is WELL protected, since the
information contained in keystore files are secret (private keys).
The format of keystores generated, PKCS12/JKS/PEM, is defined when adding the 
user in the database (using 'bin/ejbca.sh ra adduser' or admin-GUI).

Fetching certificates and CRLs
------------------------------
Certificates and CRLs can be fetched through the web-interface
as defined in
 'webdist/index.html'. They can also be fetched directly from
 the 'CertificateStoreSession' session bean or using the command 
 'bin/ejbca.sh ca getcrl'

Other deployment scenarios
--------------------------
EJBCA can be run with servlets and EJBs or only with EJBs. The
servlets are only a publicly available front-end to the beans. 
If the CA is deployed integrated in another J2EE application, 
this front-end may not be needed.

Certificate- and EndEntity Profiles
-----------------------------------
CertificateProfiles define different types of certificates, with 
regards to DN-contents, extensions etc. We also have 
EndEntityProfiles, where users are grouped, and you can determine 
which parts of their DN that is already pre-set, and which can be 
altered etc. 
An EndEntityProfile can be connected to specific CertificateProfiles 
so users belonging to a specific EndEntityProfile can only get 
certificates from the specified CertificateProfile.


INTERNATIONALIZATION
====================
Java uses unicode internally, so the things that needs to be taken care of are:

1. Make sure your system locale is set correctly, so Java will recognize input of your nations language. 
If Java does not automatically recognize your locale you might need to specify it as options to java during
startup (i.e. in JBoss and cmd line commands such as ca.sh and ra.sh).
java -Duser.language=2-char-language-code -Duser.region=2-char-country-code
example for Swedish: java -Duser.language=sv -Duser.region=SE

2. Your database must also recognize the locale so it does not strip down to plain ascii. 
This is database and JDBC-driver dependent.

The admin GUI is meant to support multiple languages through language files
in src/adminweb/languages.
In order to add a language you should do the following:

1. Rename the languagefile you have created to
language.<languagecode>.properties. In case of chinese it should be 'ch', and place 
it in the src/adminweb/languages directory.

2. Edit ejbca.properties (create with ejbca.properties.sample as template if you don't have one).
Change 'web.availablelanguages' and add your language code to the value. i.e:
<env-entry-value>EN,CH</env-entry-value>

3. You may have to change the default page encoding in 'web.contentencoding' to for example UTF-8
instead of the default ISO-8859-1.

4. Redeploy ejbca with 'ant deploy'.

5. Now it should be possible to select CH in the system configuration as default language 
and in the administrator preferences page. 
The language will be changed next time the administrator logs in.


ADDING YOUR OWN PUBLIC PAGES
============================
Put your files (static html is easy) under publicweb/root, do a full build and re-deploy. 
The indexfile under publicweb/root is the one show on http://<ejbca host>:8080/ejbca, 
so you can add a subdir under there.


SAMPLES
=======
A collection of samples are in the directory
src/java/se/anatom/ejbca/samples.

RemoteAuthentication
--------------------
-AuthResult.java
-RemoteVerifyServlet.java
These files are a sample of a remote user database providing
user authentication
 to the CA when the CA is about to generate
a certificate for a user. A remote user database is used by
configuring the CA
 to use the 'RemoteAuthenticationSession' instead
of 'LocalAuthenticationSession'.
The sample files implement a simple file based user database and
a servlet that
 responds to the HTTP requests comming from the CA.
The sample remote authentication is deployes by deploying the
file
 'sampleauth.war' in JBoss.

NullAuthenticationSession
-------------------------
Another sample included is the NullAuthentication (in package
se.anatom.ejbca.ca.auth)
session. This authentication module can be used for demo
purposes since it
authenticates any request sent to it and uses the passed in
username as DN.
It is easily used simply by exchanging the default
AuthenticationSession in
ca/ca/META-INF/ejb-jar.xml for the NullAuthenticationSession.

Programatically get certificate
-------------------------------
-HttpGetCert.java
Example how a certificate can be fetched programmatically using
HTTP/S. The
 sample generates a certificate request and uses POST to the
 same servlet
as used from a browser through
http://127.0.0.1:8080/ejbca/publicweb/apply/apply_man.jsp.
The servlet url used in the example is
http://127.0.0.1:8080/ejbca/publicweb/apply/certreq.
The certificate reply containing a PEM-formatted certificate is
printed to the
 screen.


Troubleshooting
===============
Add Debug output from the console administration commands by
replacing:

    log4j.rootCategory=INFO, Console

in the file 'log4j.properties' with:

    log4j.rootCategory=DEBUG, Console


DEPENDENCIES
============

For ease of installation most dependencies are distributed with EJBCA.
The minimal requirements to download and install are JBoss and Ant.

Bouncycastle
------------
For cryptography and creation of certificates and CRLs, EJBCA
uses the open source JCE crypto provider from Bouncy Castle,
<http://www.bouncycastle.org/>.

The provider is distributed with EJBCA as 'bcprov-
jdk14-<version>.jar' and 'bcmail-jdk14-<version>.jar'.  
The latest version of the JCE provider can always be obtained from Bouncy Castle.

Bouncy Castle JCE is Copyright (c) 2000 The Legion Of The Bouncy
Castle, <http://www.bouncycastle.org/>.
See doc/LICENSE-BC for license conditions of the Bouncy Castle JCE.

JBoss
-----
EJBCA is developed on the open source J2EE application server
JBoss <http://www.jboss.org/>. 

JBoss and jars from JBoss are Copyright (c) 1999-2001 jboss.org.

Jar files needed to run EJBCA is distributed with EJBCA. 
See doc/LICENSE-JBOSS for license conditions of JBoss.

Ant and Log4J
-------------
Ant (used for building) and Log4j (used for logging) is
Copyright
1999-2001, Apache Software Foundation and can be obtained from
<http://ant.apache.org/> and <http://jakarta.apache.org/>.

Jar file for Log4j is distributed with EJBCA. 
See doc/LICENSE-APACHE for license conditions of Ant and Log4j.

JUnit
-----
For automated testing JUnit is used and can be obtained from
<http://www.junit.org/>. Jar file needed to run JUnit tests is
distributed with EJBCA. 

JUnit is released under the IBM Public License
<http://oss.software.ibm.com/developerworks/opensource/license10.html>.

HttpJUnit
----------
Httpjunit is an extension to junit used to test web pages and forms. 
Httpjunit can be fund on httpjunit.sourceforge.net

OpenLDAP
--------
OpenLDAP is an Open Source LDAP directory which can be obtained
from
<http://www.openldap.org/>. This jar fil is needed by EJBCA to store
certificates and CRLs in LDAP directories. The jar is redistributed
with EJBCA.  See doc/LICENSE-JLDAP for license conditions of OpenLDAP.

Batik
-----
Batik is a part of the Apache project and can be obtained from 
http://xml.apache.org/batik/index.html.
See doc/LICENSE-APACHE for license conditions of Batik.

XDoclet
-------
XDoclet can be obtained from http://xdoclet.sourceforge.net/.
See doc/LICENSE-XDOCLET for license conditions of XDoclet.


EXTRA ABOUT ADMIN-GUI
======================
If you had problems using the install script this small part describes brefly 
what the setup of the adminweb does. It's explained using older (pre ejbca 3.1) 
notation so you must be fluent in that :-)

0. Set the baseurl of the server with the command 'setup.sh/cmd setbaseurl <computername> <applicationpath>'
Set the BASEURL to reflect your
hostname, to be able to use the adminpages from external
machines, this must be
a real hostname or ip-address.
Run 'ant deploy' to install the changes.

1. Tomcat: Copy src/adminweb/WEB-INF/tomcat41-jboss32.xml (if using JBoss < 3.2.4) 
to $JBOSS_HOME/server/default/deploy/jbossweb-tomcat41.sar/META-INF/jboss-service.xml.

Edit the file so 'keyStorePass' is the
same as the password you specify below for 'tomcat'.

2. Edit parameters in src/adminweb/WEB-INF/web.xml.

3. Create a tomcat server keystore with the batch.sh/cmd tool
(this can also be done with Suns 'keytool' by creating a keystore and then
generating a certificate request that is processed by EJBCA, and last import
the returned certificate and the CA-certificate into the keystore).

Create a user in EJBCA, DN="C=SE,O=PrimeKey,CN=<your-host-
name>".
./ra.sh adduser tomcat foo123 "C=SE,O=PrimeKey,CN=<your-host-
name>" null <caname> null 1 3

Set a clear text password for the tomcat:
./ra.sh setclearpwd tomcat foo123

Generate a JKS-keystore for tomcat:
./batch.sh tomcat -jks

4. Name the generated keystore 'tomcat.jks' and put in
$JBOSS_HOME/bin.

cp ./p12/tomcat.jks $JBOSS_HOME/bin/tomcat.jks

5. Download the CA certificate in PEM-format from
http://localhost:8080/ejbca/publicweb/webdist/cacert.jsp (call
it ejbca-ca.pem).

6. Add the EJBCA CA certificate to the Java trust-keystore in
$JAVA_HOME/jre/lib/security/cacerts

keytool -import -trustcacerts -file ejbca-ca.pem -keystore
$JAVA_HOME/jre/lib/security/cacerts -storepass changeit

7. Create a user for EJBCA admin with CN=SuperAdmin and the
RAADMIN bit
(temporarily CN=SuperAdmin gives admin rights).
./ra.sh adduser raadmin foo123 "C=SE,O=PrimeKey,CN=SuperAdmin"
null <caname> null 65 1

Alternative:
Create a PKCS12 file with EJBCA for a user with CN=SuperAdmin
and the RAADMIN
bit (temporarily CN=SuperAdmin gives adminrights).
./ra.sh adduser raadmin foo123 "C=SE,O=PrimeKey,CN=SuperAdmin"
null <caname> null65 2
./ra.sh setclearpwd raadmin foo123
./batch.sh

8. Fetch the certificate using your browser a
http://localhost:8080/ejbca/publicweb/apply

Alternative:
Install the generated PKCS12 (p12/superadmin.p12) file in the
browser.
In Mozilla this is done by Edit->Preferences->Privacy&Security->
Certificates->Manage Certificates->Import
In IE it is done by double-clicking on the .p12 file.

9. Start JBoss.

10. Go to https://<hostname>:8443/ejbca

Reference: to generate a JKS with keytool
keytool -genkey -alias tomcat -keystore tomcat.jks -keyalg RSA -
dname "C=SE,O=
AnaTom,CN=hostname" -storepass foo123
keytool -certreq -alias tomcat -keystore tomcat.jks -sigalg
SHA1WithRSA -
storepass foo123 -file tomcat.req
ra.sh adduser tomcat foo123 "C=SE,O=AnaTom,CN=hostname" null,
<caname> null 1 1
ca.sh processreq tomcat foo123 tomcat.req tomcat.pem
ca.sh getrootcert ca.der -der
keytool -import -trustcacerts -alias cacert -file ca.der -
keystore tomcat.jks -
storepass foo123
keytool -import -alias tomcat -file tomcat.pem -keystore
tomcat.jks -storepass
foo123

run as root:
keytool -import -trustcacerts -file ca.der -keystore
$JAVA_HOME/jre/lib/security/cacerts -storepass changeit


REFERENCES
==========

Request for Comments: 3280 - Certificate and CRL profile
Request for Comments: 2253 - DN string representation
Request for Comments: 2560 - OCSP
Request for Comments: 2256 - X.500(96) User Schema for use with LDAPv3


MySQL:
Create ALTER-scrips automatically to upgrade database from old
version to latest development version:
http://www.mysqldiff.org/

Swedish characters in Java/Jboss:
Add the following options to the JVM by modifying JAVA_OPTIONS
in run.sh/cmd.
-Duser.region=SE -Duser.language=sv -Dfile.encoding=ISO-8859-1

PGP:
PKCS12 files generated from EJBCA works excellent as PGP-keys.

Browser key generation:
http://home.netscape.com/eng/security/comm4-keygen.html

Note on Mozilla certs:
For Netscape/Mozilla to be able to verify client certificates
the
 CA-certificates must have the extensions BasicConstraints and
 AuthorityKeyIdentifier.
Client certificates also need AuthorityKeyIdentifier

Note on IE certs:
For IE to verify client certs, the ordering in the DN must be
strictly the same
 in both client and CA certs. Possibly that it must also be in a
 specific order.
There is some bug that required a "nocache" meta tag to
eliminate duplicate sending of certificate request. This
duplicate sending will result in wrong behaviour, since user
status will be wrong.
<HEAD>
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="Expires" CONTENT="-1">
</HEAD>

Microsoft Smart Card Logon certificates:
http://support.microsoft.com/default.aspx?scid=kb;EN-US;q281245
http://support.microsoft.com/default.aspx?scid=kb;EN-US;q291010
http://www.microsoft.com/windows2000/en/server/help/default.asp?url=/windows2000/en/server/help/sag_CS_CertTemps.htm

Microsoft XENROLL info:
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/security/security/using_the_certificate_enrollment_control_properties.asp

To generate html code from textfiles, txt2html was used.
txt2html --nolinks HOWTO-mysql.txt > HOWTO-mysql.html


