<?xml version="1.0"?>
<project name="ejbca" default="build" basedir=".">

	<property name="app.name" value="ejbca" />
    <property name="app.name.cap" value="EJBCA" />
	<property name="app.version" value="${app.name.cap} 3.2beta" />
	
    <property name="ejbca.home" location="." />
    <property environment="env" />

    <!-- Give user a chance to override without editing this file
       (and without typing -D each time it compiles it).
       First it checks your home directory for ejbca.properties
       net it checks the properties file here. -->
    <property file="${user.home}/${app.name}.properties" />
    <property file="${app.name}.properties" />
	<property name="java.ver" value="14" />
	

    <import file="bin/jboss.xml" />

    <!-- set global properties for this build -->
	<property name="tmp" value="./tmp" />
    <property name="bin" value="./${tmp}/bin" />
    <property name="build" value="${bin}/classes" />
    <property name="lib" value="lib" />
	<property name="preprocessed" value="${tmp}/preprocessed"/>

    <property name="src" value="${preprocessed}" />
    <property name="src.java" value="${src}/java" />
    <property name="src.gen" value="${bin}/gensrc" />
    <property name="src.dd" value="${bin}/dd" />
    
    <property name="test.dir" value="${bin}/junit" />
    <property name="test.src.dir" location="${src}/test" />
    <property name="dist.dir" location="dist" />
    <property name="hwtoken_classes" value="hwtoken"/>
    <property name="hwtoken.class.dir" location="${hwtoken_classes}" />
    <property name="apidoc" value="./doc/api" />

    <property name="apply.src" value="${src}/publicweb/apply" />
    <property name="applywar" value="${dist.dir}/apply.war" />

    <property name="webdist.src" value="${src}/publicweb/webdist" />
    <property name="webdistwar" value="${dist.dir}/webdist.war" />

    <property name="sampleauth.src" value="${src}/ca/sampleauth" />
    <property name="sampleauthwar" value="${dist.dir}/sampleauth.war" />

    <property name="status.src" value="${src}/publicweb/status" />
    <property name="statuswar" value="${dist.dir}/status.war" />

    <property name="adminweb.src" value="${src}/adminweb" />
    <property name="adminweb.build" value="${tmp}/adminweb.war" />    
    <property name="adminwebwar" value="${dist.dir}/adminweb.war" />

    <property name="root.warsrc" value="${src}/publicweb/root" />
    <property name="rootwar" value="${dist.dir}/publicwebroot.war" />

    <property name="ejbdd.src" value="${src}/deploy/ejb" />
    <property name="webdd.src" value="${src}/deploy/web" />
    <property name="eardd.src" value="${src}/deploy/ear" />
    <property name="caear" value="${dist.dir}/${app.name}.ear" />

	<property name="createcrlservice.name" value="crlcreateservice.jar" />
    <property name="createcrlservice.build" value="${tmp}/${createcrlservice.name}" />
	
    <property name="createcrlservicejar" value="${dist.dir}/${createcrlservice.name}" />

    <property name="jar.extclasspath" value="lib/bcmail-jdk${java.ver}.jar lib/bcprov-jdk${java.ver}.jar lib/log4j-1.2.7.jar lib/ldap.jar lib/commons-lang-2.0.jar lib/commons-collections.jar lib/commons-fileupload-1.0.jar"/>

    <path id="ext.classpath">
        <fileset dir="lib/ext" includes="*.jar" />
    </path>

    <path id="compile.classpath">
        <path refid="ext.classpath" />
        <fileset dir="lib" includes="*.jar" excludes="bc*.jar"/>
        <fileset dir="lib" includes="bcmail-jdk${java.ver}.jar"/>
    	<fileset dir="lib" includes="bcprov-jdk${java.ver}.jar"/>
        <path refid="j2ee.classpath" />
    </path>

    <path id="j2ee.classpath">
        <fileset dir="${jboss.home}/client">
            <include name="jbossall-client.jar" />
            <include name="jboss-j2ee.jar" />
        </fileset>
    </path>

    <path id="xdoclet.classpath">
        <fileset dir="lib" includes="*.jar" />
        <fileset dir="lib/ext" includes="*.jar" />
        <fileset dir="lib/xdoclet/lib" includes="*.jar" />
        <fileset dir="${jboss.home}/client">
            <include name="jboss-j2ee.jar" />
        </fileset>
    </path>

    <path id="test.compile.classpath">
        <path refid="compile.classpath" />
        <path location="${build}" />
        <path refid="j2ee.classpath" />
    </path>

    <!-- those are the default values used within JBoss for easy startup -->
    <property name="ca.keystorepass" value="foo123"/>
    <property name="ca.ocspkeystorepass" value="foo123"/>
    <property name="ocsp.defaultresponder" value="CN=AdminCA1,O=${app.name.cap} Sample,C=SE"/>
    <property name="ocsp.usecasigningcert" value="true"/>
    <property name="datasource.jndi-name" value="EjbcaDS" />
    <property name="datasource.jndi-name-prefix" value="java:/" />
    <property name="database.name" value="hsqldb" />
    <property name="datasource.mapping" value="Hypersonic SQL" />
    <property name="database.url" value="jdbc:hsqldb:$${jboss.server.data.dir}$${/}hypersonic$${/}localDB" />
    <property name="database.driver" value="org.hsqldb.jdbcDriver" />
    <property name="database.username" value="sa" />
    <property name="database.password" value="" />
	<property name="weblogic-oracle-columntype" value="" />
    <property name="mail.jndi-name" value="java:/EjbcaMail" />
    <property name="mail.from" value="ejbca-donotreply@domain.com" />
    <property name="mail.user" value="ejbca_user" />
    <property name="mail.password" value="primekey" />
    <property name="mail.pop3.host" value="localhost" />
    <property name="mail.smtp.host" value="localhost" />
    <property name="mail.smtp.auth" value="false" />
    <property name="mail.subject" value="Retrieve your certificate" />
    <property name="mail.message" value="Hello $CN$NL$NL This is a notification. $NL$NL Your username: $Username$NL password: $Password$NL$NL Your are NOT supposed to go and fetch your certificate, this is only a test." />
    <property name="mail.debug" value="false" />
    <property name="httpserver.pubhttp" value="8080" />
    <property name="httpserver.pubhttps" value="8442" />
    <property name="httpserver.privhttps" value="8443" />
    <property name="web.availablelanguages" value="EN,FR,IT,ES,SE" />
    <property name="web.contentencoding" value="ISO-8859-1" />

    <!-- =================================================================== -->
    <!-- Build ALL                                                           -->
    <!-- =================================================================== -->
    <target name="build" depends="ca.ear"/>

    <!-- =================================================================== -->
    <!-- Create the time stamp and build directory -->
    <!-- =================================================================== -->
    <target name="init" depends="j2ee:check">
        <echo>
---------- ${app.version} CONFIGURATION PROPERTIES ----------
jboss.home             = ${jboss.home}
java.ver               = ${java.ver}
ca.keystorepass        = ${ca.keystorepass}
ca.ocspkeystorepass    = ${ca.ocspkeystorepass}
ocsp.defaultresponder  = ${ocsp.defaultresponder}
ocsp.usecasigningcert  = ${ocsp.usecasigningcert}
datasource.jndi-name   = ${datasource.jndi-name}
datasource.jndi-name-prefix = ${datasource.jndi-name-prefix}
database.name          = ${database.name}
datasource.mapping     = ${datasource.mapping}
database.url           = ${database.url}
database.driver        = ${database.driver}
database.username      = ${database.username}
database.password      = ${database.password}
weblogic-oracle-columntype = ${weblogic-oracle-columntype}
mail.jndi-name         = ${mail.jndi-name}
mail.from              = ${mail.from}
mail.subject           = ${mail.subject}
mail.message           = ${mail.message}
mail.user              = ${mail.user}
mail.password          = ${mail.password}
mail.smtp.host         = ${mail.smtp.host}
mail.smtp.auth         = ${mail.smtp.auth}
mail.debug             = ${mail.debug}
httpserver.pubhttp	   = ${httpserver.pubhttp}
httpserver.pubhttps	   = ${httpserver.pubhttps}
httpserver.privhttps   = ${httpserver.privhttps}
web.availablelanguages = ${web.availablelanguages}
web.contentencoding    = ${web.contentencoding}

      </echo>
        <!-- Create the time stamp -->
        <tstamp/>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build}"/>
        <mkdir dir="${dist.dir}/${lib}"/>
    </target>

    <!-- =================================================================== -->
    <!-- Clean ALL                                                           -->
    <!-- =================================================================== -->
    <target name="clean">
        <!-- Delete the ${build} and ${dist.dir} directory trees -->
        <delete dir="${build}" />
        <delete dir="${dist.dir}" />
        <delete dir="${src.gen}" />
        <delete dir="${src.dd}" />
        <delete dir="${apidoc}" />
        <delete dir="${tmp}"/>
    </target>

    <!-- =================================================================== -->
    <!-- Autogenerate all ejb interfaces and deployment descriptors          -->
    <!-- =================================================================== -->
    <target name="run-xdoc" depends="init, preprocess">
        <taskdef name="ejbdoclet" classname="xdoclet.modules.ejb.EjbDocletTask">
            <classpath refid="xdoclet.classpath" />
        </taskdef>
        <taskdef name="webdoclet" classname="xdoclet.modules.web.WebDocletTask">
            <classpath refid="xdoclet.classpath" />
        </taskdef>
    	<!-- Copy XDoclet merge files to handle database specific settings -->
        <ejb-merge-copy database="${database.name}" overwrite="true" />
        <ejbdoclet force="false" destdir="${src.gen}" ejbspec="2.0" excludedtags="@version,@author">
            <fileset dir="${src.java}">
                <include name="**/*Bean.java" />
                <exclude name="**/BaseEntityBean.java" />
                <exclude name="**/BaseSessionBean.java" />
            </fileset>
            <remoteinterface />
            <homeinterface />
            <localinterface />
            <localhomeinterface />
            <entitypk />
            <session />
            <deploymentdescriptor destdir="${src.dd}/META-INF" validatexml="false" />
             <jboss version="3.2" 
                unauthenticatedPrincipal="nobody" 
                xmlencoding="UTF-8" 
                validatexml="false" 
                destdir="${src.dd}/META-INF" 
                mergeDir="${ejbdd.src}/merge"
                datasource="${datasource.jndi-name-prefix}${datasource.jndi-name}" 
                datasourcemapping="${datasource.mapping}" />
            <weblogic version="8.1" 
                xmlencoding="UTF-8" 
                destdir="${src.dd}/META-INF" 
                validatexml="false" 
                datasource="${datasource.jndi-name}" 
                persistence="weblogic"
                createTables="Disabled" />
<!--            
            <sunone version="7.0" 
                xmlencoding="UTF-8" 
                destdir="${src.dd}/META-INF" 
                validatexml="false" />
            <jonas version="3.0" 
                xmlencoding="UTF-8" 
                destdir="${src.dd}/META-INF" 
                validatexml="false" /> 
-->                
        </ejbdoclet>
        <webdoclet force="true" destdir="${src.gen}" excludedtags="@version,@author">
            <fileset dir="${src.java}">
                <include name="**/*Servlet.java" />
                <exclude name="**/protocol/*Servlet.java" />
            </fileset>
            <deploymentdescriptor destdir="${src.dd}/WEB-INF"
             servletspec="2.3"
             sessiontimeout="30" 
             description="EJBCA Administration web" 
             mergeDir="${webdd.src}/merge"
             validatexml="false" />
        </webdoclet>
        <webdoclet force="true" destdir="${src.gen}" excludedtags="@version,@author">
            <fileset dir="${src.java}">
                <include name="**/protocol/OCSPServlet.java" />
            </fileset>
            <deploymentdescriptor destdir="${src.dd}/status/WEB-INF"
             servletspec="2.3"
             sessiontimeout="30" 
             description="OCSP responder" 
             validatexml="false" />
        </webdoclet>
    </target>
	
	<!--
	  Preprocesses EJBCA by replacing tags with correct version and application texts.
	-->
	<target name="preprocess">
        <copy todir="${preprocessed}">
            <fileset dir="src">
              <include name="**"/>
              <exclude name="**/*.java"/>
              <exclude name="**/*.java.15"/>
              <exclude name="**/*.html"/>
              <exclude name="**/*.htm"/>            	
              <exclude name="**/*.xml"/>
              <exclude name="**/*.jsp"/>
              <exclude name="**/*.jspf"/>
              <exclude name="**/*.properties"/>
            </fileset>	      
	    </copy>
        <copy todir="${preprocessed}">
            <fileset dir="src">
                <include name="**/*.java"/>
                <include name="**/*.html"/>
                <include name="**/*.htm"/>
                <include name="**/*.xml"/>
                <include name="**/*.jsp"/>
                <include name="**/*.jspf"/>
                <include name="**/*.properties"/>
            </fileset>	   

			<filterchain>
			<tokenfilter>			    
		        <replacestring from="@ejbca@" to="${app.name}"/>
		    	<replacestring from="@EJBCA@" to="${app.name.cap}"/>
		    	<replacestring from="@weblogic.ora.columntyp@" to="${weblogic-oracle-columntype}"/>
			</tokenfilter>
			</filterchain>
	    </copy>
		<echo>Ignore warnings about 'Couldn't find file' during preprocessing if you are running jdk 1.4</echo>
        <copy file="src/java/se/anatom/ejbca/ca/caadmin/CATokenInfo.java.${java.ver}" tofile="${preprocessed}/java/se/anatom/ejbca/ca/caadmin/CATokenInfo.java" overwrite="true" failonerror="false"/>
        <copy file="src/java/se/anatom/ejbca/ca/caadmin/ExtendedX509CertificateObject.java.${java.ver}" tofile="${preprocessed}/java/se/anatom/ejbca/ca/caadmin/ExtendedX509CertificateObject.java" overwrite="true" failonerror="false"/>
        <copy file="src/java/se/anatom/ejbca/ca/caadmin/ExtendedX509CRLObject.java.${java.ver}" tofile="${preprocessed}/java/se/anatom/ejbca/ca/caadmin/ExtendedX509CRLObject.java" overwrite="true" failonerror="false"/>
        <copy file="src/java/se/anatom/ejbca/ca/caadmin/ExtendedX509Util.java.${java.ver}" tofile="${preprocessed}/java/se/anatom/ejbca/ca/caadmin/ExtendedX509Util.java" overwrite="true" failonerror="false"/>
        <copy file="src/java/se/anatom/ejbca/ca/caadmin/ExtendedX509V3CertificateGenerator.java.${java.ver}" tofile="${preprocessed}/java/se/anatom/ejbca/ca/caadmin/ExtendedX509V3CertificateGenerator.java" overwrite="true" failonerror="false"/>
		<replace file="${src.java}/se/anatom/ejbca/ra/raadmin/GlobalConfiguration.java" token="@ejbca.version@" value="${app.version}"/>	
	</target>
	<!--
	  EJBCA need to be run before the app.server (or the webapp) is fully ssl configured with the keystore
	  So we are 'bootstrapping' it, the 'j2ee.web-noconfigure' property will skip all the serverside
	  -->
    <target name="bootstrap" description="Bootstrap EJBCA application">
        <ant target="deploy">
        	<property name="j2ee.web-noconfigure" value="true"/>
        </ant>
    </target>

	<!--
	  Installs EJBCA by creating an initial CA, configuring the web container and generating certs for
	  SSL and the super administrator.
	  -->
    <target name="install" description="Install EJBCA application">
        <ant dir="${ejbca.home}/bin" antfile="cli.xml" target="ejbca:install" />
    </target>

    <!-- =================================================================== -->
    <!-- Compile java sources                                                -->
    <!-- =================================================================== -->
    <target name="compile" depends="run-xdoc">
        <javac destdir="${build}" debug="on" includeantruntime="no" encoding="iso8859-1">
            <classpath refid="compile.classpath" />
            <exclude name="**/appserver/**" />
            <src path="${src.java}" />
            <src path="${src.gen}" />
        </javac>
    </target>

    <!-- =================================================================== -->
    <!-- Build apply part                                                    -->
    <!-- =================================================================== -->
    <target name="apply.war" depends="compile" description="build the jar file">
        <war destfile="${applywar}" webxml="${apply.src}/WEB-INF/web.xml">
            <fileset dir="${apply.src}" excludes="WEB-INF/web.xml" />
            <classes dir="${build}">
                <include name="se/anatom/ejbca/protocol/ScepServlet*" />
                <include name="se/anatom/ejbca/apply/**" />
         	</classes>
        </war>
    </target>

    <!-- =================================================================== -->
    <!-- Build status part                                                                                                                             -->
    <!-- =================================================================== -->
    <target name="status.war" depends="compile">
        <war destfile="${statuswar}" webxml="${src.dd}/status/WEB-INF/web.xml">
            <fileset dir="${status.src}" excludes="WEB-INF/web.xml" />
            <classes dir="${build}">
                <include name="se/anatom/ejbca/protocol/OCSPServlet*.class" />
         	</classes>
        </war>
    </target>

    <!-- =================================================================== -->
    <!-- Build sampleauth part                                               -->
    <!-- =================================================================== -->
    <target name="sampleauth.war" depends="compile">
        <war destfile="${sampleauthwar}" webxml="${sampleauth.src}/WEB-INF/web.xml">
            <fileset dir="${sampleauth.src}" excludes="WEB-INF/web.xml" />
            <classes dir="${build}">
                <include name="se/anatom/ejbca/samples/AuthResult*.class" />
                <include name="se/anatom/ejbca/samples/RemoteVerify*.class" />
         	</classes>
        </war>
    </target>

    <!-- =================================================================== -->
    <!-- Build webdist part                                                  -->
    <!-- =================================================================== -->
    <target name="webdist.war" depends="compile">
        <war destfile="${webdistwar}" webxml="${webdist.src}/WEB-INF/web.xml">
            <fileset dir="${webdist.src}" excludes="WEB-INF/web.xml" />
            <classes dir="${build}">
                <include name="se/anatom/ejbca/webdist/**" />
         	</classes>
        </war>
    </target>

    <!-- =================================================================== -->
    <!-- Build admin web part                                                -->
    <!-- =================================================================== -->
    <target name="adminweb.war" depends="compile">
        <mkdir dir="${adminweb.build}/WEB-INF/lib"/>
        <copy todir="${adminweb.build}">
            <fileset dir="${adminweb.src}" />
        </copy>
        <copy todir="${adminweb.build}/WEB-INF">
            <fileset dir="${src.dd}/WEB-INF" />
        </copy>
        
    	<jsp-compile uriroot="${adminweb.build}" classpathref="compile.classpath"/>
        <war destfile="${adminwebwar}" webxml="${src.dd}/WEB-INF/web.xml">
            <manifest>
                <attribute name="Class-Path" value="${jar.extclasspath}" />
            </manifest>
            <fileset dir="${adminweb.build}">
                <exclude name="WEB-INF/*-service.xml" />
                <exclude name="WEB-INF/web.xml"/>
            </fileset>
            <classes dir="${build}">
                <include name="se/anatom/ejbca/webdist/**" />
                <include name="se/anatom/ejbca/apply/**" />
         	</classes>
        </war>
    </target>

    <!-- =================================================================== -->
    <!-- Build public root web part                                              -->
    <!-- =================================================================== -->
    <target name="publicwebroot.war" depends="compile">
        <war destfile="${rootwar}" webxml="${root.warsrc}/WEB-INF/web.xml">
            <fileset dir="${root.warsrc}" excludes="WEB-INF/**" />
        </war>
    </target>   

    <!-- =================================================================== -->
    <!-- Build ca ejb part                                                    -->
    <!-- =================================================================== -->
    <target name="ejbca-ejb.jar" depends="compile" description="Creates master ejb.jar">
    <!-- create empty direktory for HW tokens if not existing -->
        <mkdir dir="${hwtoken.class.dir}"/>
        <jar jarfile="${dist.dir}/ejbca-ejb.jar">
            <manifest>
                <!-- todo: autogenerate this from a fileset -->
                <attribute name="Class-Path" value="${jar.extclasspath}" />
            </manifest>
            <fileset dir="${src.dd}">
            	<exclude name="WEB-INF/**"/>
            	<exclude name="status/**"/>
            </fileset>
            <fileset dir="${build}"/>
            <fileset dir="${src}/log"/>
            <fileset dir="${src}/upgrade"/>
            <fileset dir="${hwtoken.class.dir}"/>
        </jar>
    </target>
    
    <!-- =================================================================== -->
    <!-- Build CA-ear                                                        -->
    <!-- =================================================================== -->
    <target name="ca.ear" depends="apply.war, status.war, webdist.war, adminweb.war, publicwebroot.war, ejbca-ejb.jar">
        <ear destfile="${caear}" appxml="${eardd.src}/META-INF/application.xml"> 
            <fileset dir="${eardd.src}">
                <exclude name="META-INF/application.xml" />
            </fileset>
            <fileset dir=".">
                <include name="${lib}/bcmail-jdk${java.ver}.jar" />
                <include name="${lib}/bcprov-jdk${java.ver}.jar" />
                <include name="${lib}/log4j-1.2.7.jar" />
                <include name="${lib}/ldap.jar" />
                <include name="${lib}/commons-lang-2.0.jar" />
                <include name="${lib}/commons-collections.jar" />
                <include name="${lib}/commons-fileupload-1.0.jar" />
            </fileset>
            <fileset dir="${dist.dir}">
                <include name="*-ejb.jar" />
                <include name="*.war" />
            </fileset>
	</ear>
    </target>

    <!-- ===================================================================
         Build documentation website from doc/xdocs
         =================================================================== -->
    <target name="doc" description="Build EJBCA web site and docs">
        <ant dir="${ejbca.home}" antfile="docs.xml" />
    </target>
    
    <!-- =================================================================== -->
    <!-- Build Javadoc part                                                  -->
    <!-- =================================================================== -->
    <target name="javadoc" depends="">
        <mkdir dir="${apidoc}" />
        <javadoc packagenames="se.anatom.*" maxmemory="256m" sourcepath="${src.java}" destdir="${apidoc}" extdirs="${lib}" author="true" version="true" use="true" windowtitle="EJBCA API" bottom="Copyright &#169; PrimeKey Solutions AB.">
        </javadoc>
    </target>

    <!-- ========================================================================== -->
    <!-- Upgrades the database for a new version of ejbca                           -->
    <!-- ========================================================================== -->
    <target name="upgrade" depends="build">
        <!-- Get input -->
        <input message="Type of system:" validargs="unix,windows" addproperty="ejbca.OS" />
        <input message="Hostname for adminweb (default 127.0.0.1):" addproperty="ejbca.URL" defaultvalue="127.0.0.1" />
        <input message="Type of database:" validargs="mysql" addproperty="ejbca.DB" />
        <!-- validargs="hsql,oracle,mssql,mysql,postgres,postgres8,sapdb,hsqldb,sybase" -->
        <input message="Data source (default java:/DefaultDS):" addproperty="ejbca.DS" defaultvalue="java:/DefaultDS" />
        <input message="CA name(default MyCA):" addproperty="ejbca.CA" defaultvalue="MyCA" />
        <input message="CA keystore filename (default $JBOSS_HOME/server/default/conf/server.p12):" addproperty="ejbca.KS" defaultvalue="${jboss.conf.dir}/server.p12" />
        <input message="CA keystore password:" addproperty="ejbca.KSPWD" />
        <java classname="se.anatom.ejbca.admin.Upgrade" fork="true">
            <sysproperty key="ejbcaOS" value="${ejbca.OS}" />
            <sysproperty key="ejbcaURL" value="${ejbca.URL}" />
            <sysproperty key="ejbcaDB" value="${ejbca.DB}" />
            <sysproperty key="ejbcaDS" value="${ejbca.DS}" />
            <sysproperty key="ejbcaCA" value="${ejbca.CA}" />
            <sysproperty key="ejbcaKS" value="${ejbca.KS}" />
            <sysproperty key="ejbcaKSPWD" value="${ejbca.KSPWD}" />
            <classpath>
                <pathelement location="." />
                <pathelement location="${adminjar}" />
                <fileset dir="${jboss.home}/client" includes="**/*.jar" />
                <fileset dir="${lib}" includes="**/*.jar" />
            </classpath>
        </java>
    </target>

    <!-- =================================================================== -->
    <!-- Build Jboss Specific Services                       -->
    <!-- =================================================================== -->
    <target name="jbossservices" depends="compile">
        <path id="jbossservices.classpath">
            <pathelement location="${jboss.home}/lib/jboss-system.jar" />
            <pathelement location="${jboss.home}/lib/jboss-common.jar" />
            <pathelement location="${jboss.home}/lib/jboss-jmx.jar" />
        </path>
        <javac srcdir="${src.java}" extdirs="${lib}" destdir="${build}" debug="on" encoding="iso8859-1">
            <exclude name="**/CVS/**" />
            <include name="**/appserver/**" />
            <!-- appserver specific files are built separtely-->
            <classpath refid="jbossservices.classpath" />
            <classpath refid="compile.classpath" />
        </javac>

        <mkdir dir="${createcrlservice.build}" />
        <copy todir="${createcrlservice.build}">
            <fileset dir="${src}/appserver/jboss">
                <include name="crlcreate-service.xml" />
            </fileset>
        </copy>
        <copy todir="${createcrlservice.build}">
            <fileset dir="${build}">
                <include name="se/anatom/ejbca/appserver/jboss/CRLCreate*.class" />
                <include name="se/anatom/ejbca/ca/crl/ICreateCRL*.class" />
                <include name="se/anatom/ejbca/log/Admin.class" />
                <exclude name="se/anatom/ejbca/**/*Test*" />
            </fileset>
        </copy>
        <jar basedir="${createcrlservice.build}" jarfile="${createcrlservicejar}">
            <manifest>
                <attribute name="Class-Path" value="${jar.classpath}" />
            </manifest>
        </jar>
    </target>

    <!-- =================================================================== -->
    <!--Deploy Jboss Specific Services                       -->
    <!-- =================================================================== -->
    <target name="deployjbossservices" depends="jbossservices">
        <copy file="${createcrlservicejar}" tofile="${jboss.farm.dir}/createcrlservice.jar" verbose="true" />
    </target>
	
    <!-- =================================================================== -->
    <!--Deploy EJBCA with Jboss Specific Services inside the ear file.       -->
    <!-- =================================================================== -->
    <target name="deploywithjbossservices" depends="jbossservices">    	
        <copy todir="${tmp}" overwrite="false">
        	<fileset dir="${eardd.src}">
        	   <include name="META-INF/jboss-app.xml" />
        	</fileset> 
    	</copy>
    	<replace file="${tmp}/META-INF/jboss-app.xml" token="!--@crlcreateservice.jar@-->" value="module>&lt;service>crlcreateservice.jar&lt;/service>&lt;/module>"/>
        <ear update="true" destfile="${caear}"  > 
            <fileset dir="${tmp}">
                <include name="META-INF/jboss-app.xml" />
            </fileset>
            <fileset dir="${dist.dir}">
                <include name="${createcrlservice.name}" />
            </fileset>
		</ear>
        <antcall target="j2ee:deploy" />
    </target>

    <!-- ======================================================================= -->
    <!-- Deploy EJBCA ear to JBoss                                               -->
    <!-- ======================================================================= -->
    <target name="deploy" depends="build">
        <antcall target="j2ee:deploy" />
    </target>

    <!--
        this macro is a specialized copy for deployment descriptors (dd).
        In the wonderful world of J2EE nothing it is always painful
        Basically it is copying the appropriate DD for each J2EE server
        and selected database:
        @database.name
    -->
    <macrodef name="ejb-merge-copy">
        <attribute name="database" />
        <attribute name="overwrite" default="false" />
        <sequential>
            <!-- Remove old possible files -->
        	<delete dir="${ejbdd.src}/merge/se"/>
            <!-- jboss configuration -->
            <copy todir="${ejbdd.src}/merge" overwrite="@{overwrite}" failonerror="false">
                <fileset dir="${ejbdd.src}/merge/${database.name}" includes="**/*.xml" />
            </copy>
        </sequential>
    </macrodef>

	<!--
        this macro is a specialized copy for deployment descriptors (dd).
        In the wonderful world of J2EE nothing it is always painful
    -->
    <macrodef name="ejb-dd-copy">
        <attribute name="todir" />
        <attribute name="dir" />
        <attribute name="overwrite" default="false" />
        <sequential>
        </sequential>
    </macrodef>

    <!--
    Macro that creates an exploded war based on the structure in use for this
    project. The 'name' attributes should match the se.anatom.ejbca.name package
    and it expects to find a directory 'name' in src with the META-INF as the
    subdirectory.
    -->
    <macrodef name="ejb-jar">
        <attribute name="name" />
        <element name="filesets" optional="yes" />
        <sequential>
            <property name="@{name}.id" value="@{name}-ejb.jar" />
            <property name="@{name}.build.dir" value="${tmp}/${@{name}.id}" />
            <mkdir dir="${@{name}.build.dir}" />

            <!-- generate xdoclet sources and dd -->
            <!-- FIXME: Comment this to use XDoclet generated DDs -->
            <property name="@{name}.tmp.dir" location="${tmp}/xdoclet/${@{name}.id}/META-INF" />
            <ejb-doclet dir="${src.java}" todir="${src.java}" module="@{name}" />

            <!-- copy/configure the dds -->
            <ejb-dd-copy todir="${@{name}.build.dir}" dir="${src}/@{name}" overwrite="true" />

            <!-- compile the module -->
            <javac srcdir="${src.java}" classpathref="compile.classpath" destdir="${build}" debug="on" includeantruntime="no" encoding="iso8859-1">
                <include name="se/anatom/ejbca/@{name}/**" />
                <classpath path="${build}" />
            </javac>

            <!-- copy the appropriate classes -->
            <copy todir="${@{name}.build.dir}">
                <fileset dir="${build}">
                    <include name="se/anatom/ejbca/@{name}/**" />
                </fileset>
                <!-- add extra classes, in case it is not enough -->
                <filesets />
            </copy>

            <!-- jar all files -->
            <jar basedir="${@{name}.build.dir}" jarfile="${dist.dir}/${@{name}.id}">
                <manifest>
                    <attribute name="Class-Path" value="${jar.classpath}" />
                </manifest>
            </jar>

            <!-- add an extra step: ejb verifier -->
            <ejb-verifier file="${dist.dir}/${@{name}.id}" />
        </sequential>
    </macrodef>

    <macrodef name="ejb-verifier">
        <attribute name="file" />
        <sequential>
            <echo message="Verifying EJB jar @{file}" />
            <java classname="org.jboss.verifier.Main" fork="true">
                <classpath>
                    <fileset dir="${jboss.server.home.dir}/lib" includes="*.jar" />
                    <fileset dir="${jboss.home}/client" includes="*.jar" />
                    <fileset dir="${jboss.home}/lib" includes="*.jar" />
                    <fileset dir="${dist.dir}" includes="*.jar" />
                    <pathelement location="${jboss.conf.dir}" />
                </classpath>
                <arg value="@{file}" />
            </java>
        </sequential>
    </macrodef>

    <target name="test:compile" depends="compile" description="compile JUnit testcases">
        <mkdir dir="${test.dir}" />
        <javac srcdir="${test.src.dir}" destdir="${test.dir}" debug="on" includeantruntime="no" encoding="iso8859-1">
            <classpath refid="test.compile.classpath" />
        </javac>
        <!-- jndi.properties needs to be in the classpath -->
        <copy file="${src.java}/jndi.properties" todir="${test.dir}" />
    </target>

    <target name="test:run" depends="test:compile,j2ee:assert-run" description="run JUnit testcases">
        <delete dir="${test.dir}/reports" />
        <mkdir dir="${test.dir}/reports/html" />
        <junit printsummary="yes" haltonfailure="no">
            <classpath>
                <path refid="test.compile.classpath" />
                <path location="${test.dir}" />
            </classpath>
            <formatter type="xml" />
            <batchtest fork="yes" todir="${test.dir}/reports">
                <fileset dir="${test.dir}">
                    <include name="**/caadmin/TestCAs*" />
                    <exclude name="**/TestRunner*" />
                </fileset>
            </batchtest>
            <batchtest fork="yes" todir="${test.dir}/reports">
                <fileset dir="${test.dir}">
                    <include name="**/util/Test*" />
                    <include name="**/protocol/Test*" />
                    <include name="**/ra/Test*" />
                    <!-- LotsosUsers creates LOOOOTS of users, only run once in a while -->
                    <exclude name="**/ra/TestAddLotsofUsers*" />
                    <exclude name="**/sign/TestSignLotsOfCerts*" />
                    <include name="**/raadmin/Test*" />
                    <include name="**/auth/Test*" />
                    <include name="**/store/Test*" />
                    <include name="**/sign/Test*" />
                    <include name="**/crl/Test*" />
                    <include name="**/publisher/Test*" />
                    <include name="**/batch/Test*" />
                    <include name="**/log/Test*" />
                    <include name="**/keyrecovery/Test*" />
                    <include name="**/hardtoken/Test*" />
                    <exclude name="**/TestRunner*" />
                </fileset>
            </batchtest>
            <batchtest fork="yes" todir="${test.dir}/reports">
                <fileset dir="${test.dir}">
                    <include name="**/caadmin/TestRemoveCA*" />
                    <exclude name="**/TestRunner*" />
                </fileset>
            </batchtest>
        </junit>
        <junitreport todir="${test.dir}/reports">
            <fileset dir="${test.dir}/reports">
                <include name="TEST-*.xml" />
            </fileset>
            <report format="frames" todir="${test.dir}/reports/html" />
        </junitreport>
    </target>
    
    <target name="test:runweb" depends="test:compile,j2ee:assert-run" description="run JUnit web testcases">
        <delete dir="${test.dir}/web/reports" />
        <mkdir dir="${test.dir}/web/reports/html" />
        <junit printsummary="yes" haltonfailure="no">
			<sysproperty key="testtype" value="WEB"/>
            <classpath>
                <path refid="test.compile.classpath" />
                <path location="${test.dir}" />
            </classpath>
            <formatter type="xml" />
        	<!-- we must use fork=yes or the BC JCE won't be authenticated due to some problem with ant classloading -->
            <batchtest fork="yes" todir="${test.dir}/web/reports">
                <fileset dir="${test.dir}">
                    <include name="**/protocol/ProtocolScepHttpTest*" />
                    <include name="**/protocol/ProtocolOcspHttpTest*" />
                    <include name="**/webdist/WebdistHttpTest*" />
                </fileset>
            </batchtest>
        </junit>
        <junitreport todir="${test.dir}/web/reports">
            <fileset dir="${test.dir}/web/reports">
                <include name="TEST-*.xml" />
            </fileset>
            <report format="frames" todir="${test.dir}/web/reports/html" />
        </junitreport>
    </target>

    <macrodef name="jsp-compile">
        <attribute name="uriroot"/>
        <attribute name="todir" default="@{uriroot}"/>
        <attribute name="classpathref"/>
        <sequential>
        <path id="jasper.classpath">
            <fileset dir="lib/jasper" includes="*.jar"/>
            <path refid="@{classpathref}"/>
            <path location="${build}"/>
        </path>
        <taskdef name="jasper2" classname="org.apache.jasper.JspC" classpathref="jasper.classpath"/>
        <mkdir dir="@{todir}/WEB-INF/jspc"/>
        
        <property name="jasper.classpath" refid="jasper.classpath"/>
        <!--echo message="jasper.classpath = ${jasper.classpath}"/-->
		<jasper2 uriroot="@{uriroot}"
			package="org.apache.jasper.jspc"
			outputdir="@{todir}/WEB-INF/jspc"
			validatexml="false"
			webXmlFragment="@{todir}/WEB-INF/generated_web.xml"
			addWebXmlMappings="true"
            verbose="0"
            classpath="${jasper.classpath}"/>
		<!--
		  Compile them cleanly, jasper is not nice for this so use javac directly
		  Note that precompilation may not work with weblogic (see weblogic docs)
		  -->
		<mkdir dir="@{todir}/WEB-INF/classes"/>
		<depend srcdir="@{todir}/WEB-INF/jspc" destdir="@{todir}/WEB-INF/classes">
			<classpath path="${jasper.classpath}"/>
		</depend>
		<javac srcdir="@{todir}/WEB-INF/jspc" destdir="@{todir}/WEB-INF/classes" debug="on"
            includeantruntime="no" encoding="iso8859-1">
            <classpath path="${jasper.classpath}"/>
        </javac>
        </sequential>
    </macrodef>    
	
	<!--
        Target that finds duplicated code. 
        You must install jar files from pmd.sourceforge.net in ANT_HOME/lib so the taskdef finds the class
	-->
	<!--
	<target name="cpd">
	    <taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask" />
	    <cpd minimumTokenCount="100" outputFile="${src}/cpd.txt">
	        <fileset dir="${src.java}/se/anatom">
	            <include name="**/*.java"/>
	        </fileset>
	    </cpd>
	</target>
	-->

	<!-- Target that runs the Lint code check from http://www.jutils.com/.
         You must install lint4j.jar in ANT_HOME/lib so the taskdef finds the class
	-->
	<!--
	<target name="lint" description="Perform checks on EJBCA source code">
		<taskdef name="lint4j" classname="com.jutils.lint4j.ant.Lint4jAntTask" />
	  <lint4j packages="se.anatom.ejbca.*" level="3">
	    <sourcepath>
		  <dirset dir="${src}">
			<include name="**/java" />
		  </dirset>
		</sourcepath>
		<classpath>
		  <fileset dir="${lib}">
			<include name="**/*.jar" />
		  </fileset>
		  <dirset dir="${tmp}">
			<include name="bin/classes" />
		  </dirset>
          <path refid="j2ee.classpath" />
		</classpath>
	    <formatters>
	      <formatter type="text" />
	      <formatter type="text" toFile="ejbca-lint.out"/>
	    </formatters>
	  </lint4j>
	</target>
    -->
	
</project>