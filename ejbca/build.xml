<?xml version="1.0"?>
<project name="ejbca" default="build" basedir=".">

  <!-- Give user a chance to override without editing this file
       (and without typing -D each time it compiles it) -->
  <property file=".ejbca.properties"/>
  <property file="${user.home}/.ejbca.properties"/>
  <property environment="env"/>

  <property name="jboss.home" value="${env.JBOSS_HOME}"/>

  <!-- set global properties for this build -->
  <property name="src" value="./src"/>
  <property name="javasrc" value="${src}/java"/>
  <property name="lib" value="./lib"/>
  <property name="tmp" value="./tmp" />
  <property name="build" value="${tmp}/classes"/>
  <property name="test.dir" value="${tmp}/junit"/>
  <property name="test.src.dir" location="${src}/test"/>
  <property name="dist"  value="./dist"/>
  <property name="apidoc" value="./doc/api"/>

  <property name="apply.src" value="${src}/publicweb/apply" />
  <property name="apply.build" value="${tmp}/publicweb/apply.war" />
  <property name="applyjar" value="${dist}/apply.war" />

  <property name="webdist.src" value="${src}/publicweb/webdist" />
  <property name="webdist.build" value="${tmp}/publicweb/webdist.war" />
  <property name="webdistjar" value="${dist}/webdist.war" />

  <property name="sampleauth.src" value="${src}/ca/sampleauth" />
  <property name="sampleauth.build" value="${tmp}/ca/sampleauth.war" />
  <property name="sampleauthjar" value="${dist}/sampleauth.war" />

  <property name="status.src" value="${src}/publicweb/status"/>
  <property name="status.build" value="${tmp}/publicweb/status.war"/>
  <property name="statusjar" value="${dist}/status.war"/>

  <property name="adminweb.src" value="${src}/adminweb" />
  <property name="adminweb.build" value="${tmp}/adminweb.war" />
  <property name="adminwebjar" value="${dist}/adminweb.war" />

  <property name="demoweb.src" value="${src}/demoweb" />
  <property name="demoweb.build" value="${tmp}/demoweb.war" />
  <property name="demowebjar" value="${dist}/demoweb.war" />

  <property name="caear.src" value="${src}/ca/ear" />
  <property name="caear.earsrc" value="${caear.src}/ear" />
  <property name="caear.warsrc" value="${src}/publicweb/root" />
  <property name="caear.build" value="${tmp}/ca/ear" />
  <property name="caear.warbuild" value="${tmp}/publicweb/publicwebroot.war" />
  <property name="caear.earbuild" value="${tmp}/ca/ear/ear" />
  <property name="carootwar" value="${caear.earbuild}/publicwebroot.war" />
  <property name="caear" value="${dist}/ejbca-ca.ear" />

  <property name="caearnora.build" value="${tmp}/canora/ear" />
  <property name="caearnora.warbuild" value="${tmp}/canora/ear/publicwebroot.war" />
  <property name="caearnora.earbuild" value="${tmp}/canora/ear/ear" />
  <property name="canorarootwar" value="${caearnora.earbuild}/publicwebroot.war" />
  <property name="caearnora" value="${dist}/ejbca-canora.ear" />

  <property name="createcrlservice.build" value="${tmp}/crlcreateservice.jar" />
  <property name="createcrlservicejar" value="${dist}/crlcreateservice.jar" />

  <!-- Jar with class files needed for administration, i.e. ca, ra, jobrunner -->
  <property name="adminjar.cli" value="${src}/cli" />
  <property name="adminjar.build" value="${tmp}/adminjar" />
  <property name="adminjar" value="./admin.jar" />

  <property name="jar.classpath" value="lib/ejb-utils.jar"/>

    <path id="ext.classpath">
        <fileset dir="lib/ext" includes="*.jar"/>
    </path>
    
    <path id="compile.classpath">
        <path refid="ext.classpath"/>
        <fileset dir="lib" includes="*.jar"/>
    </path>

    <path id="j2ee.classpath">
        <fileset dir="${jboss.home}/client">
            <include name="jbossall-client.jar"/>
        </fileset>
    </path>

    <path id="test.compile.classpath">
        <path refid="compile.classpath"/>
        <path location="${build}"/>
        <path refid="j2ee.classpath"/>
    </path>

    <!-- those are the default values used within JBoss for easy startup -->
    <property name="datasource.jndi-name" value="ejbcaDS"/>
    <property name="database.name" value="hsqldb"/>
    <property name="database.url" value="jdbc:hsqldb:$${jboss.server.data.dir}$${/}hypersonic$${/}ejbcaDB"/>
    <property name="database.driver" value="org.hsqldb.jdbcDriver"/>
    <property name="database.username" value="sa"/>
    <property name="database.password" value=""/>

    <!-- 
        ex: /my/path/myfile-postgres.xml -> /my/path/myfile.xml
    -->
    <mapper id="database.mapper" type="regexp" from="^(.*)-${database.name}\.(.*)$$" to="\1.\2"/>
    <!-- does some replace magic to change the datasource jndi name -->
    <filterchain id="datasource.filters">
    <tokenfilter>
        <replacestring from="@datasource.jndi-name@" to="${datasource.jndi-name}"/>
        <!-- this is just for temporary compatibility -->
        <replacestring from="DefaultDS" to="${datasource.jndi-name}"/>
    </tokenfilter>
    </filterchain>


  <!-- =================================================================== -->
  <!-- Create the time stamp and build directory -->
  <!-- =================================================================== -->
  <target name="init" depends="jboss:init">
      <echo>
---------- CONFIGURATION PROPERTIES ----------
jboss.home           = ${jboss.home}
datasource.jndi-name = ${datasource.jndi-name}
database.name        = ${database.name}
database.url         = ${database.url}
database.driver      = ${database.driver}
database.username    = ${database.username}
database.password    = ${database.password}
      </echo>
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
    <mkdir dir="${dist}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Clean ALL                                                           -->
  <!-- =================================================================== -->
  <target name="clean">
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
    <delete dir="${tmp}"/>
    <delete dir="${apidoc}"/>
    <delete file="admin.jar"/>
    <delete>
        <fileset dir="${javasrc}"
includes="**/*.class,**/*.log,**/.nbattrs,**/filesystem.attributes"/>
    </delete>

  </target>

  <!-- =================================================================== -->
  <!-- Build ALL                                                           -->
  <!-- =================================================================== -->
  <target name="build" depends="compile,test:compile, apply.war, status.war, webdist.war, ca.jar, log.jar, authorization.jar,
  hardtoken.jar, keyrecovery.jar, ca.ear, ra.jar, adminweb.war, admin.jar">
  </target>

  <!-- =================================================================== -->
  <!-- Compile java sources                                                -->
      <!-- =================================================================== -->
    <target name="compile" depends="init">
        <javac srcdir="${javasrc}" destdir="${build}" debug="on" includeantruntime="no">
            <classpath refid="compile.classpath"/>
            <exclude name="**/appserver/**"/> <!-- appserver specific files are built separtely-->
        </javac>
    </target>

    <target name="test:compile" depends="compile" description="compile JUnit testcases">
        <mkdir dir="${test.dir}"/>
        <javac srcdir="${test.src.dir}" destdir="${test.dir}" debug="on" includeantruntime="no">
            <classpath refid="test.compile.classpath"/>
        </javac>
        <!-- jndi.properties needs to be in the classpath -->
        <copy file="${javasrc}/jndi.properties" todir="${test.dir}"/>
    </target>

    <target name="test:run" depends="test:compile,jboss:assert-run" description="run JUnit testcases">
        <delete dir="${test.dir}/reports"/>
        <mkdir dir="${test.dir}/reports/html"/>
        <junit printsummary="yes" haltonfailure="no">
            <classpath>
                <path refid="test.compile.classpath"/>
                <path location="${test.dir}"/>
            </classpath>
            <formatter type="xml"/>
            <batchtest fork="yes" todir="${test.dir}/reports">
                <fileset dir="${test.dir}">
                    <include name="**/Test*" />
                    <exclude name="**/TestRunner*" />
                </fileset>
            </batchtest>
        </junit>
        <junitreport todir="${test.dir}/reports">
            <fileset dir="${test.dir}/reports">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${test.dir}/reports/html"/>
        </junitreport>
    </target>


  <!-- =================================================================== -->
  <!-- Build apply part                                                    -->
  <!-- =================================================================== -->
    <target name="apply.war" depends="compile" description="build the jar file">
        <mkdir dir="${apply.build}"/>
        <copy todir="${apply.build}">
            <fileset dir="${apply.src}"/>
        </copy>
        <mkdir dir="${apply.build}/WEB-INF/lib"/>
        <jar jarfile="${apply.build}/WEB-INF/lib/apply.jar">
            <fileset dir="${build}">
                <include name="se/anatom/ejbca/apply/**/*.class"/>
            </fileset>
        </jar>

        <war destfile="${dist}/apply.war" webxml="${apply.build}/WEB-INF/web.xml">
            <fileset dir="${apply.build}" excludes="WEB-INF/**"/>
            <lib dir="${apply.build}/WEB-INF/lib" includes="apply.jar"/>
        </war>
  </target>

    <!-- =================================================================== -->
    <!-- Build status part                                                                                                                             -->
    <!-- =================================================================== -->
    <target name="status.war" depends="compile">
        <mkdir dir="${status.build}"/>
        <copy todir="${status.build}">
            <fileset dir="${status.src}"/>
        </copy>
       <mkdir dir="${status.build}/WEB-INF/lib"/>
        <jar jarfile="${status.build}/WEB-INF/lib/status.jar">
            <fileset dir="${build}">
                <include name="se/anatom/ejbca/protocol/OCSPServlet*.class"/>
                <include name="se/anatom/ejbca/protocol/exception/MalformedRequestException*.class"/>
            </fileset>
        </jar>

        <war destfile="${dist}/status.war" webxml="${apply.build}/WEB-INF/web.xml">
            <fileset dir="${status.build}" excludes="WEB-INF/**"/>
            <lib dir="${status.build}/WEB-INF/lib" includes="status.jar"/>
        </war>
    </target>

  <!-- =================================================================== -->
  <!-- Build sampleauth part                                               -->
  <!-- =================================================================== -->
    <target name="sampleauth.war" depends="compile">
    <mkdir    dir="${sampleauth.build}"/>
    <copy todir="${sampleauth.build}">
        <fileset dir="${sampleauth.src}"/>
    </copy>
    <jar jarfile="${sampleauth.build}/WEB-INF/lib/sampleauth.jar">
        <fileset dir="${build}">
            <include name="se/anatom/ejbca/samples/AuthResult*.class"/>
            <include name="se/anatom/ejbca/samples/RemoteVerify*.class"/>
        </fileset>
    </jar>
    <copy todir="${sampleauth.build}/WEB-INF/lib">
        <fileset dir="${lib}"/>
    </copy>

    <war destfile="${dist}/sampleauth.war" webxml="${apply.build}/WEB-INF/web.xml">
        <fileset dir="${sampleauth.build}" excludes="WEB-INF/**"/>
        <lib dir="${sampleauth.build}/WEB-INF/lib" includes="*.jar"/>
    </war>
  </target>

    <property name="ejb-utils.jar.dir" location="${tmp}/ejb-utils.jar"/>
    <property name="ejb-utils.jar" location="${dist}/ejb-utils.jar" description="Utilities used in EJBs"/>
    <target name="jar:ejb-utils" depends="compile">
        <mkdir dir="${ejb-utils.jar.dir}"/>
        <copy todir="${ejb-utils.jar.dir}">
            <fileset dir="${build}">
                <include name="se/anatom/ejbca/protocol/**"/> <!-- we've got more than necessary -->
                <include name="se/anatom/ejbca/exception/**"/>
                <include name="se/anatom/ejbca/*.*"/>
                <include name="se/anatom/ejbca/util/**/*.*"/>
            </fileset>
        </copy>
        <jar basedir="${ejb-utils.jar.dir}" jarfile="${ejb-utils.jar}">
            <manifest>
                <!-- todo: autogenerate this from a fileset -->
                <attribute name="Class-Path" value="bcmail-jdk14-122.jar bcprov-jdk14-122.jar log4j-1.2.7.jar ldap.jar commons-lang-2.0.jar commons-collections.jar commons-fileupload-1.0.jar"/>
            </manifest>
        </jar>
    </target>

  <!-- =================================================================== -->
  <!-- Build ca part                                                    -->
  <!-- =================================================================== -->
  <target name="ca.jar" depends="compile">
    <!-- this one is a bit messy as the layout does not match the other one -->
    <ejb-dd-copy todir="${tmp}/ca-ejb.jar" dir="${src}/ca/ca"/>
    <ejb-jar name="ca">
        <filesets>
            <!-- that should be another ejb-jar, but keep it here for now -->
            <fileset dir="${build}" includes="se/anatom/ejbca/upgrade/**"/>
            <fileset dir="${src}" includes="upgrade/**/*.sql"/>
        </filesets>         
    </ejb-jar>
  </target>

  <!-- =================================================================== -->
  <!-- Build log part                                                    -->
  <!-- =================================================================== -->
  <target name="log.jar" depends="compile">
    <ejb-jar name="log">
        <filesets>
            <fileset dir="${src}/log" includes="logdeviceproperties/**"/>
        </filesets>
    </ejb-jar>
  </target>

  <!-- =================================================================== -->
  <!-- Build authorization part                                            -->
  <!-- =================================================================== -->
  <target name="authorization.jar" depends="compile">
    <ejb-jar name="authorization"/>
  </target>

  <!-- =================================================================== -->
  <!-- Build hard token part                                               -->
  <!-- =================================================================== -->
  <target name="hardtoken.jar" depends="compile">
    <ejb-jar name="hardtoken"/>
  </target>

  <!-- =================================================================== -->
  <!-- Build key recovery part                                             -->
  <!-- =================================================================== -->
  <target name="keyrecovery.jar" depends="compile">
    <ejb-jar name="keyrecovery"/>
  </target>


  <!-- =================================================================== -->
  <!-- Build ra part                                                       -->
  <!-- =================================================================== -->
  <target name="ra.jar" depends="compile">
    <ejb-jar name="ra"/>
  </target>

  <!-- =================================================================== -->
  <!-- Build webdist part                                                  -->
  <!-- =================================================================== -->
  <target name="webdist.war" depends="compile">
    <mkdir dir="${webdist.build}/WEB-INF/lib"/>
    <copy todir="${webdist.build}">
        <fileset dir="${webdist.src}">
            <include name="**/**"/>
        </fileset>
    </copy>

    <jar jarfile="${webdist.build}/WEB-INF/lib/webdist.jar">
      <fileset dir="${build}">
        <include name="se/anatom/ejbca/webdist/**"/>
      </fileset>
    </jar>

    <war basedir="${webdist.build}" destfile="${webdistjar}"
        webxml="${webdist.build}/WEB-INF/web.xml"
        excludes="WEB-INF/web.xml">
    </war>
  </target>

  <!-- =================================================================== -->
  <!-- Build admin web part                                                -->
  <!-- =================================================================== -->
    <target name="adminweb.war" depends="compile">
        <mkdir dir="${adminweb.build}/WEB-INF/lib"/>
        <copy todir="${adminweb.build}">
            <fileset dir="${adminweb.src}">
                <exclude name="**/tomcat*-service.xml"/>
                <!--exclude name="languages/**"/-->
            </fileset>
        </copy>

        <!-- copy resource bundles and escape them in unicode -->
        <!--copy todir="${adminweb.build}/WEB-INF/classes">
            <fileset dir="${adminweb.src}">
            <include name="languages/*_*.properties"/>
            </fileset>
            <filterchain>
            <filterreader classname="org.apache.tools.ant.filters.EscapeUnicode"/>
            </filterchain>
        </copy-->

        <jar jarfile="${adminweb.build}/WEB-INF/lib/adminweb.jar">
            <fileset dir="${build}">
            <include name="se/anatom/ejbca/webdist/**"/>
            <include name="se/anatom/ejbca/apply/**"/>
            </fileset>
        </jar>

        <war basedir="${adminweb.build}" destfile="${dist}/adminweb.war"
            webxml="${adminweb.build}/WEB-INF/web.xml"
            excludes="WEB-INF/web.xml">
        </war>
  </target>

  <!-- =================================================================== -->
  <!-- Build demo web part                                              -->
  <!-- =================================================================== -->
  <target name="demoweb.war" depends="compile">
    <mkdir    dir="${demoweb.build}/WEB-INF/lib"/>
    <copy todir="${demoweb.build}">
        <fileset dir="${demoweb.src}"/>
    </copy>

    <jar jarfile="${demoweb.build}/WEB-INF/lib/demoweb.jar">
        <fileset dir="${build}">
            <include name="se/anatom/ejbca/webdist/**/*.class"/>
        </fileset>
    </jar>

    <war basedir="${demoweb.build}" destfile="${demowebjar}"
        webxml="${demoweb.build}/WEB-INF/web.xml"
        excludes="WEB-INF/web.xml">
    </war>
  </target>

  <!-- =================================================================== -->
  <!-- Build admin jar                                                     -->
  <!-- =================================================================== -->
  <target name="admin.jar" depends="compile">
    <mkdir dir="${adminjar.build}"/>
         <copy todir="${adminjar.build}">
        <fileset dir="${adminjar.cli}">
            <include name="*.properties"/>
       </fileset>
      </copy>
     <copy todir="${adminjar.build}">
        <fileset dir="${build}">
            <include name="se/anatom/ejbca/IJobRunner*.class"/>
            <include name="se/anatom/ejbca/SecConst*.class"/>
            <include name="se/anatom/ejbca/util/*.class"/>
            <include name="se/anatom/ejbca/util/query/*.class"/>
            <include name="se/anatom/ejbca/util/passgen/*.class"/>
            <include name="se/anatom/ejbca/admin/*.class"/>
            <include name="se/anatom/ejbca/batch/*.class"/>
            <include name="se/anatom/ejbca/ca/caadmin/I*.class"/>
            <include name="se/anatom/ejbca/ca/caadmin/*Info.class"/>
            <include name="se/anatom/ejbca/ca/store/*Info.class"/>
            <include name="se/anatom/ejbca/ca/store/ICertificateStore*.class"/>
            <include name="se/anatom/ejbca/ca/store/certificateprofiles/*.class"/>
            <include name="se/anatom/ejbca/ca/publisher/IPublisher*.class"/>
            <include name="se/anatom/ejbca/ca/sign/ISignSession*.class"/>
            <include name="se/anatom/ejbca/ca/crl/RevokedCertInfo*.class"/>
            <include name="se/anatom/ejbca/ca/crl/ICreateCRL*.class"/>
            <include name="se/anatom/ejbca/ca/store/CertificateData*.class"/>
            <include name="se/anatom/ejbca/ca/store/ICertificateStore*.class"/>
            <include name="se/anatom/ejbca/ra/*.class"/>
            <include name="se/anatom/ejbca/exception/**/*.class"/>
            <include name="se/anatom/ejbca/ca/exception/**/*.class"/>
            <include name="se/anatom/ejbca/ra/exception/**/*.class"/>
            <include name="se/anatom/ejbca/ra/raadmin/AdminPreference.class"/>
            <include name="se/anatom/ejbca/ra/raadmin/UserDoesntFullfillEndEntityProfile.class"/>
            <include name="se/anatom/ejbca/ra/raadmin/IRaAdminSessionHome.class"/>
            <include name="se/anatom/ejbca/ra/raadmin/IRaAdminSessionRemote.class"/>
            <include name="se/anatom/ejbca/ra/raadmin/EndEntityProfile.class"/>
            <include name="se/anatom/ejbca/ra/raadmin/GlobalConfiguration.class"/>
            <include name="se/anatom/ejbca/ra/raadmin/EndEntityProfileExistsException.class"/>
            <include name="se/anatom/ejbca/authorization/IAuthorizationSessionHome.class"/>
            <include name="se/anatom/ejbca/authorization/IAuthorizationSessionRemote.class"/>
            <include name="se/anatom/ejbca/authorization/AdminGroup.class"/>
            <include name="se/anatom/ejbca/authorization/*Exception.class"/>
            <include name="se/anatom/ejbca/authorization/UserEntity.class"/>
            <include name="se/anatom/ejbca/authorization/AdminInformation.class"/>
            <include name="se/anatom/ejbca/hardtoken/AvailableHardToken.class"/>
            <include name="se/anatom/ejbca/hardtoken/IHardTokenSessionHome.class"/>
            <include name="se/anatom/ejbca/hardtoken/IHardTokenSessionRemote.class"/>
            <include name="se/anatom/ejbca/hardtoken/IHardTokenBatchJobSessionHome.class"/>
            <include name="se/anatom/ejbca/hardtoken/IHardTokenBatchJobSessionRemote.class"/>
            <include name="se/anatom/ejbca/hardtoken/HardTokenIssuer.class"/>
            <include name="se/anatom/ejbca/hardtoken/HardTokenIssuerData.class"/>
            <include name="se/anatom/ejbca/hardtoken/*Exception.class"/>
            <include name="se/anatom/ejbca/hardtoken/hardtokentypes/*.class"/>
            <include name="se/anatom/ejbca/hardtoken/hardtokenprofiles/*.class"/>
            <include name="se/anatom/ejbca/hardtoken/HardTokenData.class"/>
            <include name="se/anatom/ejbca/hardtoken/UnavailableTokenException.class"/>
            <include name="se/anatom/ejbca/hardtoken/HardTokenExistsException.class"/>
            <include name="se/anatom/ejbca/hardtoken/HardTokenDoesntExistsException.class"/>
            <include name="se/anatom/ejbca/keyrecovery/IKeyRecoverySessionRemote.class"/>
            <include name="se/anatom/ejbca/keyrecovery/IKeyRecoverySessionHome.class"/>
            <include name="se/anatom/ejbca/keyrecovery/KeyRecoveryData.class"/>
            <include name="se/anatom/ejbca/log/Admin.class"/>
            <include name="se/anatom/ejbca/protocol/IResponseMessage.class"/>
            <include name="se/anatom/ejbca/protocol/IRequestMessage.class"/>
            <include name="se/anatom/ejbca/protocol/PKCS10RequestMessage.class"/>
            <include name="se/anatom/ejbca/protocol/IResponseMessage.class"/>
            <include name="se/anatom/ejbca/protocol/X509ResponseMessage.class"/>
            <include name="se/anatom/ejbca/ra/raadmin/DNFieldExtractor.class"/>
            <include name="se/anatom/ejbca/ca/caadmin/extendedcaservices/ExtendedCAServiceRequest.class"/>
            <include name="se/anatom/ejbca/ca/caadmin/extendedcaservices/ExtendedCAServiceResponse.class"/>
            <include name="se/anatom/ejbca/ca/caadmin/extendedcaservices/IllegalExtendedCAServiceRequestException.class"/>
            <include name="se/anatom/ejbca/ca/caadmin/extendedcaservices/ExtendedCAServiceRequestException.class"/>
            <include name="se/anatom/ejbca/ca/caadmin/extendedcaservices/ExtendedCAServiceNotActiveException.class"/>
            <include name="se/anatom/ejbca/ca/caadmin/extendedcaservices/OCSPCAServiceInfo.class"/>
            <include name="se/anatom/ejbca/ca/caadmin/extendedcaservices/ExtendedCAServiceInfo.class"/>
            <include name="se/anatom/ejbca/upgrade/*.class"/>
       </fileset>
      </copy>
    <!-- Jar the admin.jar package together -->
    <jar basedir="${adminjar.build}" jarfile="${adminjar}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Build CA-ear                                                        -->
  <!-- =================================================================== -->
  <target name="ca.ear" depends="apply.war, status.war, webdist.war, ca.jar, ra.jar, adminweb.war, log.jar, hardtoken.jar, keyrecovery.jar, authorization.jar, jar:ejb-utils">
    <mkdir dir="${caear.build}"/>
    <copy todir="${caear.earbuild}">
        <fileset dir="${caear.earsrc}">
            <exclude name="META-INF/application-nora.xml"/>
        </fileset>
    </copy>
    <copy todir="${caear.warbuild}">
        <fileset dir="${caear.warsrc}"/>
    </copy>

    <war basedir="${caear.warbuild}" destfile="${carootwar}"
        webxml="${caear.warbuild}/WEB-INF/web.xml"
        excludes="WEB-INF/web.xml"/>

    <copy todir="${caear.earbuild}">
        <fileset dir="${dist}">
            <include name="*-ejb.jar"/>
            <include name="*.war"/>
        </fileset>
    </copy>
    <copy todir="${caear.earbuild}/lib">
        <fileset dir="${dist}">
            <include name="ejb-utils.jar"/>
        </fileset>
        <fileset dir="${lib}">
            <include name="bcmail-jdk14-122.jar"/>
            <include name="bcprov-jdk14-122.jar"/>
            <include name="log4j-1.2.7.jar"/>
            <include name="ldap.jar"/>
            <include name="commons-lang-2.0.jar"/>
            <include name="commons-collections.jar"/>
            <include name="commons-fileupload-1.0.jar"/>
        </fileset>
    </copy>

    <ear destfile="${caear}" basedir="${caear.earbuild}"
        appxml="${caear.earbuild}/META-INF/application.xml"
        excludes="META-INF/application.xml"/>
  </target>

  <!-- =================================================================== -->
  <!-- Build CA-ear without web-RA                                         -->
  <!-- =================================================================== -->
  <target name="canora.ear" depends="apply.war, status.war, webdist.war, ca.jar, ra.jar, log.jar">
    <mkdir dir="${caearnora.build}"/>
    <copy todir="${caearnora.earbuild}">
        <fileset dir="${caear.earsrc}">
            <exclude name="META-INF/application.xml"/>
        </fileset>
    </copy>
    <copy todir="${caearnora.warbuild}">
        <fileset dir="${caear.warsrc}"/>
    </copy>

    <!-- Rename application.xml without web-RA -->
    <copy file="${caearnora.build}/ear/META-INF/application-nora.xml"
        tofile="${caearnora.earbuild}/META-INF/application.xml"/>

    <!-- Jar the ROOT war together -->
    <war basedir="${caearnora.warbuild}" destfile="${canorarootwar}"
        webxml="${caearnora.warbuild}/WEB-INF/web.xml"
        excludes="WEB-INF/web.xml"/>

    <copy todir="${caearnora.earbuild}">
        <fileset dir="${dist}">
            <include name="webdist.war"/>
            <include name="apply.war"/>
            <include name="status.war"/>
            <include name="ca.jar"/>
            <include name="log.jar"/>
            <include name="authorization.jar"/>
            <include name="ra.jar"/>
        </fileset>
    </copy>
    <copy todir="${caearnora.earbuild}/lib">
        <fileset dir="${lib}">
            <include name="bcmail-jdk14-122.jar"/>
            <include name="bcprov-jdk14-122.jar"/>
            <include name="log4j-1.2.7.jar"/>
            <include name="ldap.jar"/>
            <include name="commons-lang-2.0.jar"/>
            <include name="commons-collections.jar"/>
        </fileset>
    </copy>

    <!-- Jar the ear package together -->
    <ear basedir="${caearnora.earbuild}" destfile="${caearnora}"
        appxml="${caearnora.earbuild}/META-INF/application.xml"
        excludes="META-INF/application.xml"/>
  </target>

  <!-- =================================================================== -->
  <!-- Build Javadoc part                                                  -->
  <!-- =================================================================== -->
  <target name="javadoc" depends="">
        <mkdir dir="${apidoc}"/>
        <javadoc packagenames="se.anatom.*"
                maxmemory="256m"
                sourcepath="${javasrc}"
                destdir="${apidoc}"
                extdirs="${lib}"
                author="true"
                version="true"
                use="true"
                windowtitle="EJBCA API"
                bottom="Copyright &#169; 2004 PrimeKey Solutions AB.">
        </javadoc>
  </target>

   <target name="jboss:init" description="Check that jboss.home is correct">
        <!--
            we could have a dedicated jboss for ejbca, so give users a chance to override
            otherwise, try to pick the one from environment if it exists
            -->
        <condition property="jboss.home" value="${env.JBOSS_HOME}">
            <available file="${env.JBOSS_HOME}" type="dir"/>
        </condition>
        <fail message="Please set the property 'jboss.home' for this project" unless="jboss.home"/>
        <available file="${jboss.home}/client/jboss-j2ee.jar" property="jboss.home.valid"/>
        <fail message="'jboss.home' (${jboss.home}) does not seem to be a valid JBoss home directory" unless="jboss.home.valid"/>
        <echo message="Using jboss.home : ${jboss.home}"/>
   </target>

  <!--
    Assert that JBoss server is actually running on localhost:8080
    -->
  <target name="jboss:assert-run" description="Assert that JBoss server is running">
        <waitfor maxwait="2" maxwaitunit="second" timeoutproperty="jboss.notrunning">
            <http url="http://localhost:8080/web-console/"/>
        </waitfor>
        <fail message="Please execute JBoss server" if="jboss.notrunning"/>
  </target>

  <!-- ========================================================================== -->
  <!-- Upgrades the database for a new version of ejbca                           -->
  <!-- ========================================================================== -->
  <target name="upgrade" depends="admin.jar">
        <!-- Get input -->
        <input
            message="Type of system:"
            validargs="unix,windows"
            addproperty="ejbca.OS"
          />
        <input
            message="Hostname for adminweb (default 127.0.0.1):"
            addproperty="ejbca.URL"
            defaultvalue="127.0.0.1"
          />
        <input
            message="Type of database:"
            validargs="mysql"
            addproperty="ejbca.DB"
          />
        <!-- validargs="hsql,oracle,mssql,mysql,postgres,sapdb,hsqldb,sybase" -->
        <input
            message="Data source (default java:/DefaultDS):"
            addproperty="ejbca.DS"
            defaultvalue="java:/DefaultDS"
          />
        <input
            message="CA name(default MyCA):"
            addproperty="ejbca.CA"
            defaultvalue="MyCA"
          />
        <input
            message="CA keystore filename (default $JBOSS_HOME/server/default/conf/server.p12):"
            addproperty="ejbca.KS"
            defaultvalue="${jboss.home}/server/default/conf/server.p12"
          />
        <input
            message="CA keystore password:"
            addproperty="ejbca.KSPWD"
          />
        <java classname="se.anatom.ejbca.admin.Upgrade" fork="true">
             <sysproperty key="ejbcaOS" value="${ejbca.OS}"/>
             <sysproperty key="ejbcaURL" value="${ejbca.URL}"/>
             <sysproperty key="ejbcaDB" value="${ejbca.DB}"/>
             <sysproperty key="ejbcaDS" value="${ejbca.DS}"/>
             <sysproperty key="ejbcaCA" value="${ejbca.CA}"/>
             <sysproperty key="ejbcaKS" value="${ejbca.KS}"/>
             <sysproperty key="ejbcaKSPWD" value="${ejbca.KSPWD}"/>
             <classpath>
                <pathelement location="."/>
                <pathelement location="${adminjar}"/>
                <fileset dir="${jboss.home}/client" includes="**/*.jar"/>
                <fileset dir="${lib}" includes="**/*.jar"/>
             </classpath>
        </java>
  </target>

  <!-- ============================================================================= -->
  <!-- Batch generate certificates for users with clear text password and right type -->
  <!-- ============================================================================= -->
  <target name="batch" depends="admin.jar">
        <java classname="se.anatom.ejbca.batch.BatchMakeP12" fork="true">
            <classpath>
                <pathelement location="${adminjar}"/>
                <fileset dir="${jboss.home}/client" includes="**/*.jar"/>
                <fileset dir="${lib}" includes="**/*.jar"/>
            </classpath>
        </java>
  </target>

  <!-- =================================================================== -->
  <!-- Build Jboss Specific Services                       -->
  <!-- =================================================================== -->
  <target name="jbossservices" depends="compile">
    <path id="jbossservices.classpath">
      <pathelement location="${jboss.home}/lib/jboss-system.jar"/>
      <pathelement location="${jboss.home}/lib/jboss-common.jar"/>
      <pathelement location="${jboss.home}/lib/jboss-jmx.jar"/>
    </path>
      <javac srcdir="${javasrc}" extdirs="${lib}" destdir="${build}" debug="on">
        <exclude name="**/CVS/**"/>
        <include name="**/appserver/**"/> <!-- appserver specific files are built separtely-->
        <classpath refid="jbossservices.classpath"/>
      </javac>
    <copy todir="${javasrc}">
        <fileset dir="${build}">
                <include name="**/appserver/*.class"/>
                <include name="**/appserver/**/*.class"/>
        </fileset>
    </copy>


    <mkdir dir="${createcrlservice.build}"/>
    <copy todir="${createcrlservice.build}">
      <fileset dir="${src}/appserver/jboss">
        <include name="crlcreate-service.xml"/>
      </fileset>
    </copy>
    <copy todir="${createcrlservice.build}">
        <fileset dir="${build}">
                <include name="se/anatom/ejbca/appserver/jboss/CRLCreate*.class"/>
                <include name="se/anatom/ejbca/ca/crl/ICreateCRL*.class"/>
                <include name="se/anatom/ejbca/log/Admin.class"/>
                <exclude name="se/anatom/ejbca/**/*Test*"/>
        </fileset>
    </copy>
    <jar basedir="${createcrlservice.build}" jarfile="${createcrlservicejar}">
        <manifest>
            <attribute name="Class-Path" value="${jar.classpath}"/>
        </manifest>
    </jar>
  </target>

  <!-- =================================================================== -->
  <!--Deploy Jboss Specific Services                       -->
  <!-- =================================================================== -->
  <target name="deployjbossservices" depends="jboss:assert-run,jbossservices, deploy">
    <copy file="${createcrlservicejar}" tofile="${jboss.home}/server/default/deploy/createcrlservice.jar" verbose="true"/>
  </target>

  <!-- ======================================================================= -->
  <!-- Deploy EJBCA ear to JBoss                                               -->
  <!-- ======================================================================= -->
    <target name="deploy" depends="jboss:assert-run, ca.ear, admin.jar">
        <property name="deploy.dir" location="${jboss.home}/server/default/deploy"/>
        <copy todir="${deploy.dir}" overwrite="true">
            <fileset dir="src/appserver/jboss" includes="ejbca-ds.xml"/>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
    <copy file="${caear}" tofile="${jboss.home}/server/default/deploy/ejbca-ca.ear" verbose="true"/>
  </target>

  <!-- ======================================================================= -->
  <!-- Deploy ear without Admin Web-GUI to JBoss                               -->
  <!-- ======================================================================= -->
  <target name="deploy_nora" depends="jboss:assert-run,canora.ear">
    <copy file="${caearnora}" tofile="${jboss.home}/server/default/deploy/ejbca-canora.ear" verbose="true"/>
  </target>

  <!-- ==================================================================== -->
  <!-- Defines the project classpath                                        -->
  <!-- ==================================================================== -->
  <path id="project.classpath" >
    <!-- our compilation directory -->
    <pathelement location="${javasrc}" />
    <!-- needed 3rd party libraries -->
    <fileset dir="${lib}" >
      <include name="**/*.jar" />
    </fileset>
  </path>

  <!-- ==================================================================== -->
  <!-- Formats all source files                                             -->
  <!-- ==================================================================== -->
  <target name="format" depends="compile">

    <!--
      Defines the Jalopy task
    -->
    <taskdef name="jalopy" classname="de.hunsicker.jalopy.plugin.ant.AntPlugin">
      <classpath>
        <fileset dir="/java/jalopy/lib">
          <include name="*.jar" />
        </fileset>
      </classpath>
    </taskdef>
    <!--
      Invokes Jalopy as follows:
      - All formatted files will have unix fileformat (\n)
      - Load your code convention from the given url
      - Override the convention to use the file history feature
      - Override the convention to use alder32 checksums of files for history testing
      - Override the convention to use loglevel "info"
      - Override the convention to use 2 threads
      - The import optimization feature will work (if enabled in the active
        convention), because a classpath reference is specified

        Don't forget to setup an include pattern as Jalopy truly expects
        valid Java source files as input!
      -->
    <jalopy fileformat="unix"
            convention="ejbcaConventions.xml"
            history="file"
            historymethod="adler32"
            loglevel="warn"
            threads="2"
            classpathref="project.classpath">
      <fileset dir="${javasrc}">
        <include name="**/*.java" />
      </fileset>
    </jalopy>
  </target>

    <!--
        this macro is a specialized copy for deployment descriptors (dd).
        In the wonderful world of J2EE nothing it is always painful
        Basically it is copying the appropriate DD for each J2EE server
        and does some magic replace for datasource jndi name:
        @datasource.jndi-name@
    -->
    <macrodef name="ejb-dd-copy">
        <attribute name="todir"/>
        <attribute name="dir"/>
        <sequential>

        <!-- standard configuration.. should be modified with xdoclet -->
        <copy todir="@{todir}" overwrite="true">
            <fileset dir="@{dir}" includes="META-INF/ejb-jar.xml"/>
            <filterchain refid="datasource.filters"/>
        </copy>
        
        <!-- jboss configuration -->
        <copy todir="@{todir}" overwrite="true">
            <fileset dir="@{dir}" includes="META-INF/jbosscmp-jdbc*.xml"/>
            <filterchain refid="datasource.filters"/>
            <mapper refid="database.mapper"/>
        </copy>
        <copy todir="@{todir}" overwrite="true">
                <fileset dir="@{dir}" includes="META-INF/jboss.xml"/>
        </copy>
        
        <!-- weblogic configuration -->     
        <copy todir="@{todir}" overwrite="true">
            <fileset dir="@{dir}" includes="META-INF/weblogic*.xml"/>
            <filterchain refid="datasource.filters"/>
        </copy>
        </sequential>
    </macrodef>

    <!--
    Macro that creates an exploded war based on the structure in use for this
    project. The 'name' attributes should match the se.anatom.ejbca.name package
    and it expects to find a directory 'name' in src with the META-INF as the
    subdirectory.
    -->
    <macrodef name="ejb-jar">
        <attribute name="name"/>
        <element name="filesets" optional="yes"/>
        <sequential>
            <property name="@{name}.id" value="@{name}-ejb.jar"/>
            <property name="@{name}.build.dir" value="${tmp}/${@{name}.id}"/>
            <mkdir dir="${@{name}.build.dir}"/>
            
            <!-- copy/configure the dds -->
            <ejb-dd-copy todir="${@{name}.build.dir}" dir="${src}/@{name}"/>
            
            <!-- copy the appropriate classes -->
            <copy todir="${@{name}.build.dir}">
                <fileset dir="${build}">
                <include name="se/anatom/ejbca/@{name}/**"/>
                </fileset>
                <!-- add extra classes, in case it is not enough -->
                <filesets/>
            </copy>
            
            <!-- jar all files -->
            <jar basedir="${@{name}.build.dir}" jarfile="${dist}/${@{name}.id}">
            <manifest>
                <attribute name="Class-Path" value="${jar.classpath}"/>
            </manifest>
            </jar>
        </sequential>
    </macrodef>



</project>
