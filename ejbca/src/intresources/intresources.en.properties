# File containing internal localization messages used by 
# log comments, approval notifications and some exceptions.
#
# The keys should be sections into which module the message
# originates from, example raadmin.msg1 or keyrecovery.testmessage
#
# ENGLISH VERSION

# This are resources only used with the test script
raadmin.testmsg       = Test ENG                        
raadmin.testparams    = Test {0} {1} {2} {3} {4} message {0} 


services.serviceadded             = Service {0} added.
services.erroraddingservice       = Error adding service {0}
services.notauthorizedtoadd       = Error, not authorized to add service : {0}
services.serviceedited            = Service {0} edited.
services.erroreditingservice      = Error service {0}.
services.notauthorizedto          = Error, not authorized to service : {0}
services.servicecloned            = New service {0}, used service {1} as template.
services.errorcloningservice      = Error adding service {0} using service {1} as template.
services.serviceremoved           = Service {0} removed.
services.errorremovingservice     = Error removing user data source {0}.
services.servicerenamed           = Service {0} renamed to {1}.
services.errorrenamingservice     = Error renaming Service  {0} to {1}.
services.serviceexecuted          = Service {0} executed successfully.
services.servicenotfound          = Service with id {0} not found.
services.serviceexecutionfailed   = Service {0} execution failed.
services.servicerunonothernode    = Service {0} have been executed on another node in the cluster, waiting.



# Notification resources

notification.newrequest.subject      = New EJBCA Approval Request (${approvalRequest.ID}) to ${approvalRequest.TYPE} have been made by ${requestAdmin.CN} ${requestAdmin.O}.

notification.newrequest.msg          = ${NL}${NL}An approval request to ${approvalRequest.TYPE} have been created by ${requestAdmin.CN} ${requestAdmin.O} at ${approvalRequest.DATE}${NL}${NL}To review and approve the request click on the link ${approvalRequest.APROVEURL} for more details. ${NL}${NL}${approvalReqiest.APPROVALSLEFT} more need to approve the action in order for it to be executed.

notification.requestconcured.subject = The EJBCA Approval Request (${approvalRequest.ID}) to ${approvalRequest.TYPE} have been concured by ${approvalAdmin.CN} ${approvalAdmin.O}.

notification.requestconcured.msg     = ${NL}${NL}The approval request to ${approvalRequest.TYPE} by ${requestAdmin.CN} ${requestAdmin.O} at ${approvalRequest.DATE} have been concured by ${approvalAdmin.CN} ${approvalAdmin.O}. ${NL}${NL}The approving administrator's comment on the action is: ${approvalRequest.APPROVALCOMMENT}${NL}${NL}But there is still a need for ${approvalReqiest.APPROVALSLEFT} authorized administrators to agree upon the action. To review and approve the request click on the link ${approvalRequest.APROVEURL} for more details. 

notification.requestapproved.subject = The EJBCA Approval Request (${approvalRequest.ID}) to ${approvalRequest.TYPE} have been APPROVED by ${approvalAdmin.CN} ${approvalAdmin.O}.

notification.requestapproved.msg     = ${NL}${NL}Depending on the type of request the requesting administrator can now access the information, or the action have been executed ${NL}${NL}The approving administrator's comment on the action is: ${approvalRequest.APPROVALCOMMENT}${NL}${NL}Click on the link ${approvalRequest.APROVEURL} for more details.

notification.requestrejected.subject = The EJBCA Approval Request (${approvalRequest.ID}) to ${approvalRequest.TYPE} have been REJECTED by ${approvalAdmin.CN} ${approvalAdmin.O}.

notification.requestrejected.msg     = ${NL}${NL}The approval request (${approvalRequest.ID}) to ${approvalRequest.TYPE} have been REJECTED by ${approvalAdmin.CN} ${approvalAdmin.O} and the action will not be performed. ${NL}${NL}The rejecting administrator's comment on the action is: ${approvalRequest.APPROVALCOMMENT}${NL}${NL}Click on the link ${approvalRequest.APROVEURL} for more details.

# Sign session resource
signsession.requestcert = Received certificate request for user {0} for CA {1} with certificate profile {2}
signsession.nouserinrequest = No username in request, request DN: {0}
signsession.nopasswordinrequest = No password in request
signsession.nokeyinrequest = No public key in request
signsession.wrongauthority = CA from request ({0}) does not match users CA ({1})!
signsession.nosuchuser = User not found: {0}
signsession.unsupportedkeytype = Unsupported public key ({0}), only RSA and ECDSA keys are supported.
signsession.illegalkeylength = Illegal key length: {0}
signsession.certificateissued = Certificate issued to user {0}
signsession.popverificationfailed = POPO verification failed.
signsession.canotactive = Signing CA {0} is not active.
signsession.caexpired = Signing CA {0} has expired.
signsession.canotfoundissuerusername = Can not find CA Id from issuerDN '{0}' or username '{1}'.
signsession.canotfoundcaid =  Invalid CA Id: {0}
signsession.createdcrl = Create CRL number: {0} 
signsession.errorcreatecrl = Error creating CRL
signsession.usertypeinvalid = "User type is USER_INVALID, cannot create certificate for this user."
signsession.errorcertprofiletype = Wrong type of Certificate Profile ({0}) for end entity. Only End Entity Certificate Profiles can be issued by signsession bean.
signsession.errorcertprofilenotauthorized = End Entity data contains a CA, {0}, which the Certificate Profile, {1}, isn't authorized to use.
 
caadmin.notauthorizedtoca = Administrator not authorized to create CA {0}.
caadmin.wrongcaid = Illegal CA id {0}, CA can not be created.
caadmin.caexistsid = CA with id {0} already exists.
caadmin.caexistsname = CA with name {0} already exists.
caadmin.errorcreatetoken = Error when creating CA token.
caadmin.errorcreatetokenpin = Error when creating hard CA token. Authorization code was wrong.
caadmin.errorcreateca = Could not create CA.

error.catokenoffline = CA token is offline for CA {0}.
error.unknown = Unknown error.

APADDENDENTITY            = add End Entity

APCHANGESTATUSENDENTITY   = change status of end entity

APEDITENDENTITY           = edit end entity

APKEYRECOVERY             = key recover

CLITOOL                   = Command Line Tool