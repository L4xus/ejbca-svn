# File containing internal localization messages used by 
# log comments, approval notifications and some exceptions.
#
# The keys should be sections into which module the message
# originates from, example raadmin.msg1 or keyrecovery.testmessage
#
# ENGLISH VERSION

# This are resources only used with the test script
raadmin.testmsg       = Test ENG                        
raadmin.testparams    = Test {0} {1} {2} {3} {4} message {0} 


services.serviceadded             = Service {0} added.
services.erroraddingservice       = Error adding service {0}
services.notauthorizedtoadd       = Error, not authorized to add service : {0}
services.serviceedited            = Service {0} edited.
services.erroreditingservice      = Error service {0}.
services.notauthorizedto          = Error, not authorized to service : {0}
services.servicecloned            = New service {0}, used service {1} as template.
services.errorcloningservice      = Error adding service {0} using service {1} as template.
services.serviceremoved           = Service {0} removed.
services.errorremovingservice     = Error removing user data source {0}.
services.servicerenamed           = Service {0} renamed to {1}.
services.errorrenamingservice     = Error renaming Service  {0} to {1}.
services.serviceexecuted          = Service {0} executed successfully.
services.servicenotfound          = Service with id {0} not found.
services.serviceexecutionfailed   = Service {0} execution failed.
services.servicerunonothernode    = Service {0} have been executed on another node in the cluster, waiting.



# Notification resources

notification.newrequest.subject      = New EJBCA Approval Request (${approvalRequest.ID}) to ${approvalRequest.TYPE} have been made by ${requestAdmin.CN} ${requestAdmin.O}.

notification.newrequest.msg          = ${NL}${NL}An approval request to ${approvalRequest.TYPE} have been created by ${requestAdmin.CN} ${requestAdmin.O} at ${approvalRequest.DATE}${NL}${NL}To review and approve the request click on the link ${approvalRequest.APROVEURL} for more details. ${NL}${NL}${approvalReqiest.APPROVALSLEFT} more need to approve the action in order for it to be executed.

notification.requestconcured.subject = The EJBCA Approval Request (${approvalRequest.ID}) to ${approvalRequest.TYPE} have been concured by ${approvalAdmin.CN} ${approvalAdmin.O}.

notification.requestconcured.msg     = ${NL}${NL}The approval request to ${approvalRequest.TYPE} by ${requestAdmin.CN} ${requestAdmin.O} at ${approvalRequest.DATE} have been concured by ${approvalAdmin.CN} ${approvalAdmin.O}. ${NL}${NL}The approving administrator's comment on the action is: ${approvalRequest.APPROVALCOMMENT}${NL}${NL}But there is still a need for ${approvalReqiest.APPROVALSLEFT} authorized administrators to agree upon the action. To review and approve the request click on the link ${approvalRequest.APROVEURL} for more details. 

notification.requestapproved.subject = The EJBCA Approval Request (${approvalRequest.ID}) to ${approvalRequest.TYPE} have been APPROVED by ${approvalAdmin.CN} ${approvalAdmin.O}.

notification.requestapproved.msg     = ${NL}${NL}Depending on the type of request the requesting administrator can now access the information, or the action have been executed ${NL}${NL}The approving administrator's comment on the action is: ${approvalRequest.APPROVALCOMMENT}${NL}${NL}Click on the link ${approvalRequest.APROVEURL} for more details.

notification.requestrejected.subject = The EJBCA Approval Request (${approvalRequest.ID}) to ${approvalRequest.TYPE} have been REJECTED by ${approvalAdmin.CN} ${approvalAdmin.O}.

notification.requestrejected.msg     = ${NL}${NL}The approval request (${approvalRequest.ID}) to ${approvalRequest.TYPE} have been REJECTED by ${approvalAdmin.CN} ${approvalAdmin.O} and the action will not be performed. ${NL}${NL}The rejecting administrator's comment on the action is: ${approvalRequest.APPROVALCOMMENT}${NL}${NL}Click on the link ${approvalRequest.APROVEURL} for more details.

# Sign session resource
signsession.requestcert = Received certificate request for user {0} for CA {1} with certificate profile {2}.
signsession.nouserinrequest = No username in request, request DN: {0}.
signsession.nopasswordinrequest = No password in request.
signsession.nokeyinrequest = No public key in request.
signsession.wrongauthority = CA from request ({0}) does not match users CA ({1}).
signsession.nosuchuser = User not found: {0}.
signsession.unsupportedkeytype = Unsupported public key ({0}), only RSA and ECDSA keys are supported.
signsession.illegalkeylength = Illegal key length: {0}.
signsession.certificateissued = Certificate issued to user {0}.
signsession.popverificationfailed = POPO verification failed.
signsession.canotactive = Signing CA {0} is not active.
signsession.caexpired = Signing CA {0} has expired.
signsession.canotyetvalid = Signing CA {0} is not yet valid.
signsession.canotfoundissuerusername = Can not find CA Id from issuerDN '{0}' or username '{1}'.
signsession.canotfoundcaid =  Invalid CA Id: {0}.
signsession.createdcrl = Created CRL with number {0} for CA {1} with DN: {2}. 
signsession.errorcreatecrl = Error creating CRL.
signsession.usertypeinvalid = User type is USER_INVALID, cannot create certificate for this user.
signsession.errorcertprofiletype = Wrong type of Certificate Profile ({0}) for end entity. Only End Entity Certificate Profiles can be issued by signsession bean.
signsession.errorcertprofilenotauthorized = End Entity data contains a CA, {0}, which the Certificate Profile, {1}, isn't authorized to use.
 
caadmin.notauthorizedtocreateca = Administrator not authorized to create CA {0}.
caadmin.notauthorizedtoeditca = Administrator not authorized to edit CA {0}.
caadmin.notauthorizedtoremoveca = Administrator is not authorized to remove CA with id {0}.
caadmin.notauthorizedtorenameca = Administrator is not authorized to rename CA with id {0}.
caadmin.notauthorizedtocertreq = Administrator is not authorized to make certificate request for CA {0}.
caadmin.notauthorizedtocertresp = Administrator is not authorized to recieve certificate responce for CA {0}.
caadmin.notauthorizedtocertresp = Administrator is not authorized to process CA {0}.
caadmin.notauthorizedtorenew = Administrator is not authorized to renew CA {0}.
caadmin.notauthorizedtorevoke = Administrator is not authorized to revoke CA {0}.
caadmin.notauthorizedtoactivatetoken = Administrator is not authorized to activate CA token for CA {0}.
caadmin.notauthorizedtodeactivatetoken = Administrator is not authorized to deactivate CA token for CA {0}.
caadmin.wrongcaid = Illegal CA id {0}, CA can not be created.
caadmin.caexistsid = CA with id {0} already exists.
caadmin.caexistsname = CA with name {0} already exists.
caadmin.errorcreatetoken = Error when creating CA token.
caadmin.errorcreatetokenpin = Error when creating hard CA token. Authorization code was wrong.
caadmin.errorcreateca = Could not create CA {0}.
caadmin.errorcreatecaservice = Could not Create ExternalCAService {0}.
caadmin.erroreditca = Could not edit CA {0}.
caadmin.errorremoveca = Could not remove CA {0}.
caadmin.errorrenameca = Could not rename CA {0}.
caadmin.errorgetcainfo = Error getting CA info for {0}.
caadmin.errorcertreq = Error creating certificate request for CA {0}.
caadmin.errorcertresp = Error receiving certificate response for CA {0}.
caadmin.errorprocess = Error processing CA {0}.
caadmin.errorrenewca = Error renewing CA {0}.
caadmin.errorrevoke = Error revoking CA {0}.
caadmin.errorcertreqinternalca = Cannot create certificate request for an Internal CA {0}.
caadmin.errorcertrespinternalca = Cannot receive certificate response for an Internal CA {0}.
caadmin.errorcertrespillegalmsg = Illegal response message.
caadmin.errorcertrespwrongdn = Subject DN of recieved certificate ({0} does not match request ({1}).
caadmin.errorcaexists = Error when processing CA {0}. CA already exists.
caadmin.erroractivatetoken = Error when trying to activate CA token for CA {0}.
caadmin.errordeactivatetoken = Error when trying to deactivate CA token for CA {0}.
caadmin.errornotoffline = CA {0} must have the status 'offline' in order to be activated.
caadmin.errornotonline = CA {0} must have the status 'active' in order to be deactivated.
caadmin.errorcanotfound = Error when trying to access CA with caid {0}. CA could not be found.
caadmin.errorreadingtoken = Error reading CATokenInfo for CA {0}.
caadmin.createdca = CA {0} created successfully, status: {1}. 
caadmin.editedca = CA {0} edited. 
caadmin.removedca = CA {0} removed.
caadmin.renamedca = CA {0} renamed to {1}.
caadmin.processedca = CA {0} processed successfully.
caadmin.renewdca = CA {0} renewed successfully.
caadmin.revokedca = CA {0} revoked successfully, reason: {1}.
caadmin.catokenactivated = CA token for CA {0} activated successfully. 
caadmin.catokendeactivated = CA token for CA {0} deactivated successfully. 
caadmin.certreqcreated = Certificate request generated successfully for CA {0}.
caadmin.certrespreceived = Certificate responce recieved successfully to CA {0}.

authorization.admingroupadded = Administratorgroup {0} added.
authorization.erroraddadmingroup = Error adding administratorgroup {0}.
authorization.admingroupremoved = Administratorgroup {0} removed.
authorization.errorremoveadmingroup = Error removing administratorgroup {0}.
authorization.admingrouprenamed = Administratorgroup renamed from {0} to {1}.
authorization.errorrenameadmingroup = Error renaming administratorgroup from {0} to {1}.
authorization.accessrulesadded = Added accessrules to admingroup {0}.
authorization.erroraddaccessrules = Error adding accessrules to admingroup{0}.
authorization.accessrulesremoved = Removed accessrules from admingroup {0}.
authorization.errorremoveaccessrules = Error removing accessrules from admingroup {0}.
authorization.accessrulesreplaced = Replaced accessrules from admingroup {0}.
authorization.errorreplaceaccessrules = Error replacing accessrules from admingroup {0}.
authorization.adminadded = Added administrator entities to administratorgroup {0}.
authorization.erroraddadmin = Error adding administrator entities to administratorgroup {0}.
authorization.adminremoved = Removed administrator entities from administratorgroup {0}.
authorization.errorremoveadmin = Error removing administrator entities from administratorgroup {0}.
authorization.errorcreateauthtree = Error creating AuthorizationTreeUpdateDataBean.
 
authentication.invalidpwd = Got request for user with invalid password: {0}.
authentication.authok = Authenticated user {0}.
authentication.wrongstatus = Got request with status '{0}', NEW, FAILED or INPROCESS required: {1}.
authentication.usernotfound = Got request for nonexisting user: {0}.
authentication.statuschanged = Changed status to STATUS_GENERATED.

createcrl.createdcrl = Created CRL for CA {0}, with DN: {1}. 
createcrl.errorcreate = Error creating CRL for CA {0}. 
createcrl.caoffline = CA {0}, {1} is off-line. CRL can not be created.
createcrl.catokenoffline = CA token for CA {0}, {1} is off-line. CRL can not be created.
createcrl.crlinfonull = Crlinfo is null, so we use 0 as nextUpdate.
createcrl.generalerror = Error generating CRL for CA {0}.
createcrl.erroravailcas = Error getting available CAs.

publisher.store = Published object {0} successfully to publisher {1}.
publisher.errorstore = Error when publishing to {0}.
publisher.nopublisher = Publisher with id {0} does not exist.
publisher.testedpublisher = Successfully tested the connection with publisher {0}.
publisher.errortestpublisher = Error when testing the connection with publisher {0}.
publisher.addedpublisher = Publisher {0} added.
publisher.erroraddpublisher = Error adding publisher {0}.
publisher.changedpublisher = Publisher {0} edited.
publisher.errorchangepublisher = Error editing publisher {0}.
publisher.clonedpublisher = New publisher {0} used publisher {1} as template.
publisher.errorclonepublisher = Error adding publisher {0} using publisher {1} as template.
publisher.removedpublisher = Publisher {0} removed.
publisher.errorremovepublisher = Error removing publisher {0}.
publisher.renamedpublisher = Publisher {0} renamed to {1}.
publisher.errorrenamepublisher = Error renaming publisher {0} to {1}.

store.storecert = Certificate stored.
store.errorstorecert = Error storing certificate.
store.storecrl = CRLNumber: {0}, fingerprint: {1}.  
store.errorcertinfo = Error finding certificate with fp {0}.
store.errorfindcertuser = Could not find certificate with username {0}.
store.errorfindcertserno = Could not find certificate with serno {0}.
store.revokedcert = Revoked certificate, reason: {0}.
store.republishunrevokedcert = Republished unrevoked cert, reason: {0}. 
store.ignorerevoke = Ignored setRevokeStatus() request serialNo: {0}. Current cert status: {1}. Revocation reason: {2}. 
store.revokedallbyca = Revoked All CAs certificates from issuer {0} successfully. Permantly revoked {1} certificates with reason {2}.
store.errorrevokeallbyca = Error when trying to revoke a CA's all certificates by issuer {0}.


error.catokenoffline = CA token is offline for CA {0}.
error.unknown = Unknown error.

APADDENDENTITY            = add End Entity

APCHANGESTATUSENDENTITY   = change status of end entity

APEDITENDENTITY           = edit end entity

APKEYRECOVERY             = key recover

CLITOOL                   = Command Line Tool