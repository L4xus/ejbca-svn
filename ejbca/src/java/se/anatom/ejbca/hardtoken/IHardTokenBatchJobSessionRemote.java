/*
 * Generated by XDoclet - Do not edit!
 */
package se.anatom.ejbca.hardtoken;

/**
 * Remote interface for HardTokenBatchJobSession.
 */
public interface IHardTokenBatchJobSessionRemote
   extends javax.ejb.EJBObject
{
   /**
    * Returns the next user scheduled for batch generation for the given issuer.
    * @param admin the administrator performing the actions
    * @return The next user to generate or NULL if there are no users i queue.
    * @throws EJBException if a communication or other error occurs.
    */
   public se.anatom.ejbca.ra.UserAdminData getNextHardTokenToGenerate( se.anatom.ejbca.log.Admin admin,java.lang.String alias )
      throws se.anatom.ejbca.hardtoken.UnavailableTokenException, java.rmi.RemoteException;

   /**
    * Returns a Collection of users scheduled for batch generation for the given issuer. A maximum of MAX_RETURNED_QUEUE_SIZE users will be returned by call.
    * @param admin the administrator performing the actions
    * @return A Collection of users to generate or NULL if there are no users i queue.
    * @throws EJBException if a communication or other error occurs.
    */
   public java.util.Collection getNextHardTokensToGenerate( se.anatom.ejbca.log.Admin admin,java.lang.String alias )
      throws se.anatom.ejbca.hardtoken.UnavailableTokenException, java.rmi.RemoteException;

   /**
    * Returns the indexed user in queue scheduled for batch generation for the given issuer.
    * @param admin the administrator performing the actions
    * @param index index in queue of user to retrieve.
    * @return The next token to generate or NULL if the given user doesn't exist in queue.
    * @throws EJBException if a communication or other error occurs.
    */
   public se.anatom.ejbca.ra.UserAdminData getNextHardTokenToGenerateInQueue( se.anatom.ejbca.log.Admin admin,java.lang.String alias,int index )
      throws se.anatom.ejbca.hardtoken.UnavailableTokenException, java.rmi.RemoteException;

   /**
    * Returns the number of users scheduled for batch generation for the given issuer.
    * @param admin the administrator performing the actions
    * @return the number of users to generate.
    * @throws EJBException if a communication or other error occurs.
    */
   public int getNumberOfHardTokensToGenerate( se.anatom.ejbca.log.Admin admin,java.lang.String alias )
      throws java.rmi.RemoteException;

   /**
    * Methods that checks if a user exists in the database having the given hard token issuer id. This function is mainly for avoiding desyncronisation when a hard token issuer is deleted.
    * @param hardtokenissuerid the id of hard token issuer to look for.
    * @return true if hardtokenissuerid exists in userdatabase.
    */
   public boolean checkForHardTokenIssuerId( se.anatom.ejbca.log.Admin admin,int hardtokenissuerid )
      throws java.rmi.RemoteException;

}
