/*
 * Generated by XDoclet - Do not edit!
 */
package se.anatom.ejbca.hardtoken;

/**
 * Remote interface for HardTokenSession.
 */
public interface IHardTokenSessionRemote
   extends javax.ejb.EJBObject
{
   /**
    * Adds a hard token profile to the database.
    * @throws HardTokenProfileExistsException if hard token already exists.
    * @throws EJBException if a communication or other error occurs.
    */
   public void addHardTokenProfile( se.anatom.ejbca.log.Admin admin,java.lang.String name,se.anatom.ejbca.hardtoken.hardtokenprofiles.HardTokenProfile profile )
      throws se.anatom.ejbca.hardtoken.HardTokenProfileExistsException, java.rmi.RemoteException;

   /**
    * Adds a hard token profile to the database. Used for importing and exporting profiles from xml-files.
    * @throws HardTokenProfileExistsException if hard token already exists.
    * @throws EJBException if a communication or other error occurs.
    */
   public void addHardTokenProfile( se.anatom.ejbca.log.Admin admin,int profileid,java.lang.String name,se.anatom.ejbca.hardtoken.hardtokenprofiles.HardTokenProfile profile )
      throws se.anatom.ejbca.hardtoken.HardTokenProfileExistsException, java.rmi.RemoteException;

   /**
    * Updates hard token profile data
    * @throws EJBException if a communication or other error occurs.
    */
   public void changeHardTokenProfile( se.anatom.ejbca.log.Admin admin,java.lang.String name,se.anatom.ejbca.hardtoken.hardtokenprofiles.HardTokenProfile profile )
      throws java.rmi.RemoteException;

   /**
    * Adds a hard token profile with the same content as the original profile,
    * @throws HardTokenProfileExistsException if hard token already exists.
    * @throws EJBException if a communication or other error occurs.
    */
   public void cloneHardTokenProfile( se.anatom.ejbca.log.Admin admin,java.lang.String oldname,java.lang.String newname )
      throws se.anatom.ejbca.hardtoken.HardTokenProfileExistsException, java.rmi.RemoteException;

   /**
    * Removes a hard token profile from the database.
    * @throws EJBException if a communication or other error occurs.
    */
   public void removeHardTokenProfile( se.anatom.ejbca.log.Admin admin,java.lang.String name )
      throws java.rmi.RemoteException;

   /**
    * Renames a hard token profile
    * @throws HardTokenProfileExistsException if hard token already exists.
    * @throws EJBException if a communication or other error occurs.
    */
   public void renameHardTokenProfile( se.anatom.ejbca.log.Admin admin,java.lang.String oldname,java.lang.String newname )
      throws se.anatom.ejbca.hardtoken.HardTokenProfileExistsException, java.rmi.RemoteException;

   /**
    * Retrives a Collection of id:s (Integer) to authorized profiles.
    * @return Collection of id:s (Integer)
    */
   public java.util.Collection getAuthorizedHardTokenProfileIds( se.anatom.ejbca.log.Admin admin )
      throws java.rmi.RemoteException;

   /**
    * Method creating a hashmap mapping profile id (Integer) to profile name (String).
    */
   public java.util.HashMap getHardTokenProfileIdToNameMap( se.anatom.ejbca.log.Admin admin )
      throws java.rmi.RemoteException;

   /**
    * Retrives a named hard token profile.
    */
   public se.anatom.ejbca.hardtoken.hardtokenprofiles.HardTokenProfile getHardTokenProfile( se.anatom.ejbca.log.Admin admin,java.lang.String name )
      throws java.rmi.RemoteException;

   /**
    * Finds a hard token profile by id.
    */
   public se.anatom.ejbca.hardtoken.hardtokenprofiles.HardTokenProfile getHardTokenProfile( se.anatom.ejbca.log.Admin admin,int id )
      throws java.rmi.RemoteException;

   /**
    * Help method used by hard token profile proxys to indicate if it is time to update it's profile data.
    */
   public int getHardTokenProfileUpdateCount( se.anatom.ejbca.log.Admin admin,int hardtokenprofileid )
      throws java.rmi.RemoteException;

   /**
    * Returns a hard token profile id, given it's hard token profile name
    * @return the id or 0 if hardtokenprofile cannot be found.
    */
   public int getHardTokenProfileId( se.anatom.ejbca.log.Admin admin,java.lang.String name )
      throws java.rmi.RemoteException;

   /**
    * Returns a hard token profile name given its id.
    * @return the name or null if id noesnt exists
    * @throws EJBException if a communication or other error occurs.
    */
   public java.lang.String getHardTokenProfileName( se.anatom.ejbca.log.Admin admin,int id )
      throws java.rmi.RemoteException;

   /**
    * Adds a hard token issuer to the database.
    * @return false if hard token issuer already exists.
    * @throws EJBException if a communication or other error occurs.
    */
   public boolean addHardTokenIssuer( se.anatom.ejbca.log.Admin admin,java.lang.String alias,int admingroupid,se.anatom.ejbca.hardtoken.HardTokenIssuer issuerdata )
      throws java.rmi.RemoteException;

   /**
    * Updates hard token issuer data
    * @return false if alias doesn't exists
    * @throws EJBException if a communication or other error occurs.
    */
   public boolean changeHardTokenIssuer( se.anatom.ejbca.log.Admin admin,java.lang.String alias,se.anatom.ejbca.hardtoken.HardTokenIssuer issuerdata )
      throws java.rmi.RemoteException;

   /**
    * Adds a hard token issuer with the same content as the original issuer,
    * @return false if the new alias or certificatesn already exists.
    * @throws EJBException if a communication or other error occurs.
    */
   public boolean cloneHardTokenIssuer( se.anatom.ejbca.log.Admin admin,java.lang.String oldalias,java.lang.String newalias,int admingroupid )
      throws java.rmi.RemoteException;

   /**
    * Removes a hard token issuer from the database.
    * @throws EJBException if a communication or other error occurs.
    */
   public void removeHardTokenIssuer( se.anatom.ejbca.log.Admin admin,java.lang.String alias )
      throws java.rmi.RemoteException;

   /**
    * Renames a hard token issuer
    * @return false if new alias or certificatesn already exists
    * @throws EJBException if a communication or other error occurs.
    */
   public boolean renameHardTokenIssuer( se.anatom.ejbca.log.Admin admin,java.lang.String oldalias,java.lang.String newalias,int newadmingroupid )
      throws java.rmi.RemoteException;

   /**
    * Method to check if an administrator is authorized to issue hard tokens for the given alias.
    * @param admin administrator to check
    * @param alias alias of hardtoken issuer.
    * @return true if administrator is authorized to issue hardtoken with given alias.
    */
   public boolean getAuthorizedToHardTokenIssuer( se.anatom.ejbca.log.Admin admin,java.lang.String alias )
      throws java.rmi.RemoteException;

   /**
    * Returns the available hard token issuers authorized to the administrator.
    * @return A collection of available HardTokenIssuerData.
    * @throws EJBException if a communication or other error occurs.
    */
   public java.util.Collection getHardTokenIssuerDatas( se.anatom.ejbca.log.Admin admin )
      throws java.rmi.RemoteException;

   /**
    * Returns the available hard token issuer alliases authorized to the administrator.
    * @return A collection of available hard token issuer aliases.
    * @throws EJBException if a communication or other error occurs.
    */
   public java.util.Collection getHardTokenIssuerAliases( se.anatom.ejbca.log.Admin admin )
      throws java.rmi.RemoteException;

   /**
    * Returns the available hard token issuers authorized to the administrator.
    * @return A treemap of available hard token issuers.
    * @throws EJBException if a communication or other error occurs.
    */
   public java.util.TreeMap getHardTokenIssuers( se.anatom.ejbca.log.Admin admin )
      throws java.rmi.RemoteException;

   /**
    * Returns the specified hard token issuer.
    * @return the hard token issuer data or null if hard token issuer doesn't exists.
    * @throws EJBException if a communication or other error occurs.
    */
   public se.anatom.ejbca.hardtoken.HardTokenIssuerData getHardTokenIssuerData( se.anatom.ejbca.log.Admin admin,java.lang.String alias )
      throws java.rmi.RemoteException;

   /**
    * Returns the specified hard token issuer.
    * @return the hard token issuer data or null if hard token issuer doesn't exists.
    * @throws EJBException if a communication or other error occurs.
    */
   public se.anatom.ejbca.hardtoken.HardTokenIssuerData getHardTokenIssuerData( se.anatom.ejbca.log.Admin admin,int id )
      throws java.rmi.RemoteException;

   /**
    * Returns the number of available hard token issuer.
    * @return the number of available hard token issuer.
    * @throws EJBException if a communication or other error occurs.
    */
   public int getNumberOfHardTokenIssuers( se.anatom.ejbca.log.Admin admin )
      throws java.rmi.RemoteException;

   /**
    * Returns a hard token issuer id given its alias.
    * @return id number of hard token issuer.
    * @throws EJBException if a communication or other error occurs.
    */
   public int getHardTokenIssuerId( se.anatom.ejbca.log.Admin admin,java.lang.String alias )
      throws java.rmi.RemoteException;

   /**
    * Returns a hard token issuer alias given its id.
    * @return the alias or null if id noesnt exists
    * @throws EJBException if a communication or other error occurs.
    */
   public java.lang.String getHardTokenIssuerAlias( se.anatom.ejbca.log.Admin admin,int id )
      throws java.rmi.RemoteException;

   /**
    * Checks if a hard token profile is among a hard tokens issuers available token types.
    * @param admin the administrator calling the function
    * @param issuerid the id of the issuer to check.
    * @param userdata the data of user about to be generated
    * @throws UnavailableTokenException if users tokentype isn't among hard token issuers available tokentypes.
    * @throws EJBException if a communication or other error occurs.
    */
   public void getIsHardTokenProfileAvailableToIssuer( se.anatom.ejbca.log.Admin admin,int issuerid,se.anatom.ejbca.ra.UserAdminData userdata )
      throws se.anatom.ejbca.hardtoken.UnavailableTokenException, java.rmi.RemoteException;

   /**
    * Adds a hard token to the database
    * @param admin the administrator calling the function
    * @param tokensn The serialnumber of token.
    * @param username the user owning the token.
    * @param significantissuerdn indicates which CA the hard token should belong to.
    * @param hardtokendata the hard token data
    * @param certificates a collection of certificates places in the hard token
    * @param copyof indicates if the newly created token is a copy of an existing token. Use null if token is an original
    * @throws EJBException if a communication or other error occurs.
    * @throws HardTokenExistsException if tokensn already exists in databas.
    */
   public void addHardToken( se.anatom.ejbca.log.Admin admin,java.lang.String tokensn,java.lang.String username,java.lang.String significantissuerdn,int tokentype,se.anatom.ejbca.hardtoken.hardtokentypes.HardToken hardtokendata,java.util.Collection certificates,java.lang.String copyof )
      throws se.anatom.ejbca.hardtoken.HardTokenExistsException, java.rmi.RemoteException;

   /**
    * changes a hard token data in the database
    * @param admin the administrator calling the function
    * @param tokensn The serialnumber of token.
    * @param hardtokendata the hard token data
    * @throws EJBException if a communication or other error occurs.
    * @throws HardTokenDoesntExistsException if tokensn doesn't exists in databas.
    */
   public void changeHardToken( se.anatom.ejbca.log.Admin admin,java.lang.String tokensn,int tokentype,se.anatom.ejbca.hardtoken.hardtokentypes.HardToken hardtokendata )
      throws se.anatom.ejbca.hardtoken.HardTokenDoesntExistsException, java.rmi.RemoteException;

   /**
    * removes a hard token data from the database
    * @param admin the administrator calling the function
    * @param tokensn The serialnumber of token.
    * @throws EJBException if a communication or other error occurs.
    * @throws HardTokenDoesntExistsException if tokensn doesn't exists in databas.
    */
   public void removeHardToken( se.anatom.ejbca.log.Admin admin,java.lang.String tokensn )
      throws se.anatom.ejbca.hardtoken.HardTokenDoesntExistsException, java.rmi.RemoteException;

   /**
    * Checks if a hard token serialnumber exists in the database
    * @param admin the administrator calling the function
    * @param tokensn The serialnumber of token.
    * @return true if it exists or false otherwise.
    * @throws EJBException if a communication or other error occurs.
    */
   public boolean existsHardToken( se.anatom.ejbca.log.Admin admin,java.lang.String tokensn )
      throws java.rmi.RemoteException;

   /**
    * returns hard token data for the specified tokensn
    * @param admin the administrator calling the function
    * @param tokensn The serialnumber of token.
    * @return the hard token data or NULL if tokensn doesnt exists in database.
    * @throws EJBException if a communication or other error occurs.
    */
   public se.anatom.ejbca.hardtoken.HardTokenData getHardToken( se.anatom.ejbca.log.Admin admin,java.lang.String tokensn )
      throws java.rmi.RemoteException;

   /**
    * returns hard token data for the specified user
    * @param admin the administrator calling the function
    * @param username The username owning the tokens.
    * @return a Collection of all hard token user data.
    * @throws EJBException if a communication or other error occurs.
    */
   public java.util.Collection getHardTokens( se.anatom.ejbca.log.Admin admin,java.lang.String username )
      throws java.rmi.RemoteException;

   /**
    * Method that searches the database for a tokensn. It returns all hardtokens with a serialnumber that begins with the given searchpattern.
    * @param admin the administrator calling the function
    * @param searchpattern of begining of hard token sn
    * @return a Collection of username(String) matching the search string
    */
   public java.util.Collection findHardTokenByTokenSerialNumber( se.anatom.ejbca.log.Admin admin,java.lang.String searchpattern )
      throws java.rmi.RemoteException;

   /**
    * Adds a mapping between a hard token and a certificate
    * @param admin the administrator calling the function
    * @param tokensn The serialnumber of token.
    * @param certificate the certificate to map to.
    * @throws EJBException if a communication or other error occurs.
    */
   public void addHardTokenCertificateMapping( se.anatom.ejbca.log.Admin admin,java.lang.String tokensn,java.security.cert.X509Certificate certificate )
      throws java.rmi.RemoteException;

   /**
    * Removes a mapping between a hard token and a certificate
    * @param admin the administrator calling the function
    * @param certificate the certificate to map to.
    * @throws EJBException if a communication or other error occurs.
    */
   public void removeHardTokenCertificateMapping( se.anatom.ejbca.log.Admin admin,java.security.cert.X509Certificate certificate )
      throws java.rmi.RemoteException;

   /**
    * Returns all the X509Certificates places in a hard token.
    * @param admin the administrator calling the function
    * @param tokensn The serialnumber of token.
    * @return a collection of X509Certificates
    * @throws EJBException if a communication or other error occurs.
    */
   public java.util.Collection findCertificatesInHardToken( se.anatom.ejbca.log.Admin admin,java.lang.String tokensn )
      throws java.rmi.RemoteException;

   /**
    * Method used to signal to the log that token was generated successfully.
    * @param admin administrator performing action
    * @param tokensn tokensn of token generated
    * @param username username of user token was generated for.
    * @param significantissuerdn indicates which CA the hard token should belong to.
    */
   public void tokenGenerated( se.anatom.ejbca.log.Admin admin,java.lang.String tokensn,java.lang.String username,java.lang.String significantissuerdn )
      throws java.rmi.RemoteException;

   /**
    * Method used to signal to the log that error occured when generating token.
    * @param admin administrator performing action
    * @param tokensn tokensn of token.
    * @param username username of user token was generated for.
    * @param significantissuerdn indicates which CA the hard token should belong to.
    */
   public void errorWhenGeneratingToken( se.anatom.ejbca.log.Admin admin,java.lang.String tokensn,java.lang.String username,java.lang.String significantissuerdn )
      throws java.rmi.RemoteException;

   /**
    * Method to check if a certificate profile exists in any of the hard token profiles. Used to avoid desyncronization of certificate profile data.
    * @param id the certificateprofileid to search for.
    * @return true if certificateprofileid exists in any of the hard token profiles.
    */
   public boolean existsCertificateProfileInHardTokenProfiles( se.anatom.ejbca.log.Admin admin,int id )
      throws java.rmi.RemoteException;

}
