/*
 * Generated by XDoclet - Do not edit!
 */
package se.anatom.ejbca.authorization;

/**
 * Remote interface for AuthorizationSession.
 */
public interface IAuthorizationSessionRemote
   extends javax.ejb.EJBObject
{
   /**
    * Method to initialize authorization bean, must be called directly after creation of bean. Should only be called once.
    */
   public void initialize( se.anatom.ejbca.log.Admin admin,int caid )
      throws se.anatom.ejbca.authorization.AdminGroupExistsException, java.rmi.RemoteException;

   /**
    * Method to check if a user is authorized to a certain resource.
    * @param admin the administrator about to be authorized, see se.anatom.ejbca.log.Admin class.
    * @param resource the resource to check authorization for.
    */
   public boolean isAuthorized( se.anatom.ejbca.log.Admin admin,java.lang.String resource )
      throws se.anatom.ejbca.authorization.AuthorizationDeniedException, java.rmi.RemoteException;

   /**
    * Method to check if a user is authorized to a certain resource without performing any logging.
    * @param admin the administrator about to be authorized, see se.anatom.ejbca.log.Admin class.
    * @param resource the resource to check authorization for.
    */
   public boolean isAuthorizedNoLog( se.anatom.ejbca.log.Admin admin,java.lang.String resource )
      throws se.anatom.ejbca.authorization.AuthorizationDeniedException, java.rmi.RemoteException;

   /**
    * Method to check if a group is authorized to a resource.
    */
   public boolean isGroupAuthorized( se.anatom.ejbca.log.Admin admin,int admingrouppk,java.lang.String resource )
      throws se.anatom.ejbca.authorization.AuthorizationDeniedException, java.rmi.RemoteException;

   /**
    * Method to check if a group is authorized to a resource without any logging.
    */
   public boolean isGroupAuthorizedNoLog( se.anatom.ejbca.log.Admin admin,int admingrouppk,java.lang.String resource )
      throws se.anatom.ejbca.authorization.AuthorizationDeniedException, java.rmi.RemoteException;

   /**
    * Method to check if an administrator exists in the specified admingroup.
    */
   public boolean existsAdministratorInGroup( se.anatom.ejbca.log.Admin admin,int admingrouppk )
      throws java.rmi.RemoteException;

   /**
    * Method to validate and check revokation status of a users certificate.
    * @param certificate the users X509Certificate.
    */
   public void authenticate( java.security.cert.X509Certificate certificate )
      throws se.anatom.ejbca.authorization.AuthenticationFailedException, java.rmi.RemoteException;

   /**
    * Method to add an admingroup.
    * @param admingroupname name of new admingroup, have to be unique.
    * @throws AdminGroupExistsException if admingroup already exists.
    */
   public void addAdminGroup( se.anatom.ejbca.log.Admin admin,java.lang.String admingroupname,int caid )
      throws se.anatom.ejbca.authorization.AdminGroupExistsException, java.rmi.RemoteException;

   /**
    * Method to remove a admingroup.
    */
   public void removeAdminGroup( se.anatom.ejbca.log.Admin admin,java.lang.String admingroupname,int caid )
      throws java.rmi.RemoteException;

   /**
    * Metod to rename a admingroup
    * @throws AdminGroupExistsException if admingroup already exists.
    */
   public void renameAdminGroup( se.anatom.ejbca.log.Admin admin,java.lang.String oldname,int caid,java.lang.String newname )
      throws se.anatom.ejbca.authorization.AdminGroupExistsException, java.rmi.RemoteException;

   /**
    * Method to get a reference to a admingroup.
    */
   public se.anatom.ejbca.authorization.AdminGroup getAdminGroup( se.anatom.ejbca.log.Admin admin,java.lang.String admingroupname,int caid )
      throws java.rmi.RemoteException;

   /**
    * Returns a Collection of AdminGroup the administrator is authorized to. <p/> SuperAdmin is autorized to all groups Other admins are only authorized to the groups cointaining a subset of authorized CA that the admin himself is authorized to. <p/> The AdminGroup objects only contains only name and caid and no accessdata
    */
   public java.util.Collection getAuthorizedAdminGroupNames( se.anatom.ejbca.log.Admin admin )
      throws java.rmi.RemoteException;

   /**
    * Adds a Collection of AccessRule to an an admin group.
    */
   public void addAccessRules( se.anatom.ejbca.log.Admin admin,java.lang.String admingroupname,int caid,java.util.Collection accessrules )
      throws java.rmi.RemoteException;

   /**
    * Removes a Collection of (String) containing accessrules to remove from admin group.
    */
   public void removeAccessRules( se.anatom.ejbca.log.Admin admin,java.lang.String admingroupname,int caid,java.util.Collection accessrules )
      throws java.rmi.RemoteException;

   /**
    * Replaces a groups accessrules with a new set of rules
    */
   public void replaceAccessRules( se.anatom.ejbca.log.Admin admin,java.lang.String admingroupname,int caid,java.util.Collection accessrules )
      throws java.rmi.RemoteException;

   /**
    * Adds a Collection of AdminEnity to the admingroup. Changes their values if they already exists.
    */
   public void addAdminEntities( se.anatom.ejbca.log.Admin admin,java.lang.String admingroupname,int caid,java.util.Collection adminentities )
      throws java.rmi.RemoteException;

   /**
    * Removes a Collection of AdminEntity from the administrator group.
    */
   public void removeAdminEntities( se.anatom.ejbca.log.Admin admin,java.lang.String admingroupname,int caid,java.util.Collection adminentities )
      throws java.rmi.RemoteException;

   /**
    * Method used to collect an administrators available access rules based on which rule he himself is authorized to.
    * @param admin is the administrator calling the method.
    * @return a Collection of String containing available accessrules.
    */
   public java.util.Collection getAuthorizedAvailableAccessRules( se.anatom.ejbca.log.Admin admin )
      throws java.rmi.RemoteException;

   /**
    * Method used to return an Collection of Integers indicating which CAids a administrator is authorized to access.
    */
   public java.util.Collection getAuthorizedCAIds( se.anatom.ejbca.log.Admin admin )
      throws java.rmi.RemoteException;

   /**
    * Method used to return an Collection of Integers indicating which end entity profiles the administrator is authorized to view.
    * @param admin the administrator
    * @param rapriviledge should be one of the end entity profile authorization constans defined in AvailableAccessRules.
    */
   public java.util.Collection getAuthorizedEndEntityProfileIds( se.anatom.ejbca.log.Admin admin,java.lang.String rapriviledge )
      throws java.rmi.RemoteException;

   /**
    * Method to check if an end entity profile exists in any end entity profile rules. Used to avoid desyncronization of profilerules.
    * @param profileid the profile id to search for.
    * @return true if profile exists in any of the accessrules.
    */
   public boolean existsEndEntityProfileInRules( se.anatom.ejbca.log.Admin admin,int profileid )
      throws java.rmi.RemoteException;

   /**
    * Method to check if a ca exists in any ca specific rules. Used to avoid desyncronization of CA rules when ca is removed
    * @param caid the ca id to search for.
    * @return true if ca exists in any of the accessrules.
    */
   public boolean existsCAInRules( se.anatom.ejbca.log.Admin admin,int caid )
      throws java.rmi.RemoteException;

}
