/*
 * Generated by XDoclet - Do not edit!
 */
package se.anatom.ejbca.authorization;

/**
 * Local interface for AdminGroupData.
 */
public interface AdminGroupDataLocal
   extends javax.ejb.EJBLocalObject
{

   public java.lang.String getAdminGroupName(  ) ;

   public void setAdminGroupName( java.lang.String admingroupname ) ;

   public int getCAId(  ) ;

   public void setCAId( int caid ) ;

   /**
    * Adds a Collection of AccessRule to the database. Changing their values if they already exists
    */
   public void addAccessRules( java.util.Collection accessrules ) ;

   /**
    * Removes a Collection of (String) accessrules from the database.
    */
   public void removeAccessRules( java.util.Collection accessrules ) ;

   /**
    * Returns the number of access rules in admingroup
    * @return the number of accessrules in the database
    */
   public int getNumberOfAccessRules(  ) ;

   /**
    * Returns all the accessrules as a Collection of AccessRules
    */
   public java.util.Collection getAccessRuleObjects(  ) ;

   /**
    * Adds a Collection of AdminEntity to the database. Changing their values if they already exists
    */
   public void addAdminEntities( java.util.Collection adminentities ) ;

   /**
    * Removes a Collection if AdminEntity from the database.
    */
   public void removeAdminEntities( java.util.Collection adminentities ) ;

   /**
    * Returns the number of user entities in admingroup
    * @return the number of user entities in the database
    */
   public int getNumberOfAdminEntities(  ) ;

   /**
    * Returns all the adminentities as Collection of AdminEntity.
    */
   public java.util.Collection getAdminEntityObjects(  ) ;

   /**
    * Returns the data in admingroup representation.
    */
   public se.anatom.ejbca.authorization.AdminGroup getAdminGroup(  ) ;

   /**
    * Returns an AdminGroup object only containing name and caid and no access data.
    */
   public se.anatom.ejbca.authorization.AdminGroup getAdminGroupNames(  ) ;

}
