/*
 * Generated by XDoclet - Do not edit!
 */
package se.anatom.ejbca.ra.raadmin;

/**
 * Remote interface for RaAdminSession.
 */
public interface IRaAdminSessionRemote
   extends javax.ejb.EJBObject
{
   /**
    * Finds the admin preference belonging to a certificate serialnumber. Returns null if admin doesn't exists.
    */
   public se.anatom.ejbca.ra.raadmin.AdminPreference getAdminPreference( se.anatom.ejbca.log.Admin admin,java.lang.String certificatefingerprint )
      throws java.rmi.RemoteException;

   /**
    * Adds a admin preference to the database. Returns false if admin already exists.
    */
   public boolean addAdminPreference( se.anatom.ejbca.log.Admin admin,java.lang.String certificatefingerprint,se.anatom.ejbca.ra.raadmin.AdminPreference adminpreference )
      throws java.rmi.RemoteException;

   /**
    * Changes the admin preference in the database. Returns false if admin doesn't exists.
    */
   public boolean changeAdminPreference( se.anatom.ejbca.log.Admin admin,java.lang.String certificatefingerprint,se.anatom.ejbca.ra.raadmin.AdminPreference adminpreference )
      throws java.rmi.RemoteException;

   /**
    * Changes the admin preference in the database. Returns false if admin doesn't exists.
    */
   public boolean changeAdminPreferenceNoLog( se.anatom.ejbca.log.Admin admin,java.lang.String certificatefingerprint,se.anatom.ejbca.ra.raadmin.AdminPreference adminpreference )
      throws java.rmi.RemoteException;

   /**
    * Checks if a admin preference exists in the database.
    */
   public boolean existsAdminPreference( se.anatom.ejbca.log.Admin admin,java.lang.String certificatefingerprint )
      throws java.rmi.RemoteException;

   /**
    * Function that returns the default admin preference.
    * @throws EJBException if a communication or other error occurs.
    */
   public se.anatom.ejbca.ra.raadmin.AdminPreference getDefaultAdminPreference( se.anatom.ejbca.log.Admin admin )
      throws java.rmi.RemoteException;

   /**
    * Function that saves the default admin preference.
    * @throws EJBException if a communication or other error occurs.
    */
   public void saveDefaultAdminPreference( se.anatom.ejbca.log.Admin admin,se.anatom.ejbca.ra.raadmin.AdminPreference defaultadminpreference )
      throws java.rmi.RemoteException;

   /**
    * Adds a profile to the database.
    * @param admin administrator performing task
    * @param profilename readable profile name
    * @param profile profile to be added
    */
   public void addEndEntityProfile( se.anatom.ejbca.log.Admin admin,java.lang.String profilename,se.anatom.ejbca.ra.raadmin.EndEntityProfile profile )
      throws se.anatom.ejbca.ra.raadmin.EndEntityProfileExistsException, java.rmi.RemoteException;

   /**
    * Adds a profile to the database.
    * @param admin administrator performing task
    * @param profileid internal ID of new profile, use only if you know it's right.
    * @param profilename readable profile name
    * @param profile profile to be added
    */
   public void addEndEntityProfile( se.anatom.ejbca.log.Admin admin,int profileid,java.lang.String profilename,se.anatom.ejbca.ra.raadmin.EndEntityProfile profile )
      throws se.anatom.ejbca.ra.raadmin.EndEntityProfileExistsException, java.rmi.RemoteException;

   /**
    * Adds a end entity profile to a group with the same content as the original profile.
    */
   public void cloneEndEntityProfile( se.anatom.ejbca.log.Admin admin,java.lang.String originalprofilename,java.lang.String newprofilename )
      throws se.anatom.ejbca.ra.raadmin.EndEntityProfileExistsException, java.rmi.RemoteException;

   /**
    * Removes an end entity profile from the database.
    * @throws EJBException if a communication or other error occurs.
    */
   public void removeEndEntityProfile( se.anatom.ejbca.log.Admin admin,java.lang.String profilename )
      throws java.rmi.RemoteException;

   /**
    * Renames a end entity profile
    */
   public void renameEndEntityProfile( se.anatom.ejbca.log.Admin admin,java.lang.String oldprofilename,java.lang.String newprofilename )
      throws se.anatom.ejbca.ra.raadmin.EndEntityProfileExistsException, java.rmi.RemoteException;

   /**
    * Updates profile data
    */
   public void changeEndEntityProfile( se.anatom.ejbca.log.Admin admin,java.lang.String profilename,se.anatom.ejbca.ra.raadmin.EndEntityProfile profile )
      throws java.rmi.RemoteException;

   /**
    * Retrives a Collection of id:s (Integer) to authorized profiles.
    */
   public java.util.Collection getAuthorizedEndEntityProfileIds( se.anatom.ejbca.log.Admin admin )
      throws java.rmi.RemoteException;

   /**
    * Method creating a hashmap mapping profile id (Integer) to profile name (String).
    */
   public java.util.HashMap getEndEntityProfileIdToNameMap( se.anatom.ejbca.log.Admin admin )
      throws java.rmi.RemoteException;

   /**
    * Finds a end entity profile by id.
    */
   public se.anatom.ejbca.ra.raadmin.EndEntityProfile getEndEntityProfile( se.anatom.ejbca.log.Admin admin,int id )
      throws java.rmi.RemoteException;

   /**
    * Finds a end entity profile by id.
    */
   public se.anatom.ejbca.ra.raadmin.EndEntityProfile getEndEntityProfile( se.anatom.ejbca.log.Admin admin,java.lang.String profilename )
      throws java.rmi.RemoteException;

   /**
    * Returns a end entity profiles id, given it's profilename
    * @return the id or 0 if profile cannot be found.
    */
   public int getEndEntityProfileId( se.anatom.ejbca.log.Admin admin,java.lang.String profilename )
      throws java.rmi.RemoteException;

   /**
    * Returns a end entity profiles name given it's id.
    * @return profilename or null if profile id doesn't exists.
    */
   public java.lang.String getEndEntityProfileName( se.anatom.ejbca.log.Admin admin,int id )
      throws java.rmi.RemoteException;

   /**
    * Method to check if a certificateprofile exists in any of the end entity profiles. Used to avoid desyncronization of certificate profile data.
    * @param certificateprofileid the certificatetype id to search for.
    * @return true if certificateprofile exists in any of the end entity profiles.
    */
   public boolean existsCertificateProfileInEndEntityProfiles( se.anatom.ejbca.log.Admin admin,int certificateprofileid )
      throws java.rmi.RemoteException;

   /**
    * Method to check if a CA exists in any of the end entity profiles. Used to avoid desyncronization of CA data.
    * @param caid the caid to search for.
    * @return true if ca exists in any of the end entity profiles.
    */
   public boolean existsCAInEndEntityProfiles( se.anatom.ejbca.log.Admin admin,int caid )
      throws java.rmi.RemoteException;

   /**
    * Loads the global configuration from the database.
    * @throws EJBException if a communication or other error occurs.
    */
   public se.anatom.ejbca.ra.raadmin.GlobalConfiguration loadGlobalConfiguration( se.anatom.ejbca.log.Admin admin )
      throws java.rmi.RemoteException;

   /**
    * Sets the base url in the global configuration.
    * @throws EJBException if a communication or other error occurs.
    */
   public void initGlobalConfigurationBaseURL( se.anatom.ejbca.log.Admin admin,java.lang.String computername,java.lang.String applicationpath )
      throws java.rmi.RemoteException;

   /**
    * Saves the globalconfiguration
    * @throws EJBException if a communication or other error occurs.
    */
   public void saveGlobalConfiguration( se.anatom.ejbca.log.Admin admin,se.anatom.ejbca.ra.raadmin.GlobalConfiguration globalconfiguration )
      throws java.rmi.RemoteException;

}
