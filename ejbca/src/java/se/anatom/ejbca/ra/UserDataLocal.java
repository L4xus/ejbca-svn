/*
 * Generated by XDoclet - Do not edit!
 */
package se.anatom.ejbca.ra;

/**
 * Local interface for UserData.
 */
public interface UserDataLocal
   extends javax.ejb.EJBLocalObject,UserDataConstants
{

   public java.lang.String getUsername(  ) ;

   /**
    * username must be called 'striped' using StringTools.strip()
    */
   public void setUsername( java.lang.String username ) ;

   public java.lang.String getSubjectDN(  ) ;

   public void setSubjectDN( java.lang.String subjectDN ) ;

   public int getCAId(  ) ;

   public void setCAId( int caid ) ;

   public java.lang.String getSubjectAltName(  ) ;

   public void setSubjectAltName( java.lang.String subjectAltName ) ;

   public java.lang.String getSubjectEmail(  ) ;

   public void setSubjectEmail( java.lang.String subjectEmail ) ;

   public int getStatus(  ) ;

   public void setStatus( int status ) ;

   public int getType(  ) ;

   public void setType( int type ) ;

   /**
    * Returns clear text password or null.
    */
   public java.lang.String getClearPassword(  ) ;

   /**
    * Sets clear text password, the preferred method is setOpenPassword().
    */
   public void setClearPassword( java.lang.String clearPassword ) ;

   /**
    * Returns hashed password or null.
    */
   public java.lang.String getPasswordHash(  ) ;

   /**
    * Sets hash of password, this is the normal way to store passwords, but use the method setPassword() instead.
    */
   public void setPasswordHash( java.lang.String passwordHash ) ;

   /**
    * Returns the time when the user was created.
    */
   public long getTimeCreated(  ) ;

   /**
    * Returns the time when the user was last modified.
    */
   public long getTimeModified(  ) ;

   /**
    * Sets the time when the user was last modified.
    */
   public void setTimeModified( long createtime ) ;

   /**
    * Returns the end entity profile id the user belongs to.
    */
   public int getEndEntityProfileId(  ) ;

   /**
    * Sets the end entity profile id the user should belong to. 0 if profileid is not applicable.
    */
   public void setEndEntityProfileId( int endentityprofileid ) ;

   /**
    * Returns the certificate profile id that should be generated for the user.
    */
   public int getCertificateProfileId(  ) ;

   /**
    * Sets the certificate profile id that should be generated for the user. 0 if profileid is not applicable.
    */
   public void setCertificateProfileId( int certificateprofileid ) ;

   /**
    * Returns the token type id that should be generated for the user.
    */
   public int getTokenType(  ) ;

   /**
    * Sets the token type that should be generated for the user. Available token types can be found in SecConst.
    */
   public void setTokenType( int tokentype ) ;

   /**
    * Returns the hard token issuer id that should genererate for the users hard token.
    */
   public int getHardTokenIssuerId(  ) ;

   /**
    * Sets tthe hard token issuer id that should genererate for the users hard token. 0 if issuerid is not applicable.
    */
   public void setHardTokenIssuerId( int hardtokenissuerid ) ;

   /**
    * Function that sets the BCDN representation of the string.
    */
   public void setDN( java.lang.String dn ) ;

   /**
    * Sets password in ahsed form in the database, this way it cannot be read in clear form
    */
   public void setPassword( java.lang.String password ) throws java.security.NoSuchAlgorithmException;

   /**
    * Sets the password in clear form in the database, needed for machine processing, also sets the hashed password to the same value
    */
   public void setOpenPassword( java.lang.String password ) throws java.security.NoSuchAlgorithmException;

   /**
    * Verifies password by verifying against passwordhash
    */
   public boolean comparePassword( java.lang.String password ) throws java.security.NoSuchAlgorithmException;

   /**
    * Non-searchable information about a user. for future use.
    */
   public se.anatom.ejbca.ra.ExtendedInformation getExtendedInformation(  ) ;

   /**
    * Non-searchable information about a user. for future use.
    */
   public void setExtendedInformation( se.anatom.ejbca.ra.ExtendedInformation extendedinformation ) ;

}
