/*
 * Generated by XDoclet - Do not edit!
 */
package se.anatom.ejbca.ca.publisher;

/**
 * Remote interface for PublisherSession.
 */
public interface IPublisherSessionRemote
   extends javax.ejb.EJBObject
{
   /**
    * Stores the certificate to the given collection of publishers. See BasePublisher class for further documentation about function
    * @param publisherids a Collection (Integer) of publisherids.
    * @see se.anatom.ejbca.ca.publisher.BasePublisher
    * @return true if sucessfull result on all given publishers
    */
   public boolean storeCertificate( se.anatom.ejbca.log.Admin admin,java.util.Collection publisherids,java.security.cert.Certificate incert,java.lang.String username,java.lang.String password,java.lang.String cafp,int status,int type,se.anatom.ejbca.ra.ExtendedInformation extendedinformation )
      throws java.rmi.RemoteException;

   /**
    * Stores the crl to the given collection of publishers. See BasePublisher class for further documentation about function
    * @param publisherids a Collection (Integer) of publisherids.
    * @see se.anatom.ejbca.ca.publisher.BasePublisher
    * @return true if sucessfull result on all given publishers
    */
   public boolean storeCRL( se.anatom.ejbca.log.Admin admin,java.util.Collection publisherids,byte[] incrl,java.lang.String cafp,int number )
      throws java.rmi.RemoteException;

   /**
    * Revokes the certificate in the given collection of publishers. See BasePublisher class for further documentation about function
    * @param publisherids a Collection (Integer) of publisherids.
    * @see se.anatom.ejbca.ca.publisher.BasePublisher
    */
   public void revokeCertificate( se.anatom.ejbca.log.Admin admin,java.util.Collection publisherids,java.security.cert.Certificate cert,int reason )
      throws java.rmi.RemoteException;

   /**
    * Test the connection to of a publisher
    * @param publisherid the id of the publisher to test.
    * @see se.anatom.ejbca.ca.publisher.BasePublisher
    */
   public void testConnection( se.anatom.ejbca.log.Admin admin,int publisherid )
      throws se.anatom.ejbca.ca.exception.PublisherConnectionException, java.rmi.RemoteException;

   /**
    * Adds a publisher to the database.
    * @throws PublisherExistsException if hard token already exists.
    * @throws EJBException if a communication or other error occurs.
    */
   public void addPublisher( se.anatom.ejbca.log.Admin admin,java.lang.String name,se.anatom.ejbca.ca.publisher.BasePublisher publisher )
      throws se.anatom.ejbca.ca.exception.PublisherExistsException, java.rmi.RemoteException;

   /**
    * Adds a publisher to the database. Used for importing and exporting profiles from xml-files.
    * @throws PublisherExistsException if hard token already exists.
    * @throws EJBException if a communication or other error occurs.
    */
   public void addPublisher( se.anatom.ejbca.log.Admin admin,int id,java.lang.String name,se.anatom.ejbca.ca.publisher.BasePublisher publisher )
      throws se.anatom.ejbca.ca.exception.PublisherExistsException, java.rmi.RemoteException;

   /**
    * Updates publisher data
    * @throws EJBException if a communication or other error occurs.
    */
   public void changePublisher( se.anatom.ejbca.log.Admin admin,java.lang.String name,se.anatom.ejbca.ca.publisher.BasePublisher publisher )
      throws java.rmi.RemoteException;

   /**
    * Adds a publisher with the same content as the original.
    * @throws PublisherExistsException if publisher already exists.
    * @throws EJBException if a communication or other error occurs.
    */
   public void clonePublisher( se.anatom.ejbca.log.Admin admin,java.lang.String oldname,java.lang.String newname )
      throws se.anatom.ejbca.ca.exception.PublisherExistsException, java.rmi.RemoteException;

   /**
    * Removes a publisher from the database.
    * @throws EJBException if a communication or other error occurs.
    */
   public void removePublisher( se.anatom.ejbca.log.Admin admin,java.lang.String name )
      throws java.rmi.RemoteException;

   /**
    * Renames a publisher
    * @throws PublisherExistsException if publisher already exists.
    * @throws EJBException if a communication or other error occurs.
    */
   public void renamePublisher( se.anatom.ejbca.log.Admin admin,java.lang.String oldname,java.lang.String newname )
      throws se.anatom.ejbca.ca.exception.PublisherExistsException, java.rmi.RemoteException;

   /**
    * Retrives a Collection of id:s (Integer) to authorized publishers.
    * @return Collection of id:s (Integer)
    */
   public java.util.Collection getAuthorizedPublisherIds( se.anatom.ejbca.log.Admin admin )
      throws java.rmi.RemoteException;

   /**
    * Method creating a hashmap mapping publisher id (Integer) to publisher name (String).
    */
   public java.util.HashMap getPublisherIdToNameMap( se.anatom.ejbca.log.Admin admin )
      throws java.rmi.RemoteException;

   /**
    * Retrives a named publisher.
    */
   public se.anatom.ejbca.ca.publisher.BasePublisher getPublisher( se.anatom.ejbca.log.Admin admin,java.lang.String name )
      throws java.rmi.RemoteException;

   /**
    * Finds a publisher by id.
    */
   public se.anatom.ejbca.ca.publisher.BasePublisher getPublisher( se.anatom.ejbca.log.Admin admin,int id )
      throws java.rmi.RemoteException;

   /**
    * Help method used by publisher proxys to indicate if it is time to update it's data.
    */
   public int getPublisherUpdateCount( se.anatom.ejbca.log.Admin admin,int publisherid )
      throws java.rmi.RemoteException;

   /**
    * Returns a publisher id, given it's publishers name
    * @return the id or 0 if the publisher cannot be found.
    */
   public int getPublisherId( se.anatom.ejbca.log.Admin admin,java.lang.String name )
      throws java.rmi.RemoteException;

   /**
    * Returns a publishers name given its id.
    * @return the name or null if id doesnt exists
    * @throws EJBException if a communication or other error occurs.
    */
   public java.lang.String getPublisherName( se.anatom.ejbca.log.Admin admin,int id )
      throws java.rmi.RemoteException;

}
