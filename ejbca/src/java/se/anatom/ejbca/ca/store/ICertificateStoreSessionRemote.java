/*
 * Generated by XDoclet - Do not edit!
 */
package se.anatom.ejbca.ca.store;

/**
 * Remote interface for CertificateStoreSession.
 */
public interface ICertificateStoreSessionRemote
   extends javax.ejb.EJBObject
{
   /**
    * Stores a certificate.
    * @param incert The certificate to be stored.
    * @param cafp Fingerprint (hex) of the CAs certificate.
    * @param username username of end entity owning the certificate.
    * @param status Status of the certificate (from CertificateData).
    * @param type Type of certificate (CERTTYPE_ENDENTITY etc from CertificateDataBean).
    * @return true if storage was successful.
    */
   public boolean storeCertificate( se.anatom.ejbca.log.Admin admin,java.security.cert.Certificate incert,java.lang.String username,java.lang.String cafp,int status,int type )
      throws java.rmi.RemoteException;

   /**
    * Stores a CRL
    * @param incrl The DER coded CRL to be stored.
    * @param cafp Fingerprint (hex) of the CAs certificate.
    * @param number CRL number.
    * @return true if storage was successful.
    */
   public boolean storeCRL( se.anatom.ejbca.log.Admin admin,byte[] incrl,java.lang.String cafp,int number )
      throws java.rmi.RemoteException;

   /**
    * Lists fingerprint (primary key) of ALL certificates in the database. NOTE: Caution should be taken with this method as execution may be very heavy indeed if many certificates exist in the database (imagine what happens if there are millinos of certificates in the DB!). Should only be used for testing purposes.
    * @param admin Administrator performing the operation
    * @param issuerdn the dn of the certificates issuer.
    * @return Collection of fingerprints, i.e. Strings, reverse ordered by expireDate where last expireDate is first in array.
    */
   public java.util.Collection listAllCertificates( se.anatom.ejbca.log.Admin admin,java.lang.String issuerdn )
      throws java.rmi.RemoteException;

   public java.util.Collection listRevokedCertificates( se.anatom.ejbca.log.Admin admin,java.lang.String issuerdn )
      throws java.rmi.RemoteException;

   /**
    * Lists certificates for a given subject signed by the given issuer.
    * @param admin Administrator performing the operation
    * @param subjectDN the DN of the subject whos certificates will be retrieved.
    * @param issuerDN the dn of the certificates issuer.
    * @return Collection of Certificates (java.security.cert.Certificate) in no specified order or an empty Collection.
    * @throws EJBException if a communication or other error occurs.
    */
   public java.util.Collection findCertificatesBySubjectAndIssuer( se.anatom.ejbca.log.Admin admin,java.lang.String subjectDN,java.lang.String issuerDN )
      throws java.rmi.RemoteException;

   /**
    * Lists certificates for a given subject.
    * @param admin Administrator performing the operation
    * @param subjectDN the DN of the subject whos certificates will be retrieved.
    * @return Collection of Certificates (java.security.cert.Certificate) in no specified order or an empty Collection.
    */
   public java.util.Collection findCertificatesBySubject( se.anatom.ejbca.log.Admin admin,java.lang.String subjectDN )
      throws java.rmi.RemoteException;

   public java.util.Collection findCertificatesByExpireTime( se.anatom.ejbca.log.Admin admin,java.util.Date expireTime )
      throws java.rmi.RemoteException;

   /**
    * Finds usernames of users having certificate(s) expiring within a specified time and that has status active.
    */
   public java.util.Collection findCertificatesByExpireTimeWithLimit( se.anatom.ejbca.log.Admin admin,java.util.Date expiretime )
      throws java.rmi.RemoteException;

   /**
    * Finds a certificate specified by issuer DN and serial number.
    * @param admin Administrator performing the operation
    * @param issuerDN issuer DN of the desired certificate.
    * @param serno serial number of the desired certificate!
    * @return Certificate if found or null
    */
   public java.security.cert.Certificate findCertificateByIssuerAndSerno( se.anatom.ejbca.log.Admin admin,java.lang.String issuerDN,java.math.BigInteger serno )
      throws java.rmi.RemoteException;

   /**
    * Implements ICertificateStoreSession::findCertificatesByIssuerAndSernos. <p/> The method retrives all certificates from a specific issuer which are identified by list of serial numbers. The collection will be empty if the issuerDN is <tt>null</tt>/empty or the collection of serial numbers is empty.
    * @param admin
    * @param issuer the subjectDN of a CA certificate
    * @param sernos a collection of certificate serialnumbers
    * @return Collection a list of certificates; never <tt>null</tt>
    */
   public java.util.Collection findCertificatesByIssuerAndSernos( se.anatom.ejbca.log.Admin admin,java.lang.String issuerDN,java.util.Collection sernos )
      throws java.rmi.RemoteException;

   /**
    * Finds certificate(s) for a given serialnumber.
    * @param admin Administrator performing the operation
    * @param serno the serialnumber of the certificate(s) that will be retrieved
    * @return Certificate or null if none found.
    */
   public java.util.Collection findCertificatesBySerno( se.anatom.ejbca.log.Admin admin,java.math.BigInteger serno )
      throws java.rmi.RemoteException;

   /**
    * Finds username for a given certificate serial number.
    * @param admin Administrator performing the operation
    * @param serno the serialnumber of the certificate to find username for.
    * @return username or null if none found.
    */
   public java.lang.String findUsernameByCertSerno( se.anatom.ejbca.log.Admin admin,java.math.BigInteger serno,java.lang.String issuerdn )
      throws java.rmi.RemoteException;

   /**
    * Finds certificate(s) for a given usernaem.
    * @param admin Administrator performing the operation
    * @param username the usernaem of the certificate(s) that will be retrieved
    * @return Certificate or null if none found.
    */
   public java.util.Collection findCertificatesByUsername( se.anatom.ejbca.log.Admin admin,java.lang.String username )
      throws java.rmi.RemoteException;

   public se.anatom.ejbca.ca.store.CertificateInfo getCertificateInfo( se.anatom.ejbca.log.Admin admin,java.lang.String fingerprint )
      throws java.rmi.RemoteException;

   public java.security.cert.Certificate findCertificateByFingerprint( se.anatom.ejbca.log.Admin admin,java.lang.String fingerprint )
      throws java.rmi.RemoteException;

   /**
    * Lists all active (status = 20) certificates of a specific type and if given from a specific issuer. <p/> The type is the bitwise OR value of the types listed int {@link se.anatom.ejbca.ca.store.CertificateDataBean}:<br> <ul> <li><tt>CERTTYPE_ENDENTITY</tt><br> An user or machine certificate, which identifies a subject. </li> <li><tt>CERTTYPE_CA</tt><br> A CA certificate which is <b>not</b> a root CA. </li> <li><tt>CERTTYPE_ROOTCA</tt><br> A Root CA certificate. </li> </ul> <p/> Usage examples:<br> <ol> <li>Get all root CA certificates <p/> <code> ... ICertificateStoreSessionRemote itf = ... Collection certs = itf.findCertificatesByType(adm, CertificateDataBean.CERTTYPE_ROOTCA, null); ... </code> </li> <li>Get all subordinate CA certificates for a specific Root CA. It is assumed that the <tt>subjectDN</tt> of the Root CA certificate is located in the variable <tt>issuer</tt>. <p/> <code> ... ICertificateStoreSessionRemote itf = ... Certficate rootCA = ... String issuer = rootCA.getSubjectDN(); Collection certs = itf.findCertificatesByType(adm, CertificateDataBean.CERTTYPE_SUBCA, issuer); ... </code> </li> <li>Get <b>all</b> CA certificates. <p/> <code> ... ICertificateStoreSessionRemote itf = ... Collection certs = itf.findCertificatesByType(adm, CertificateDataBean.CERTTYPE_SUBCA + CERTTYPE_ROOTCA, null); ... </code> </li> </ol>
    * @param admin
    * @param issuerDN get all certificates issued by a specific issuer. If <tt>null</tt> or empty return certificates regardless of the issuer.
    * @param type CERTTYPE_* types from CertificateDataBean
    * @return Collection Collection of X509Certificate, never <tt>null</tt>
    */
   public java.util.Collection findCertificatesByType( se.anatom.ejbca.log.Admin admin,int type,java.lang.String issuerDN )
      throws java.rmi.RemoteException;

   /**
    * Set the status of certificates of given dn to revoked.
    * @param admin Administrator performing the operation
    * @param username the username of user to revoke certificates.
    * @param publishers and array of publiserids (Integer) of publishers to revoke the certificate in.
    * @param reason the reason of the revokation. (One of the RevokedCertInfo.REVOKATION_REASON constants.)
    */
   public void setRevokeStatus( se.anatom.ejbca.log.Admin admin,java.lang.String username,java.util.Collection publishers,int reason )
      throws java.rmi.RemoteException;

   /**
    * Set the status of certificate with given serno to revoked.
    * @param admin Administrator performing the operation
    * @param serno the serno of certificate to revoke.
    * @param publishers and array of publiserids (Integer) of publishers to revoke the certificate in.
    * @param reason the reason of the revokation. (One of the RevokedCertInfo.REVOKATION_REASON constants.)
    */
   public void setRevokeStatus( se.anatom.ejbca.log.Admin admin,java.lang.String issuerdn,java.math.BigInteger serno,java.util.Collection publishers,int reason )
      throws java.rmi.RemoteException;

   /**
    * Revokes a certificate (already revoked by the CA), in the database
    * @param cert The DER coded Certificate that has been revoked.
    * @param publishers and array of publiserids (Integer) of publishers to revoke the certificate in.
    */
   public void revokeCertificate( se.anatom.ejbca.log.Admin admin,java.security.cert.Certificate cert,java.util.Collection publishers,int reason )
      throws java.rmi.RemoteException;

   /**
    * Method revoking all certificates generated by the specified issuerdn. Sets revokedate to current time. Should only be called by CAAdminBean when a CA is about to be revoked.
    * @param admin the administrator performing the event.
    * @param issuerdn the dn of CA about to be revoked
    * @param reason the reason of revokation.
    */
   public void revokeAllCertByCA( se.anatom.ejbca.log.Admin admin,java.lang.String issuerdn,int reason )
      throws java.rmi.RemoteException;

   /**
    * Method that checks if a users all certificates have been revoked.
    * @param admin Administrator performing the operation
    * @param username the username to check for.
    * @return returns true if all certificates are revoked.
    */
   public boolean checkIfAllRevoked( se.anatom.ejbca.log.Admin admin,java.lang.String username )
      throws java.rmi.RemoteException;

   /**
    * The method returns the revocation status for a list or certificate identified by the serialnumber.
    * @param admin
    * @param issuer the subjectDN of a CA certificate
    * @param sernos a collection of certificate serialnumbers
    * @return Collection a collection of {@link RevokedCertInfo} objects which reflect the revocation status of the given certificates.
    */
   public java.util.Collection isRevoked( se.anatom.ejbca.log.Admin admin,java.lang.String issuerDN,java.util.Collection sernos )
      throws java.rmi.RemoteException;

   /**
    * Checks if a certificate is revoked.
    * @param admin Administrator performing the operation
    * @param issuerDN the DN of the issuer.
    * @param serno the serialnumber of the certificate that will be checked
    * @return RevokedCertInfo with revocation information, with reason RevokedCertInfo.NOT_REVOKED if NOT revoked. Returns null if certificate is not found.
    */
   public se.anatom.ejbca.ca.crl.RevokedCertInfo isRevoked( se.anatom.ejbca.log.Admin admin,java.lang.String issuerDN,java.math.BigInteger serno )
      throws java.rmi.RemoteException;

   /**
    * Retrieves the latest CRL issued by this CA.
    * @param admin Administrator performing the operation
    * @return X509CRL or null of no CRLs have been issued.
    */
   public byte[] getLastCRL( se.anatom.ejbca.log.Admin admin,java.lang.String issuerdn )
      throws java.rmi.RemoteException;

   /**
    * Retrieves the information about the lastest CRL issued by this CA.
    * @param admin Administrator performing the operation
    * @return CRLInfo of last CRL by CA.
    */
   public se.anatom.ejbca.ca.store.CRLInfo getLastCRLInfo( se.anatom.ejbca.log.Admin admin,java.lang.String issuerdn )
      throws java.rmi.RemoteException;

   /**
    * Retrieves the highest CRLNumber issued by the CA.
    * @param admin Administrator performing the operation
    * @param issuerdn the subjectDN of a CA certificate
    */
   public int getLastCRLNumber( se.anatom.ejbca.log.Admin admin,java.lang.String issuerdn )
      throws java.rmi.RemoteException;

   /**
    * Adds a certificate profile to the database.
    * @param admin administrator performing the task
    * @param certificateprofilename readable name of new certificate profile
    * @param certificateprofile the profile to be added
    */
   public void addCertificateProfile( se.anatom.ejbca.log.Admin admin,java.lang.String certificateprofilename,se.anatom.ejbca.ca.store.certificateprofiles.CertificateProfile certificateprofile )
      throws se.anatom.ejbca.ca.exception.CertificateProfileExistsException, java.rmi.RemoteException;

   /**
    * Adds a certificate profile to the database.
    * @param admin administrator performing the task
    * @param certificateprofileid internal ID of new certificate profile, use only if you know it's right.
    * @param certificateprofilename readable name of new certificate profile
    * @param certificateprofile the profile to be added
    */
   public void addCertificateProfile( se.anatom.ejbca.log.Admin admin,int certificateprofileid,java.lang.String certificateprofilename,se.anatom.ejbca.ca.store.certificateprofiles.CertificateProfile certificateprofile )
      throws se.anatom.ejbca.ca.exception.CertificateProfileExistsException, java.rmi.RemoteException;

   /**
    * Adds a certificateprofile with the same content as the original certificateprofile,
    * @param admin Administrator performing the operation
    * @param originalcertificateprofilename readable name of old certificate profile
    * @param newcertificateprofilename readable name of new certificate profile
    */
   public void cloneCertificateProfile( se.anatom.ejbca.log.Admin admin,java.lang.String originalcertificateprofilename,java.lang.String newcertificateprofilename )
      throws se.anatom.ejbca.ca.exception.CertificateProfileExistsException, java.rmi.RemoteException;

   /**
    * Removes a certificateprofile from the database.
    * @param admin Administrator performing the operation
    */
   public void removeCertificateProfile( se.anatom.ejbca.log.Admin admin,java.lang.String certificateprofilename )
      throws java.rmi.RemoteException;

   /**
    * Renames a certificateprofile
    */
   public void renameCertificateProfile( se.anatom.ejbca.log.Admin admin,java.lang.String oldcertificateprofilename,java.lang.String newcertificateprofilename )
      throws se.anatom.ejbca.ca.exception.CertificateProfileExistsException, java.rmi.RemoteException;

   /**
    * Updates certificateprofile data
    * @param admin Administrator performing the operation
    */
   public void changeCertificateProfile( se.anatom.ejbca.log.Admin admin,java.lang.String certificateprofilename,se.anatom.ejbca.ca.store.certificateprofiles.CertificateProfile certificateprofile )
      throws java.rmi.RemoteException;

   /**
    * Retrives a Collection of id:s (Integer) to authorized profiles.
    * @param certprofiletype should be either CertificateDataBean.CERTTYPE_ENDENTITY, CertificateDataBean.CERTTYPE_SUBCA, CertificateDataBean.CERTTYPE_ROOTCA, CertificateDataBean.CERTTYPE_HARDTOKEN (i.e EndEntity certificates and Hardtoken fixed profiles) or 0 for all. Retrives certificate profile names sorted.
    * @return Collection of id:s (Integer)
    */
   public java.util.Collection getAuthorizedCertificateProfileIds( se.anatom.ejbca.log.Admin admin,int certprofiletype )
      throws java.rmi.RemoteException;

   /**
    * Method creating a hashmap mapping profile id (Integer) to profile name (String).
    * @param admin Administrator performing the operation
    */
   public java.util.HashMap getCertificateProfileIdToNameMap( se.anatom.ejbca.log.Admin admin )
      throws java.rmi.RemoteException;

   /**
    * Retrives a named certificate profile.
    */
   public se.anatom.ejbca.ca.store.certificateprofiles.CertificateProfile getCertificateProfile( se.anatom.ejbca.log.Admin admin,java.lang.String certificateprofilename )
      throws java.rmi.RemoteException;

   /**
    * Finds a certificate profile by id.
    * @param admin Administrator performing the operation
    */
   public se.anatom.ejbca.ca.store.certificateprofiles.CertificateProfile getCertificateProfile( se.anatom.ejbca.log.Admin admin,int id )
      throws java.rmi.RemoteException;

   /**
    * Returns a certificate profile id, given it's certificate profile name
    * @param admin Administrator performing the operation
    * @return the id or 0 if certificateprofile cannot be found.
    */
   public int getCertificateProfileId( se.anatom.ejbca.log.Admin admin,java.lang.String certificateprofilename )
      throws java.rmi.RemoteException;

   /**
    * Returns a certificateprofiles name given it's id.
    * @param admin Administrator performing the operation
    * @return certificateprofilename or null if certificateprofile id doesn't exists.
    */
   public java.lang.String getCertificateProfileName( se.anatom.ejbca.log.Admin admin,int id )
      throws java.rmi.RemoteException;

   /**
    * Method to check if a CA exists in any of the certificate profiles. Used to avoid desyncronization of CA data.
    * @param admin Administrator performing the operation
    * @param caid the caid to search for.
    * @return true if ca exists in any of the certificate profiles.
    */
   public boolean existsCAInCertificateProfiles( se.anatom.ejbca.log.Admin admin,int caid )
      throws java.rmi.RemoteException;

   /**
    * Method to check if a Publisher exists in any of the certificate profiles. Used to avoid desyncronization of publisher data.
    * @param publisherid the publisherid to search for.
    * @return true if publisher exists in any of the certificate profiles.
    */
   public boolean existsPublisherInCertificateProfiles( se.anatom.ejbca.log.Admin admin,int publisherid )
      throws java.rmi.RemoteException;

}
