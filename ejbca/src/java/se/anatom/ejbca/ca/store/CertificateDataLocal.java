/*
 * Generated by XDoclet - Do not edit!
 */
package se.anatom.ejbca.ca.store;

/**
 * Local interface for CertificateData.
 */
public interface CertificateDataLocal
   extends javax.ejb.EJBLocalObject
{
   /**
    * DN of issuer of certificate
    * @return issuer dn
    */
   public java.lang.String getIssuerDN(  ) ;

   /**
    * DN of subject in certificate
    * @return subject dn
    */
   public java.lang.String getSubjectDN(  ) ;

   /**
    * Fingerprint of certificate
    * @return fingerprint
    */
   public java.lang.String getFingerprint(  ) ;

   /**
    * Fingerprint of certificate
    * @param fingerprint fingerprint
    */
   public void setFingerprint( java.lang.String fingerprint ) ;

   /**
    * Fingerprint of CA certificate
    * @return fingerprint
    */
   public java.lang.String getCAFingerprint(  ) ;

   /**
    * Fingerprint of CA certificate
    * @param cAFingerprint fingerprint
    */
   public void setCAFingerprint( java.lang.String cAFingerprint ) ;

   /**
    * status of certificate, ex CertificateData.CERT_ACTIVE
    * @return status
    */
   public int getStatus(  ) ;

   /**
    * status of certificate, ex CertificateData.CERT_ACTIVE
    * @param status status
    */
   public void setStatus( int status ) ;

   /**
    * What type of user the certificate belongs to, ex SecConst.USER_ENDUSER
    * @return user type
    */
   public int getType(  ) ;

   /**
    * What type of user the certificate belongs to, ex SecConst.USER_ENDUSER
    * @param type type
    */
   public void setType( int type ) ;

   /**
    * Serialnumber formated as BigInteger.toString()
    * @return serial number
    */
   public java.lang.String getSerialNumber(  ) ;

   /**
    * Serialnumber formated as BigInteger.toString()
    * @param serialNumber serial number
    */
   public void setSerialNumber( java.lang.String serialNumber ) ;

   /**
    * Date formated as seconds since 1970 (== Date.getTime())
    * @return expire date
    */
   public long getExpireDate(  ) ;

   /**
    * Date formated as seconds since 1970 (== Date.getTime())
    * @param expireDate expire date
    */
   public void setExpireDate( long expireDate ) ;

   /**
    * Set to date when revocation occured if status== CERT_REVOKED. Format == Date.getTime()
    * @return revocation date
    */
   public long getRevocationDate(  ) ;

   /**
    * Set to date when revocation occured if status== CERT_REVOKED. Format == Date.getTime()
    * @param revocationDate revocation date
    */
   public void setRevocationDate( long revocationDate ) ;

   /**
    * Set to revocation reason if status== CERT_REVOKED
    * @return revocation reason
    */
   public int getRevocationReason(  ) ;

   /**
    * Set to revocation reason if status== CERT_REVOKED
    * @param revocationReason revocation reason
    */
   public void setRevocationReason( int revocationReason ) ;

   /**
    * certificate itself
    * @return base64 encoded certificate
    */
   public java.lang.String getBase64Cert(  ) ;

   /**
    * certificate itself
    * @param base64Cert base64 encoded certificate
    */
   public void setBase64Cert( java.lang.String base64Cert ) ;

   /**
    * username in database
    * @return username
    */
   public java.lang.String getUsername(  ) ;

   /**
    * username must be called 'striped' using StringTools.strip()
    * @param username username
    * @see se.anatom.ejbca.util.StringTools
    */
   public void setUsername( java.lang.String username ) ;

   /**
    * certificate itself
    * @return certificate
    */
   public java.security.cert.Certificate getCertificate(  ) ;

   /**
    * certificate itself
    * @param incert certificate
    */
   public void setCertificate( java.security.cert.Certificate incert ) ;

   /**
    * DN of issuer of certificate
    * @param dn issuer dn
    */
   public void setIssuer( java.lang.String dn ) ;

   /**
    * DN of subject in certificate
    * @param dn subject dn
    */
   public void setSubject( java.lang.String dn ) ;

   /**
    * expire date of certificate
    * @param expireDate expire date
    */
   public void setExpireDate( java.util.Date expireDate ) ;

   /**
    * date the certificate was revoked
    * @param revocationDate revocation date
    */
   public void setRevocationDate( java.util.Date revocationDate ) ;

}
